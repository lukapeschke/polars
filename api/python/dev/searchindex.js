Search.setIndex({"alltitles": {"ABS": [[1384, "abs"]], "ACOS": [[1387, "acos"]], "ACOSD": [[1387, "acosd"]], "ARRAY_AGG": [[1380, "array-agg"]], "ARRAY_CONTAINS": [[1380, "array-contains"]], "ARRAY_GET": [[1380, "array-get"]], "ARRAY_LENGTH": [[1380, "array-length"]], "ARRAY_LOWER": [[1380, "array-lower"]], "ARRAY_MEAN": [[1380, "array-mean"]], "ARRAY_REVERSE": [[1380, "array-reverse"]], "ARRAY_SUM": [[1380, "array-sum"]], "ARRAY_TO_STRING": [[1380, "array-to-string"]], "ARRAY_UNIQUE": [[1380, "array-unique"]], "ARRAY_UPPER": [[1380, "array-upper"]], "ASIN": [[1387, "asin"]], "ASIND": [[1387, "asind"]], "ATAN": [[1387, "atan"]], "ATAN2": [[1387, "atan2"]], "ATAN2D": [[1387, "atan2d"]], "ATAND": [[1387, "atand"]], "AVG": [[1379, "avg"]], "Aggregate": [[1379, null]], "Aggregation": [[206, null], [359, null], [859, null], [969, null]], "Aliases": [[1379, null], [1379, null], [1384, null], [1384, null], [1385, null], [1385, null]], "Array": [[837, null], [1354, null], [1380, null]], "Asserts": [[1393, "asserts"]], "Attributes": [[347, null], [957, null], [1355, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[858, "avro"]], "BIT_AND": [[1381, "bit-and"]], "BIT_COUNT": [[1381, "bit-count"]], "BIT_LENGTH": [[1385, "bit-length"]], "BIT_OR": [[1381, "bit-or"]], "BIT_XOR": [[1381, "bit-xor"]], "Binary": [[838, null], [851, "binary"], [1356, null]], "Bitwise": [[1381, null]], "Boolean": [[839, null], [1357, null]], "CAST": [[1388, "cast"]], "CBRT": [[1384, "cbrt"]], "CEIL": [[1384, "ceil"]], "COALESCE": [[1382, "coalesce"]], "CONCAT": [[1385, "concat"]], "CONCAT_WS": [[1385, "concat-ws"]], "COS": [[1387, "cos"]], "COSD": [[1387, "cosd"]], "COT": [[1387, "cot"]], "COTD": [[1387, "cotd"]], "COUNT": [[1379, "count"]], "CREATE TABLE": [[1392, "create-table"]], "CSV": [[858, "csv"]], "Catalog": [[203, null]], "Categories": [[840, null], [1358, null]], "Clipboard": [[858, "clipboard"]], "Cloud Credentials": [[858, "cloud-credentials"]], "Columns / names": [[842, null]], "Comparison": [[851, "comparison"], [1366, "comparison"]], "Computation": [[348, null], [843, null], [1359, null]], "Conditional": [[1382, null]], "Config": [[205, null]], "Config load, save, state": [[205, "config-load-save-state"]], "Config options": [[205, "config-options"]], "Conjunction": [[851, "conjunction"]], "Conversion": [[856, "conversion"]], "DATE": [[1385, "date"]], "DATE_PART": [[1386, "date-part"]], "DEGREES": [[1387, "degrees"]], "DELETE": [[1392, "delete"]], "DISTINCT": [[1378, "distinct"]], "DIV": [[1384, "div"]], "DROP TABLES": [[1392, "drop-tables"]], "Data types": [[357, null]], "DataFrame": [[352, null]], "DataType": [[357, "datatype"]], "Database": [[858, "database"]], "Delta Lake": [[858, "delta-lake"]], "Descriptive": [[349, null], [958, null], [1360, null]], "Documentation": [[1390, null], [1390, null], [1390, null]], "ENDS_WITH": [[1385, "ends-with"]], "EXCEPT": [[1391, "except"]], "EXP": [[1384, "exp"]], "EXPLAIN": [[1392, "explain"]], "EXTRACT": [[1386, "extract"]], "Errors": [[358, "errors"]], "Examples": [[1, "examples"], [968, "examples"], [1393, "examples"]], "Excel / ODS": [[858, "excel-ods"]], "Exceptions": [[358, null]], "Export": [[350, null], [1361, null]], "Expression SQL": [[1390, "expression-sql"]], "Expression plugins": [[966, "expression-plugins"]], "Expressions": [[845, null]], "Extending the API": [[1, null]], "FIRST": [[1379, "first"]], "FLOOR": [[1384, "floor"]], "FROM": [[1378, "from"]], "Feather / IPC": [[858, "feather-ipc"]], "Frame SQL": [[1390, "frame-sql"]], "Functions": [[844, null], [856, null], [968, "functions"]], "GPUEngine": [[959, null]], "GREATEST": [[1382, "greatest"]], "GROUP BY": [[1378, "group-by"]], "Global SQL": [[1390, "global-sql"]], "GroupBy": [[351, null], [960, null]], "HAVING": [[1378, "having"]], "IF": [[1382, "if"]], "IFNULL": [[1382, "ifnull"]], "INITCAP": [[1385, "initcap"]], "INTERSECT": [[1391, "intersect"]], "IO plugins": [[966, "io-plugins"]], "Iceberg": [[858, "iceberg"]], "Importing": [[968, "importing"]], "InProcessQuery": [[961, null]], "Index": [[0, null]], "Input/output": [[858, null]], "Introduction": [[1390, "introduction"]], "JOIN": [[1378, "join"]], "JSON": [[858, "json"]], "LAST": [[1379, "last"]], "LEAST": [[1382, "least"]], "LEFT": [[1385, "left"]], "LENGTH": [[1385, "length"]], "LIMIT": [[1378, "limit"]], "LN": [[1384, "ln"]], "LOG": [[1384, "log"]], "LOG10": [[1384, "log10"]], "LOG1P": [[1384, "log1p"]], "LOG2": [[1384, "log2"]], "LOWER": [[1385, "lower"]], "LTRIM": [[1385, "ltrim"]], "LazyFrame": [[962, null]], "List": [[846, null], [1363, null]], "MAX": [[1379, "max"]], "MEDIAN": [[1379, "median"]], "MIN": [[1379, "min"]], "MOD": [[1384, "mod"]], "Manipulation/selection": [[354, null], [849, null], [964, null], [1365, null]], "Math": [[1384, null]], "Meta": [[847, null]], "Metadata": [[965, null]], "Methods": [[1390, "methods"]], "Miscellaneous": [[353, null], [848, null], [856, "miscellaneous"], [963, null], [1364, null]], "Multiple Config instances": [[205, "multiple-config-instances"]], "Multiple queries": [[856, "multiple-queries"]], "NORMALIZE": [[1385, "normalize"]], "NULLIF": [[1382, "nullif"]], "Name": [[850, null]], "Nested": [[357, "nested"]], "Numeric": [[357, "numeric"], [851, "numeric"], [1366, "numeric"]], "OCTET_LENGTH": [[1385, "octet-length"]], "OFFSET": [[1378, "offset"]], "ORDER BY": [[1378, "order-by"]], "Operators": [[851, null], [1366, null]], "Other": [[357, "other"]], "PI": [[1384, "pi"]], "POW": [[1384, "pow"]], "Panic": [[358, "panic"]], "Parametric testing": [[1393, "parametric-testing"]], "Parquet": [[858, "parquet"]], "Partition": [[858, "partition"]], "Plot": [[355, null], [1367, null]], "Plugins": [[966, null]], "Polars strategies": [[1393, "polars-strategies"]], "Profiles": [[1393, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[858, "pyarrow-datasets"]], "Python API": [[1390, null]], "Python API reference": [[857, null]], "QUANTILE_CONT": [[1379, "quantile-cont"]], "QUANTILE_DISC": [[1379, "quantile-disc"]], "Querying": [[1390, "querying"]], "RADIANS": [[1387, "radians"]], "REGEXP_LIKE": [[1385, "regexp-like"]], "REPLACE": [[1385, "replace"]], "REVERSE": [[1385, "reverse"]], "RIGHT": [[1385, "right"]], "ROUND": [[1384, "round"]], "RTRIM": [[1385, "rtrim"]], "Random": [[856, "random"]], "SELECT": [[1378, "select"]], "SHOW TABLES": [[1392, "show-tables"]], "SIGN": [[1384, "sign"]], "SIN": [[1387, "sin"]], "SIND": [[1387, "sind"]], "SPLIT_PART": [[1385, "split-part"]], "SQL Clauses": [[1378, null]], "SQL Functions": [[1383, null]], "SQL Interface": [[1389, null]], "SQLContext": [[1390, "sqlcontext"]], "SQRT": [[1384, "sqrt"]], "STARTS_WITH": [[1385, "starts-with"]], "STDDEV": [[1379, "stddev"]], "STRFTIME": [[1386, "strftime"]], "STRING_TO_ARRAY": [[1385, "string-to-array"]], "STRPOS": [[1385, "strpos"]], "STRPTIME": [[1385, "strptime"]], "SUBSTR": [[1385, "substr"]], "SUM": [[1379, "sum"]], "Scan Cast Options": [[858, "scan-cast-options"]], "Schema": [[967, null]], "Selectors": [[968, null]], "Serialization": [[353, "serialization"], [963, "serialization"]], "Series": [[1362, null]], "Set Operations": [[1391, null]], "Set operations": [[968, "set-operations"]], "Strategy helpers": [[1393, "strategy-helpers"]], "String": [[357, "string"], [852, null], [1368, null], [1385, null]], "StringCache": [[856, "stringcache"]], "Struct": [[853, null], [1369, null]], "Style": [[356, null]], "TAN": [[1387, "tan"]], "TAND": [[1387, "tand"]], "TIMESTAMP": [[1385, "timestamp"]], "TRUNCATE": [[1392, "truncate"]], "TRY_CAST": [[1388, "try-cast"]], "Table Operations": [[1392, null]], "Temporal": [[357, "temporal"], [854, null], [1370, null], [1386, null]], "Testing": [[1393, null]], "Trigonometry": [[1387, null]], "Types": [[1388, null]], "UNION": [[1391, "union"]], "UNION ALL": [[1391, "union-all"]], "UNION BY NAME": [[1391, "union-by-name"]], "UNNEST": [[1380, "unnest"], [1392, "unnest"]], "UPPER": [[1385, "upper"]], "Unity Catalog": [[204, null]], "Use as a context manager": [[205, "use-as-a-context-manager"]], "Use as a decorator": [[205, "use-as-a-decorator"]], "VARIANCE": [[1379, "variance"]], "WHERE": [[1378, "where"]], "Warnings": [[358, "warnings"]], "Window": [[855, null]], "polars.Catalog": [[190, null]], "polars.Catalog.get_table_info": [[191, null]], "polars.Catalog.list_catalogs": [[192, null]], "polars.Catalog.list_namespaces": [[193, null]], "polars.Catalog.list_tables": [[194, null]], "polars.Catalog.scan_table": [[195, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_engine_affinity": [[10, null]], "polars.Config.set_float_precision": [[11, null]], "polars.Config.set_fmt_float": [[12, null]], "polars.Config.set_fmt_str_lengths": [[13, null]], "polars.Config.set_fmt_table_cell_list_len": [[14, null]], "polars.Config.set_streaming_chunk_size": [[15, null]], "polars.Config.set_tbl_cell_alignment": [[16, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, null]], "polars.Config.set_tbl_cols": [[18, null]], "polars.Config.set_tbl_column_data_type_inline": [[19, null]], "polars.Config.set_tbl_dataframe_shape_below": [[20, null]], "polars.Config.set_tbl_formatting": [[21, null]], "polars.Config.set_tbl_hide_column_data_types": [[22, null]], "polars.Config.set_tbl_hide_column_names": [[23, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, null]], "polars.Config.set_tbl_hide_dtype_separator": [[25, null]], "polars.Config.set_tbl_rows": [[26, null]], "polars.Config.set_tbl_width_chars": [[27, null]], "polars.Config.set_thousands_separator": [[28, null]], "polars.Config.set_trim_decimal_zeros": [[29, null]], "polars.Config.set_verbose": [[30, null]], "polars.Config.state": [[31, null]], "polars.CredentialProvider": [[32, null]], "polars.CredentialProviderAWS": [[33, null]], "polars.CredentialProviderAzure": [[34, null]], "polars.CredentialProviderGCP": [[35, null]], "polars.DataFrame.__array__": [[207, null]], "polars.DataFrame.__arrow_c_stream__": [[208, null]], "polars.DataFrame.__dataframe__": [[209, null]], "polars.DataFrame.__getitem__": [[210, null]], "polars.DataFrame.approx_n_unique": [[211, null]], "polars.DataFrame.bottom_k": [[212, null]], "polars.DataFrame.cast": [[213, null]], "polars.DataFrame.clear": [[214, null]], "polars.DataFrame.clone": [[215, null]], "polars.DataFrame.collect_schema": [[216, null]], "polars.DataFrame.columns": [[217, null]], "polars.DataFrame.corr": [[218, null]], "polars.DataFrame.count": [[219, null]], "polars.DataFrame.describe": [[220, null]], "polars.DataFrame.deserialize": [[221, null]], "polars.DataFrame.drop": [[222, null]], "polars.DataFrame.drop_in_place": [[223, null]], "polars.DataFrame.drop_nans": [[224, null]], "polars.DataFrame.drop_nulls": [[225, null]], "polars.DataFrame.dtypes": [[226, null]], "polars.DataFrame.equals": [[227, null]], "polars.DataFrame.estimated_size": [[228, null]], "polars.DataFrame.explode": [[229, null]], "polars.DataFrame.extend": [[230, null]], "polars.DataFrame.fill_nan": [[231, null]], "polars.DataFrame.fill_null": [[232, null]], "polars.DataFrame.filter": [[233, null]], "polars.DataFrame.flags": [[234, null]], "polars.DataFrame.fold": [[235, null]], "polars.DataFrame.gather_every": [[236, null]], "polars.DataFrame.get_column": [[237, null]], "polars.DataFrame.get_column_index": [[238, null]], "polars.DataFrame.get_columns": [[239, null]], "polars.DataFrame.glimpse": [[240, null]], "polars.DataFrame.group_by": [[241, null]], "polars.DataFrame.group_by_dynamic": [[242, null]], "polars.DataFrame.hash_rows": [[243, null]], "polars.DataFrame.head": [[244, null]], "polars.DataFrame.height": [[245, null]], "polars.DataFrame.hstack": [[246, null]], "polars.DataFrame.insert_column": [[247, null]], "polars.DataFrame.interpolate": [[248, null]], "polars.DataFrame.is_duplicated": [[249, null]], "polars.DataFrame.is_empty": [[250, null]], "polars.DataFrame.is_unique": [[251, null]], "polars.DataFrame.item": [[252, null]], "polars.DataFrame.iter_columns": [[253, null]], "polars.DataFrame.iter_rows": [[254, null]], "polars.DataFrame.iter_slices": [[255, null]], "polars.DataFrame.join": [[256, null]], "polars.DataFrame.join_asof": [[257, null]], "polars.DataFrame.join_where": [[258, null]], "polars.DataFrame.lazy": [[259, null]], "polars.DataFrame.limit": [[260, null]], "polars.DataFrame.map_rows": [[261, null]], "polars.DataFrame.max": [[262, null]], "polars.DataFrame.max_horizontal": [[263, null]], "polars.DataFrame.mean": [[264, null]], "polars.DataFrame.mean_horizontal": [[265, null]], "polars.DataFrame.median": [[266, null]], "polars.DataFrame.melt": [[267, null]], "polars.DataFrame.merge_sorted": [[268, null]], "polars.DataFrame.min": [[269, null]], "polars.DataFrame.min_horizontal": [[270, null]], "polars.DataFrame.n_chunks": [[271, null]], "polars.DataFrame.n_unique": [[272, null]], "polars.DataFrame.null_count": [[273, null]], "polars.DataFrame.partition_by": [[274, null]], "polars.DataFrame.pipe": [[275, null]], "polars.DataFrame.pivot": [[276, null]], "polars.DataFrame.product": [[277, null]], "polars.DataFrame.quantile": [[278, null]], "polars.DataFrame.rechunk": [[279, null]], "polars.DataFrame.remove": [[280, null]], "polars.DataFrame.rename": [[281, null]], "polars.DataFrame.replace_column": [[282, null]], "polars.DataFrame.reverse": [[283, null]], "polars.DataFrame.rolling": [[284, null]], "polars.DataFrame.row": [[285, null]], "polars.DataFrame.rows": [[286, null]], "polars.DataFrame.rows_by_key": [[287, null]], "polars.DataFrame.sample": [[288, null]], "polars.DataFrame.schema": [[289, null]], "polars.DataFrame.select": [[290, null]], "polars.DataFrame.select_seq": [[291, null]], "polars.DataFrame.serialize": [[292, null]], "polars.DataFrame.set_sorted": [[293, null]], "polars.DataFrame.shape": [[294, null]], "polars.DataFrame.shift": [[295, null]], "polars.DataFrame.shrink_to_fit": [[296, null]], "polars.DataFrame.slice": [[297, null]], "polars.DataFrame.sort": [[298, null]], "polars.DataFrame.sql": [[299, null]], "polars.DataFrame.std": [[300, null]], "polars.DataFrame.sum": [[301, null]], "polars.DataFrame.sum_horizontal": [[302, null]], "polars.DataFrame.tail": [[303, null]], "polars.DataFrame.to_arrow": [[304, null]], "polars.DataFrame.to_dict": [[305, null]], "polars.DataFrame.to_dicts": [[306, null]], "polars.DataFrame.to_dummies": [[307, null]], "polars.DataFrame.to_init_repr": [[308, null]], "polars.DataFrame.to_jax": [[309, null]], "polars.DataFrame.to_numpy": [[310, null]], "polars.DataFrame.to_pandas": [[311, null]], "polars.DataFrame.to_series": [[312, null]], "polars.DataFrame.to_struct": [[313, null]], "polars.DataFrame.to_torch": [[314, null]], "polars.DataFrame.top_k": [[315, null]], "polars.DataFrame.transpose": [[316, null]], "polars.DataFrame.unique": [[317, null]], "polars.DataFrame.unnest": [[318, null]], "polars.DataFrame.unpivot": [[319, null]], "polars.DataFrame.unstack": [[320, null]], "polars.DataFrame.update": [[321, null]], "polars.DataFrame.upsample": [[322, null]], "polars.DataFrame.var": [[323, null]], "polars.DataFrame.vstack": [[324, null]], "polars.DataFrame.width": [[325, null]], "polars.DataFrame.with_columns": [[326, null]], "polars.DataFrame.with_columns_seq": [[327, null]], "polars.DataFrame.with_row_count": [[328, null]], "polars.DataFrame.with_row_index": [[329, null]], "polars.DataFrame.write_avro": [[36, null]], "polars.DataFrame.write_clipboard": [[37, null]], "polars.DataFrame.write_csv": [[38, null]], "polars.DataFrame.write_database": [[39, null]], "polars.DataFrame.write_delta": [[40, null]], "polars.DataFrame.write_excel": [[41, null]], "polars.DataFrame.write_iceberg": [[42, null]], "polars.DataFrame.write_ipc": [[43, null]], "polars.DataFrame.write_ipc_stream": [[44, null]], "polars.DataFrame.write_json": [[45, null]], "polars.DataFrame.write_ndjson": [[46, null]], "polars.DataFrame.write_parquet": [[47, null]], "polars.Expr.abs": [[360, null]], "polars.Expr.add": [[361, null]], "polars.Expr.agg_groups": [[362, null]], "polars.Expr.alias": [[363, null]], "polars.Expr.all": [[364, null]], "polars.Expr.and_": [[365, null]], "polars.Expr.any": [[366, null]], "polars.Expr.append": [[367, null]], "polars.Expr.approx_n_unique": [[368, null]], "polars.Expr.arccos": [[369, null]], "polars.Expr.arccosh": [[370, null]], "polars.Expr.arcsin": [[371, null]], "polars.Expr.arcsinh": [[372, null]], "polars.Expr.arctan": [[373, null]], "polars.Expr.arctanh": [[374, null]], "polars.Expr.arg_max": [[375, null]], "polars.Expr.arg_min": [[376, null]], "polars.Expr.arg_sort": [[377, null]], "polars.Expr.arg_true": [[378, null]], "polars.Expr.arg_unique": [[379, null]], "polars.Expr.arr.all": [[380, null]], "polars.Expr.arr.any": [[381, null]], "polars.Expr.arr.arg_max": [[382, null]], "polars.Expr.arr.arg_min": [[383, null]], "polars.Expr.arr.contains": [[384, null]], "polars.Expr.arr.count_matches": [[385, null]], "polars.Expr.arr.explode": [[386, null]], "polars.Expr.arr.first": [[387, null]], "polars.Expr.arr.get": [[388, null]], "polars.Expr.arr.join": [[389, null]], "polars.Expr.arr.last": [[390, null]], "polars.Expr.arr.max": [[391, null]], "polars.Expr.arr.median": [[392, null]], "polars.Expr.arr.min": [[393, null]], "polars.Expr.arr.n_unique": [[394, null]], "polars.Expr.arr.reverse": [[395, null]], "polars.Expr.arr.shift": [[396, null]], "polars.Expr.arr.sort": [[397, null]], "polars.Expr.arr.std": [[398, null]], "polars.Expr.arr.sum": [[399, null]], "polars.Expr.arr.to_list": [[400, null]], "polars.Expr.arr.to_struct": [[401, null]], "polars.Expr.arr.unique": [[402, null]], "polars.Expr.arr.var": [[403, null]], "polars.Expr.backward_fill": [[404, null]], "polars.Expr.bin.contains": [[405, null]], "polars.Expr.bin.decode": [[406, null]], "polars.Expr.bin.encode": [[407, null]], "polars.Expr.bin.ends_with": [[408, null]], "polars.Expr.bin.reinterpret": [[409, null]], "polars.Expr.bin.size": [[410, null]], "polars.Expr.bin.starts_with": [[411, null]], "polars.Expr.bitwise_and": [[412, null]], "polars.Expr.bitwise_count_ones": [[413, null]], "polars.Expr.bitwise_count_zeros": [[414, null]], "polars.Expr.bitwise_leading_ones": [[415, null]], "polars.Expr.bitwise_leading_zeros": [[416, null]], "polars.Expr.bitwise_or": [[417, null]], "polars.Expr.bitwise_trailing_ones": [[418, null]], "polars.Expr.bitwise_trailing_zeros": [[419, null]], "polars.Expr.bitwise_xor": [[420, null]], "polars.Expr.bottom_k": [[421, null]], "polars.Expr.bottom_k_by": [[422, null]], "polars.Expr.cast": [[423, null]], "polars.Expr.cat.ends_with": [[424, null]], "polars.Expr.cat.get_categories": [[425, null]], "polars.Expr.cat.len_bytes": [[426, null]], "polars.Expr.cat.len_chars": [[427, null]], "polars.Expr.cat.starts_with": [[428, null]], "polars.Expr.cbrt": [[429, null]], "polars.Expr.ceil": [[430, null]], "polars.Expr.clip": [[431, null]], "polars.Expr.cos": [[432, null]], "polars.Expr.cosh": [[433, null]], "polars.Expr.cot": [[434, null]], "polars.Expr.count": [[435, null]], "polars.Expr.cum_count": [[436, null]], "polars.Expr.cum_max": [[437, null]], "polars.Expr.cum_min": [[438, null]], "polars.Expr.cum_prod": [[439, null]], "polars.Expr.cum_sum": [[440, null]], "polars.Expr.cumulative_eval": [[441, null]], "polars.Expr.cut": [[442, null]], "polars.Expr.degrees": [[443, null]], "polars.Expr.deserialize": [[444, null]], "polars.Expr.diff": [[445, null]], "polars.Expr.dot": [[446, null]], "polars.Expr.drop_nans": [[447, null]], "polars.Expr.drop_nulls": [[448, null]], "polars.Expr.dt.add_business_days": [[449, null]], "polars.Expr.dt.base_utc_offset": [[450, null]], "polars.Expr.dt.cast_time_unit": [[451, null]], "polars.Expr.dt.century": [[452, null]], "polars.Expr.dt.combine": [[453, null]], "polars.Expr.dt.convert_time_zone": [[454, null]], "polars.Expr.dt.date": [[455, null]], "polars.Expr.dt.datetime": [[456, null]], "polars.Expr.dt.day": [[457, null]], "polars.Expr.dt.dst_offset": [[458, null]], "polars.Expr.dt.epoch": [[459, null]], "polars.Expr.dt.hour": [[460, null]], "polars.Expr.dt.is_business_day": [[461, null]], "polars.Expr.dt.is_leap_year": [[462, null]], "polars.Expr.dt.iso_year": [[463, null]], "polars.Expr.dt.microsecond": [[464, null]], "polars.Expr.dt.millennium": [[465, null]], "polars.Expr.dt.millisecond": [[466, null]], "polars.Expr.dt.minute": [[467, null]], "polars.Expr.dt.month": [[468, null]], "polars.Expr.dt.month_end": [[469, null]], "polars.Expr.dt.month_start": [[470, null]], "polars.Expr.dt.nanosecond": [[471, null]], "polars.Expr.dt.offset_by": [[472, null]], "polars.Expr.dt.ordinal_day": [[473, null]], "polars.Expr.dt.quarter": [[474, null]], "polars.Expr.dt.replace": [[475, null]], "polars.Expr.dt.replace_time_zone": [[476, null]], "polars.Expr.dt.round": [[477, null]], "polars.Expr.dt.second": [[478, null]], "polars.Expr.dt.strftime": [[479, null]], "polars.Expr.dt.time": [[480, null]], "polars.Expr.dt.timestamp": [[481, null]], "polars.Expr.dt.to_string": [[482, null]], "polars.Expr.dt.total_days": [[483, null]], "polars.Expr.dt.total_hours": [[484, null]], "polars.Expr.dt.total_microseconds": [[485, null]], "polars.Expr.dt.total_milliseconds": [[486, null]], "polars.Expr.dt.total_minutes": [[487, null]], "polars.Expr.dt.total_nanoseconds": [[488, null]], "polars.Expr.dt.total_seconds": [[489, null]], "polars.Expr.dt.truncate": [[490, null]], "polars.Expr.dt.week": [[491, null]], "polars.Expr.dt.weekday": [[492, null]], "polars.Expr.dt.with_time_unit": [[493, null]], "polars.Expr.dt.year": [[494, null]], "polars.Expr.entropy": [[495, null]], "polars.Expr.eq": [[496, null]], "polars.Expr.eq_missing": [[497, null]], "polars.Expr.ewm_mean": [[498, null]], "polars.Expr.ewm_mean_by": [[499, null]], "polars.Expr.ewm_std": [[500, null]], "polars.Expr.ewm_var": [[501, null]], "polars.Expr.exclude": [[502, null]], "polars.Expr.exp": [[503, null]], "polars.Expr.explode": [[504, null]], "polars.Expr.extend_constant": [[505, null]], "polars.Expr.fill_nan": [[506, null]], "polars.Expr.fill_null": [[507, null]], "polars.Expr.filter": [[508, null]], "polars.Expr.first": [[509, null]], "polars.Expr.flatten": [[510, null]], "polars.Expr.floor": [[511, null]], "polars.Expr.floordiv": [[512, null]], "polars.Expr.forward_fill": [[513, null]], "polars.Expr.from_json": [[514, null]], "polars.Expr.gather": [[515, null]], "polars.Expr.gather_every": [[516, null]], "polars.Expr.ge": [[517, null]], "polars.Expr.get": [[518, null]], "polars.Expr.gt": [[519, null]], "polars.Expr.has_nulls": [[520, null]], "polars.Expr.hash": [[521, null]], "polars.Expr.head": [[522, null]], "polars.Expr.hist": [[523, null]], "polars.Expr.implode": [[524, null]], "polars.Expr.index_of": [[525, null]], "polars.Expr.inspect": [[526, null]], "polars.Expr.interpolate": [[527, null]], "polars.Expr.interpolate_by": [[528, null]], "polars.Expr.is_between": [[529, null]], "polars.Expr.is_duplicated": [[530, null]], "polars.Expr.is_finite": [[531, null]], "polars.Expr.is_first_distinct": [[532, null]], "polars.Expr.is_in": [[533, null]], "polars.Expr.is_infinite": [[534, null]], "polars.Expr.is_last_distinct": [[535, null]], "polars.Expr.is_nan": [[536, null]], "polars.Expr.is_not_nan": [[537, null]], "polars.Expr.is_not_null": [[538, null]], "polars.Expr.is_null": [[539, null]], "polars.Expr.is_unique": [[540, null]], "polars.Expr.kurtosis": [[541, null]], "polars.Expr.last": [[542, null]], "polars.Expr.le": [[543, null]], "polars.Expr.len": [[544, null]], "polars.Expr.limit": [[545, null]], "polars.Expr.list.all": [[546, null]], "polars.Expr.list.any": [[547, null]], "polars.Expr.list.arg_max": [[548, null]], "polars.Expr.list.arg_min": [[549, null]], "polars.Expr.list.concat": [[550, null]], "polars.Expr.list.contains": [[551, null]], "polars.Expr.list.count_matches": [[552, null]], "polars.Expr.list.diff": [[553, null]], "polars.Expr.list.drop_nulls": [[554, null]], "polars.Expr.list.eval": [[555, null]], "polars.Expr.list.explode": [[556, null]], "polars.Expr.list.first": [[557, null]], "polars.Expr.list.gather": [[558, null]], "polars.Expr.list.gather_every": [[559, null]], "polars.Expr.list.get": [[560, null]], "polars.Expr.list.head": [[561, null]], "polars.Expr.list.join": [[562, null]], "polars.Expr.list.last": [[563, null]], "polars.Expr.list.len": [[564, null]], "polars.Expr.list.max": [[565, null]], "polars.Expr.list.mean": [[566, null]], "polars.Expr.list.median": [[567, null]], "polars.Expr.list.min": [[568, null]], "polars.Expr.list.n_unique": [[569, null]], "polars.Expr.list.reverse": [[570, null]], "polars.Expr.list.sample": [[571, null]], "polars.Expr.list.set_difference": [[572, null]], "polars.Expr.list.set_intersection": [[573, null]], "polars.Expr.list.set_symmetric_difference": [[574, null]], "polars.Expr.list.set_union": [[575, null]], "polars.Expr.list.shift": [[576, null]], "polars.Expr.list.slice": [[577, null]], "polars.Expr.list.sort": [[578, null]], "polars.Expr.list.std": [[579, null]], "polars.Expr.list.sum": [[580, null]], "polars.Expr.list.tail": [[581, null]], "polars.Expr.list.to_array": [[582, null]], "polars.Expr.list.to_struct": [[583, null]], "polars.Expr.list.unique": [[584, null]], "polars.Expr.list.var": [[585, null]], "polars.Expr.log": [[586, null]], "polars.Expr.log10": [[587, null]], "polars.Expr.log1p": [[588, null]], "polars.Expr.lower_bound": [[589, null]], "polars.Expr.lt": [[590, null]], "polars.Expr.map_batches": [[591, null]], "polars.Expr.map_elements": [[592, null]], "polars.Expr.max": [[593, null]], "polars.Expr.mean": [[594, null]], "polars.Expr.median": [[595, null]], "polars.Expr.meta.eq": [[596, null]], "polars.Expr.meta.has_multiple_outputs": [[597, null]], "polars.Expr.meta.is_column": [[598, null]], "polars.Expr.meta.is_column_selection": [[599, null]], "polars.Expr.meta.is_literal": [[600, null]], "polars.Expr.meta.is_regex_projection": [[601, null]], "polars.Expr.meta.ne": [[602, null]], "polars.Expr.meta.output_name": [[603, null]], "polars.Expr.meta.pop": [[604, null]], "polars.Expr.meta.root_names": [[605, null]], "polars.Expr.meta.serialize": [[606, null]], "polars.Expr.meta.show_graph": [[607, null]], "polars.Expr.meta.tree_format": [[608, null]], "polars.Expr.meta.undo_aliases": [[609, null]], "polars.Expr.meta.write_json": [[610, null]], "polars.Expr.min": [[611, null]], "polars.Expr.mod": [[612, null]], "polars.Expr.mode": [[613, null]], "polars.Expr.mul": [[614, null]], "polars.Expr.n_unique": [[615, null]], "polars.Expr.name.keep": [[616, null]], "polars.Expr.name.map": [[617, null]], "polars.Expr.name.map_fields": [[618, null]], "polars.Expr.name.prefix": [[619, null]], "polars.Expr.name.prefix_fields": [[620, null]], "polars.Expr.name.suffix": [[621, null]], "polars.Expr.name.suffix_fields": [[622, null]], "polars.Expr.name.to_lowercase": [[623, null]], "polars.Expr.name.to_uppercase": [[624, null]], "polars.Expr.nan_max": [[625, null]], "polars.Expr.nan_min": [[626, null]], "polars.Expr.ne": [[627, null]], "polars.Expr.ne_missing": [[628, null]], "polars.Expr.neg": [[629, null]], "polars.Expr.not_": [[630, null]], "polars.Expr.null_count": [[631, null]], "polars.Expr.or_": [[632, null]], "polars.Expr.over": [[633, null]], "polars.Expr.pct_change": [[634, null]], "polars.Expr.peak_max": [[635, null]], "polars.Expr.peak_min": [[636, null]], "polars.Expr.pipe": [[637, null]], "polars.Expr.pow": [[638, null]], "polars.Expr.product": [[639, null]], "polars.Expr.qcut": [[640, null]], "polars.Expr.quantile": [[641, null]], "polars.Expr.radians": [[642, null]], "polars.Expr.rank": [[643, null]], "polars.Expr.rechunk": [[644, null]], "polars.Expr.reinterpret": [[645, null]], "polars.Expr.repeat_by": [[646, null]], "polars.Expr.replace": [[647, null]], "polars.Expr.replace_strict": [[648, null]], "polars.Expr.reshape": [[649, null]], "polars.Expr.reverse": [[650, null]], "polars.Expr.rle": [[651, null]], "polars.Expr.rle_id": [[652, null]], "polars.Expr.rolling": [[653, null]], "polars.Expr.rolling_kurtosis": [[654, null]], "polars.Expr.rolling_map": [[655, null]], "polars.Expr.rolling_max": [[656, null]], "polars.Expr.rolling_max_by": [[657, null]], "polars.Expr.rolling_mean": [[658, null]], "polars.Expr.rolling_mean_by": [[659, null]], "polars.Expr.rolling_median": [[660, null]], "polars.Expr.rolling_median_by": [[661, null]], "polars.Expr.rolling_min": [[662, null]], "polars.Expr.rolling_min_by": [[663, null]], "polars.Expr.rolling_quantile": [[664, null]], "polars.Expr.rolling_quantile_by": [[665, null]], "polars.Expr.rolling_skew": [[666, null]], "polars.Expr.rolling_std": [[667, null]], "polars.Expr.rolling_std_by": [[668, null]], "polars.Expr.rolling_sum": [[669, null]], "polars.Expr.rolling_sum_by": [[670, null]], "polars.Expr.rolling_var": [[671, null]], "polars.Expr.rolling_var_by": [[672, null]], "polars.Expr.round": [[673, null]], "polars.Expr.round_sig_figs": [[674, null]], "polars.Expr.sample": [[675, null]], "polars.Expr.search_sorted": [[676, null]], "polars.Expr.set_sorted": [[677, null]], "polars.Expr.shift": [[678, null]], "polars.Expr.shrink_dtype": [[679, null]], "polars.Expr.shuffle": [[680, null]], "polars.Expr.sign": [[681, null]], "polars.Expr.sin": [[682, null]], "polars.Expr.sinh": [[683, null]], "polars.Expr.skew": [[684, null]], "polars.Expr.slice": [[685, null]], "polars.Expr.sort": [[686, null]], "polars.Expr.sort_by": [[687, null]], "polars.Expr.sqrt": [[688, null]], "polars.Expr.std": [[689, null]], "polars.Expr.str.concat": [[690, null]], "polars.Expr.str.contains": [[691, null]], "polars.Expr.str.contains_any": [[692, null]], "polars.Expr.str.count_matches": [[693, null]], "polars.Expr.str.decode": [[694, null]], "polars.Expr.str.encode": [[695, null]], "polars.Expr.str.ends_with": [[696, null]], "polars.Expr.str.escape_regex": [[697, null]], "polars.Expr.str.explode": [[698, null]], "polars.Expr.str.extract": [[699, null]], "polars.Expr.str.extract_all": [[700, null]], "polars.Expr.str.extract_groups": [[701, null]], "polars.Expr.str.extract_many": [[702, null]], "polars.Expr.str.find": [[703, null]], "polars.Expr.str.find_many": [[704, null]], "polars.Expr.str.head": [[705, null]], "polars.Expr.str.join": [[706, null]], "polars.Expr.str.json_decode": [[707, null]], "polars.Expr.str.json_path_match": [[708, null]], "polars.Expr.str.len_bytes": [[709, null]], "polars.Expr.str.len_chars": [[710, null]], "polars.Expr.str.normalize": [[711, null]], "polars.Expr.str.pad_end": [[712, null]], "polars.Expr.str.pad_start": [[713, null]], "polars.Expr.str.replace": [[714, null]], "polars.Expr.str.replace_all": [[715, null]], "polars.Expr.str.replace_many": [[716, null]], "polars.Expr.str.reverse": [[717, null]], "polars.Expr.str.slice": [[718, null]], "polars.Expr.str.split": [[719, null]], "polars.Expr.str.split_exact": [[720, null]], "polars.Expr.str.splitn": [[721, null]], "polars.Expr.str.starts_with": [[722, null]], "polars.Expr.str.strip_chars": [[723, null]], "polars.Expr.str.strip_chars_end": [[724, null]], "polars.Expr.str.strip_chars_start": [[725, null]], "polars.Expr.str.strip_prefix": [[726, null]], "polars.Expr.str.strip_suffix": [[727, null]], "polars.Expr.str.strptime": [[728, null]], "polars.Expr.str.tail": [[729, null]], "polars.Expr.str.to_date": [[730, null]], "polars.Expr.str.to_datetime": [[731, null]], "polars.Expr.str.to_decimal": [[732, null]], "polars.Expr.str.to_integer": [[733, null]], "polars.Expr.str.to_lowercase": [[734, null]], "polars.Expr.str.to_time": [[735, null]], "polars.Expr.str.to_titlecase": [[736, null]], "polars.Expr.str.to_uppercase": [[737, null]], "polars.Expr.str.zfill": [[738, null]], "polars.Expr.struct.field": [[739, null]], "polars.Expr.struct.json_encode": [[740, null]], "polars.Expr.struct.rename_fields": [[741, null]], "polars.Expr.struct.unnest": [[742, null]], "polars.Expr.struct.with_fields": [[743, null]], "polars.Expr.sub": [[744, null]], "polars.Expr.sum": [[745, null]], "polars.Expr.tail": [[746, null]], "polars.Expr.tan": [[747, null]], "polars.Expr.tanh": [[748, null]], "polars.Expr.to_physical": [[749, null]], "polars.Expr.top_k": [[750, null]], "polars.Expr.top_k_by": [[751, null]], "polars.Expr.truediv": [[752, null]], "polars.Expr.unique": [[753, null]], "polars.Expr.unique_counts": [[754, null]], "polars.Expr.upper_bound": [[755, null]], "polars.Expr.value_counts": [[756, null]], "polars.Expr.var": [[757, null]], "polars.Expr.where": [[758, null]], "polars.Expr.xor": [[759, null]], "polars.LazyFrame.approx_n_unique": [[860, null]], "polars.LazyFrame.bottom_k": [[861, null]], "polars.LazyFrame.cache": [[862, null]], "polars.LazyFrame.cast": [[863, null]], "polars.LazyFrame.clear": [[864, null]], "polars.LazyFrame.clone": [[865, null]], "polars.LazyFrame.collect": [[866, null]], "polars.LazyFrame.collect_async": [[867, null]], "polars.LazyFrame.collect_schema": [[868, null]], "polars.LazyFrame.columns": [[869, null]], "polars.LazyFrame.count": [[870, null]], "polars.LazyFrame.describe": [[871, null]], "polars.LazyFrame.deserialize": [[872, null]], "polars.LazyFrame.drop": [[873, null]], "polars.LazyFrame.drop_nans": [[874, null]], "polars.LazyFrame.drop_nulls": [[875, null]], "polars.LazyFrame.dtypes": [[876, null]], "polars.LazyFrame.explain": [[877, null]], "polars.LazyFrame.explode": [[878, null]], "polars.LazyFrame.fill_nan": [[879, null]], "polars.LazyFrame.fill_null": [[880, null]], "polars.LazyFrame.filter": [[881, null]], "polars.LazyFrame.first": [[882, null]], "polars.LazyFrame.gather_every": [[883, null]], "polars.LazyFrame.group_by": [[884, null]], "polars.LazyFrame.group_by_dynamic": [[885, null]], "polars.LazyFrame.head": [[886, null]], "polars.LazyFrame.inspect": [[887, null]], "polars.LazyFrame.interpolate": [[888, null]], "polars.LazyFrame.join": [[889, null]], "polars.LazyFrame.join_asof": [[890, null]], "polars.LazyFrame.join_where": [[891, null]], "polars.LazyFrame.last": [[892, null]], "polars.LazyFrame.lazy": [[893, null]], "polars.LazyFrame.limit": [[894, null]], "polars.LazyFrame.map_batches": [[895, null]], "polars.LazyFrame.max": [[896, null]], "polars.LazyFrame.mean": [[897, null]], "polars.LazyFrame.median": [[898, null]], "polars.LazyFrame.melt": [[899, null]], "polars.LazyFrame.merge_sorted": [[900, null]], "polars.LazyFrame.min": [[901, null]], "polars.LazyFrame.null_count": [[902, null]], "polars.LazyFrame.pipe": [[903, null]], "polars.LazyFrame.profile": [[904, null]], "polars.LazyFrame.quantile": [[905, null]], "polars.LazyFrame.remote": [[906, null]], "polars.LazyFrame.remove": [[907, null]], "polars.LazyFrame.rename": [[908, null]], "polars.LazyFrame.reverse": [[909, null]], "polars.LazyFrame.rolling": [[910, null]], "polars.LazyFrame.schema": [[911, null]], "polars.LazyFrame.select": [[912, null]], "polars.LazyFrame.select_seq": [[913, null]], "polars.LazyFrame.serialize": [[914, null]], "polars.LazyFrame.set_sorted": [[915, null]], "polars.LazyFrame.shift": [[916, null]], "polars.LazyFrame.show_graph": [[917, null]], "polars.LazyFrame.sink_csv": [[48, null]], "polars.LazyFrame.sink_ipc": [[49, null]], "polars.LazyFrame.sink_ndjson": [[50, null]], "polars.LazyFrame.sink_parquet": [[51, null]], "polars.LazyFrame.slice": [[918, null]], "polars.LazyFrame.sort": [[919, null]], "polars.LazyFrame.sql": [[920, null]], "polars.LazyFrame.std": [[921, null]], "polars.LazyFrame.sum": [[922, null]], "polars.LazyFrame.tail": [[923, null]], "polars.LazyFrame.top_k": [[924, null]], "polars.LazyFrame.unique": [[925, null]], "polars.LazyFrame.unnest": [[926, null]], "polars.LazyFrame.unpivot": [[927, null]], "polars.LazyFrame.update": [[928, null]], "polars.LazyFrame.var": [[929, null]], "polars.LazyFrame.width": [[930, null]], "polars.LazyFrame.with_columns": [[931, null]], "polars.LazyFrame.with_columns_seq": [[932, null]], "polars.LazyFrame.with_context": [[933, null]], "polars.LazyFrame.with_row_count": [[934, null]], "polars.LazyFrame.with_row_index": [[935, null]], "polars.PartitionByKey": [[52, null]], "polars.PartitionMaxSize": [[53, null]], "polars.PartitionParted": [[54, null]], "polars.QueryOptFlags": [[936, null]], "polars.SQLContext.execute": [[1371, null]], "polars.SQLContext.execute_global": [[1372, null]], "polars.SQLContext.register": [[1373, null]], "polars.SQLContext.register_globals": [[1374, null]], "polars.SQLContext.register_many": [[1375, null]], "polars.SQLContext.tables": [[1376, null]], "polars.SQLContext.unregister": [[1377, null]], "polars.ScanCastOptions": [[55, null]], "polars.Series.__array__": [[970, null]], "polars.Series.__arrow_c_stream__": [[971, null]], "polars.Series.__getitem__": [[972, null]], "polars.Series.abs": [[973, null]], "polars.Series.alias": [[974, null]], "polars.Series.all": [[975, null]], "polars.Series.any": [[976, null]], "polars.Series.append": [[977, null]], "polars.Series.approx_n_unique": [[978, null]], "polars.Series.arccos": [[979, null]], "polars.Series.arccosh": [[980, null]], "polars.Series.arcsin": [[981, null]], "polars.Series.arcsinh": [[982, null]], "polars.Series.arctan": [[983, null]], "polars.Series.arctanh": [[984, null]], "polars.Series.arg_max": [[985, null]], "polars.Series.arg_min": [[986, null]], "polars.Series.arg_sort": [[987, null]], "polars.Series.arg_true": [[988, null]], "polars.Series.arg_unique": [[989, null]], "polars.Series.arr.all": [[990, null]], "polars.Series.arr.any": [[991, null]], "polars.Series.arr.arg_max": [[992, null]], "polars.Series.arr.arg_min": [[993, null]], "polars.Series.arr.contains": [[994, null]], "polars.Series.arr.count_matches": [[995, null]], "polars.Series.arr.explode": [[996, null]], "polars.Series.arr.first": [[997, null]], "polars.Series.arr.get": [[998, null]], "polars.Series.arr.join": [[999, null]], "polars.Series.arr.last": [[1000, null]], "polars.Series.arr.max": [[1001, null]], "polars.Series.arr.median": [[1002, null]], "polars.Series.arr.min": [[1003, null]], "polars.Series.arr.n_unique": [[1004, null]], "polars.Series.arr.reverse": [[1005, null]], "polars.Series.arr.shift": [[1006, null]], "polars.Series.arr.sort": [[1007, null]], "polars.Series.arr.std": [[1008, null]], "polars.Series.arr.sum": [[1009, null]], "polars.Series.arr.to_list": [[1010, null]], "polars.Series.arr.to_struct": [[1011, null]], "polars.Series.arr.unique": [[1012, null]], "polars.Series.arr.var": [[1013, null]], "polars.Series.backward_fill": [[1014, null]], "polars.Series.bin.contains": [[1015, null]], "polars.Series.bin.decode": [[1016, null]], "polars.Series.bin.encode": [[1017, null]], "polars.Series.bin.ends_with": [[1018, null]], "polars.Series.bin.reinterpret": [[1019, null]], "polars.Series.bin.size": [[1020, null]], "polars.Series.bin.starts_with": [[1021, null]], "polars.Series.bitwise_and": [[1022, null]], "polars.Series.bitwise_count_ones": [[1023, null]], "polars.Series.bitwise_count_zeros": [[1024, null]], "polars.Series.bitwise_leading_ones": [[1025, null]], "polars.Series.bitwise_leading_zeros": [[1026, null]], "polars.Series.bitwise_or": [[1027, null]], "polars.Series.bitwise_trailing_ones": [[1028, null]], "polars.Series.bitwise_trailing_zeros": [[1029, null]], "polars.Series.bitwise_xor": [[1030, null]], "polars.Series.bottom_k": [[1031, null]], "polars.Series.cast": [[1032, null]], "polars.Series.cat.ends_with": [[1033, null]], "polars.Series.cat.get_categories": [[1034, null]], "polars.Series.cat.is_local": [[1035, null]], "polars.Series.cat.len_bytes": [[1036, null]], "polars.Series.cat.len_chars": [[1037, null]], "polars.Series.cat.starts_with": [[1038, null]], "polars.Series.cat.to_local": [[1039, null]], "polars.Series.cat.uses_lexical_ordering": [[1040, null]], "polars.Series.cbrt": [[1041, null]], "polars.Series.ceil": [[1042, null]], "polars.Series.chunk_lengths": [[1043, null]], "polars.Series.clear": [[1044, null]], "polars.Series.clip": [[1045, null]], "polars.Series.clone": [[1046, null]], "polars.Series.cos": [[1047, null]], "polars.Series.cosh": [[1048, null]], "polars.Series.cot": [[1049, null]], "polars.Series.count": [[1050, null]], "polars.Series.cum_count": [[1051, null]], "polars.Series.cum_max": [[1052, null]], "polars.Series.cum_min": [[1053, null]], "polars.Series.cum_prod": [[1054, null]], "polars.Series.cum_sum": [[1055, null]], "polars.Series.cumulative_eval": [[1056, null]], "polars.Series.cut": [[1057, null]], "polars.Series.describe": [[1058, null]], "polars.Series.diff": [[1059, null]], "polars.Series.dot": [[1060, null]], "polars.Series.drop_nans": [[1061, null]], "polars.Series.drop_nulls": [[1062, null]], "polars.Series.dt.add_business_days": [[1063, null]], "polars.Series.dt.base_utc_offset": [[1064, null]], "polars.Series.dt.cast_time_unit": [[1065, null]], "polars.Series.dt.century": [[1066, null]], "polars.Series.dt.combine": [[1067, null]], "polars.Series.dt.convert_time_zone": [[1068, null]], "polars.Series.dt.date": [[1069, null]], "polars.Series.dt.datetime": [[1070, null]], "polars.Series.dt.day": [[1071, null]], "polars.Series.dt.dst_offset": [[1072, null]], "polars.Series.dt.epoch": [[1073, null]], "polars.Series.dt.hour": [[1074, null]], "polars.Series.dt.is_business_day": [[1075, null]], "polars.Series.dt.is_leap_year": [[1076, null]], "polars.Series.dt.iso_year": [[1077, null]], "polars.Series.dt.max": [[1078, null]], "polars.Series.dt.mean": [[1079, null]], "polars.Series.dt.median": [[1080, null]], "polars.Series.dt.microsecond": [[1081, null]], "polars.Series.dt.millennium": [[1082, null]], "polars.Series.dt.millisecond": [[1083, null]], "polars.Series.dt.min": [[1084, null]], "polars.Series.dt.minute": [[1085, null]], "polars.Series.dt.month": [[1086, null]], "polars.Series.dt.month_end": [[1087, null]], "polars.Series.dt.month_start": [[1088, null]], "polars.Series.dt.nanosecond": [[1089, null]], "polars.Series.dt.offset_by": [[1090, null]], "polars.Series.dt.ordinal_day": [[1091, null]], "polars.Series.dt.quarter": [[1092, null]], "polars.Series.dt.replace": [[1093, null]], "polars.Series.dt.replace_time_zone": [[1094, null]], "polars.Series.dt.round": [[1095, null]], "polars.Series.dt.second": [[1096, null]], "polars.Series.dt.strftime": [[1097, null]], "polars.Series.dt.time": [[1098, null]], "polars.Series.dt.timestamp": [[1099, null]], "polars.Series.dt.to_string": [[1100, null]], "polars.Series.dt.total_days": [[1101, null]], "polars.Series.dt.total_hours": [[1102, null]], "polars.Series.dt.total_microseconds": [[1103, null]], "polars.Series.dt.total_milliseconds": [[1104, null]], "polars.Series.dt.total_minutes": [[1105, null]], "polars.Series.dt.total_nanoseconds": [[1106, null]], "polars.Series.dt.total_seconds": [[1107, null]], "polars.Series.dt.truncate": [[1108, null]], "polars.Series.dt.week": [[1109, null]], "polars.Series.dt.weekday": [[1110, null]], "polars.Series.dt.with_time_unit": [[1111, null]], "polars.Series.dt.year": [[1112, null]], "polars.Series.dtype": [[1113, null]], "polars.Series.entropy": [[1114, null]], "polars.Series.eq": [[1115, null]], "polars.Series.eq_missing": [[1116, null]], "polars.Series.equals": [[1117, null]], "polars.Series.estimated_size": [[1118, null]], "polars.Series.ewm_mean": [[1119, null]], "polars.Series.ewm_mean_by": [[1120, null]], "polars.Series.ewm_std": [[1121, null]], "polars.Series.ewm_var": [[1122, null]], "polars.Series.exp": [[1123, null]], "polars.Series.explode": [[1124, null]], "polars.Series.extend": [[1125, null]], "polars.Series.extend_constant": [[1126, null]], "polars.Series.fill_nan": [[1127, null]], "polars.Series.fill_null": [[1128, null]], "polars.Series.filter": [[1129, null]], "polars.Series.first": [[1130, null]], "polars.Series.flags": [[1131, null]], "polars.Series.floor": [[1132, null]], "polars.Series.forward_fill": [[1133, null]], "polars.Series.gather": [[1134, null]], "polars.Series.gather_every": [[1135, null]], "polars.Series.ge": [[1136, null]], "polars.Series.get_chunks": [[1137, null]], "polars.Series.gt": [[1138, null]], "polars.Series.has_nulls": [[1139, null]], "polars.Series.has_validity": [[1140, null]], "polars.Series.hash": [[1141, null]], "polars.Series.head": [[1142, null]], "polars.Series.hist": [[1143, null]], "polars.Series.implode": [[1144, null]], "polars.Series.index_of": [[1145, null]], "polars.Series.interpolate": [[1146, null]], "polars.Series.interpolate_by": [[1147, null]], "polars.Series.is_between": [[1148, null]], "polars.Series.is_duplicated": [[1149, null]], "polars.Series.is_empty": [[1150, null]], "polars.Series.is_finite": [[1151, null]], "polars.Series.is_first_distinct": [[1152, null]], "polars.Series.is_in": [[1153, null]], "polars.Series.is_infinite": [[1154, null]], "polars.Series.is_last_distinct": [[1155, null]], "polars.Series.is_nan": [[1156, null]], "polars.Series.is_not_nan": [[1157, null]], "polars.Series.is_not_null": [[1158, null]], "polars.Series.is_null": [[1159, null]], "polars.Series.is_sorted": [[1160, null]], "polars.Series.is_unique": [[1161, null]], "polars.Series.item": [[1162, null]], "polars.Series.kurtosis": [[1163, null]], "polars.Series.last": [[1164, null]], "polars.Series.le": [[1165, null]], "polars.Series.len": [[1166, null]], "polars.Series.limit": [[1167, null]], "polars.Series.list.all": [[1168, null]], "polars.Series.list.any": [[1169, null]], "polars.Series.list.arg_max": [[1170, null]], "polars.Series.list.arg_min": [[1171, null]], "polars.Series.list.concat": [[1172, null]], "polars.Series.list.contains": [[1173, null]], "polars.Series.list.count_matches": [[1174, null]], "polars.Series.list.diff": [[1175, null]], "polars.Series.list.drop_nulls": [[1176, null]], "polars.Series.list.eval": [[1177, null]], "polars.Series.list.explode": [[1178, null]], "polars.Series.list.first": [[1179, null]], "polars.Series.list.gather": [[1180, null]], "polars.Series.list.gather_every": [[1181, null]], "polars.Series.list.get": [[1182, null]], "polars.Series.list.head": [[1183, null]], "polars.Series.list.join": [[1184, null]], "polars.Series.list.last": [[1185, null]], "polars.Series.list.len": [[1186, null]], "polars.Series.list.max": [[1187, null]], "polars.Series.list.mean": [[1188, null]], "polars.Series.list.median": [[1189, null]], "polars.Series.list.min": [[1190, null]], "polars.Series.list.n_unique": [[1191, null]], "polars.Series.list.reverse": [[1192, null]], "polars.Series.list.sample": [[1193, null]], "polars.Series.list.set_difference": [[1194, null]], "polars.Series.list.set_intersection": [[1195, null]], "polars.Series.list.set_symmetric_difference": [[1196, null]], "polars.Series.list.set_union": [[1197, null]], "polars.Series.list.shift": [[1198, null]], "polars.Series.list.slice": [[1199, null]], "polars.Series.list.sort": [[1200, null]], "polars.Series.list.std": [[1201, null]], "polars.Series.list.sum": [[1202, null]], "polars.Series.list.tail": [[1203, null]], "polars.Series.list.to_array": [[1204, null]], "polars.Series.list.to_struct": [[1205, null]], "polars.Series.list.unique": [[1206, null]], "polars.Series.list.var": [[1207, null]], "polars.Series.log": [[1208, null]], "polars.Series.log10": [[1209, null]], "polars.Series.log1p": [[1210, null]], "polars.Series.lower_bound": [[1211, null]], "polars.Series.lt": [[1212, null]], "polars.Series.map_elements": [[1213, null]], "polars.Series.max": [[1214, null]], "polars.Series.mean": [[1215, null]], "polars.Series.median": [[1216, null]], "polars.Series.min": [[1217, null]], "polars.Series.mode": [[1218, null]], "polars.Series.n_chunks": [[1219, null]], "polars.Series.n_unique": [[1220, null]], "polars.Series.name": [[1221, null]], "polars.Series.nan_max": [[1222, null]], "polars.Series.nan_min": [[1223, null]], "polars.Series.ne": [[1224, null]], "polars.Series.ne_missing": [[1225, null]], "polars.Series.new_from_index": [[1226, null]], "polars.Series.not_": [[1227, null]], "polars.Series.null_count": [[1228, null]], "polars.Series.pct_change": [[1229, null]], "polars.Series.peak_max": [[1230, null]], "polars.Series.peak_min": [[1231, null]], "polars.Series.pow": [[1232, null]], "polars.Series.product": [[1233, null]], "polars.Series.qcut": [[1234, null]], "polars.Series.quantile": [[1235, null]], "polars.Series.rank": [[1236, null]], "polars.Series.rechunk": [[1237, null]], "polars.Series.reinterpret": [[1238, null]], "polars.Series.rename": [[1239, null]], "polars.Series.repeat_by": [[1240, null]], "polars.Series.replace": [[1241, null]], "polars.Series.replace_strict": [[1242, null]], "polars.Series.reshape": [[1243, null]], "polars.Series.reverse": [[1244, null]], "polars.Series.rle": [[1245, null]], "polars.Series.rle_id": [[1246, null]], "polars.Series.rolling_kurtosis": [[1247, null]], "polars.Series.rolling_map": [[1248, null]], "polars.Series.rolling_max": [[1249, null]], "polars.Series.rolling_mean": [[1250, null]], "polars.Series.rolling_median": [[1251, null]], "polars.Series.rolling_min": [[1252, null]], "polars.Series.rolling_quantile": [[1253, null]], "polars.Series.rolling_skew": [[1254, null]], "polars.Series.rolling_std": [[1255, null]], "polars.Series.rolling_sum": [[1256, null]], "polars.Series.rolling_var": [[1257, null]], "polars.Series.round": [[1258, null]], "polars.Series.round_sig_figs": [[1259, null]], "polars.Series.sample": [[1260, null]], "polars.Series.scatter": [[1261, null]], "polars.Series.search_sorted": [[1262, null]], "polars.Series.set": [[1263, null]], "polars.Series.set_sorted": [[1264, null]], "polars.Series.shape": [[1265, null]], "polars.Series.shift": [[1266, null]], "polars.Series.shrink_dtype": [[1267, null]], "polars.Series.shrink_to_fit": [[1268, null]], "polars.Series.shuffle": [[1269, null]], "polars.Series.sign": [[1270, null]], "polars.Series.sin": [[1271, null]], "polars.Series.sinh": [[1272, null]], "polars.Series.skew": [[1273, null]], "polars.Series.slice": [[1274, null]], "polars.Series.sort": [[1275, null]], "polars.Series.sqrt": [[1276, null]], "polars.Series.std": [[1277, null]], "polars.Series.str.concat": [[1278, null]], "polars.Series.str.contains": [[1279, null]], "polars.Series.str.contains_any": [[1280, null]], "polars.Series.str.count_matches": [[1281, null]], "polars.Series.str.decode": [[1282, null]], "polars.Series.str.encode": [[1283, null]], "polars.Series.str.ends_with": [[1284, null]], "polars.Series.str.escape_regex": [[1285, null]], "polars.Series.str.explode": [[1286, null]], "polars.Series.str.extract": [[1287, null]], "polars.Series.str.extract_all": [[1288, null]], "polars.Series.str.extract_groups": [[1289, null]], "polars.Series.str.extract_many": [[1290, null]], "polars.Series.str.find": [[1291, null]], "polars.Series.str.find_many": [[1292, null]], "polars.Series.str.head": [[1293, null]], "polars.Series.str.join": [[1294, null]], "polars.Series.str.json_decode": [[1295, null]], "polars.Series.str.json_path_match": [[1296, null]], "polars.Series.str.len_bytes": [[1297, null]], "polars.Series.str.len_chars": [[1298, null]], "polars.Series.str.normalize": [[1299, null]], "polars.Series.str.pad_end": [[1300, null]], "polars.Series.str.pad_start": [[1301, null]], "polars.Series.str.replace": [[1302, null]], "polars.Series.str.replace_all": [[1303, null]], "polars.Series.str.replace_many": [[1304, null]], "polars.Series.str.reverse": [[1305, null]], "polars.Series.str.slice": [[1306, null]], "polars.Series.str.split": [[1307, null]], "polars.Series.str.split_exact": [[1308, null]], "polars.Series.str.splitn": [[1309, null]], "polars.Series.str.starts_with": [[1310, null]], "polars.Series.str.strip_chars": [[1311, null]], "polars.Series.str.strip_chars_end": [[1312, null]], "polars.Series.str.strip_chars_start": [[1313, null]], "polars.Series.str.strip_prefix": [[1314, null]], "polars.Series.str.strip_suffix": [[1315, null]], "polars.Series.str.strptime": [[1316, null]], "polars.Series.str.tail": [[1317, null]], "polars.Series.str.to_date": [[1318, null]], "polars.Series.str.to_datetime": [[1319, null]], "polars.Series.str.to_decimal": [[1320, null]], "polars.Series.str.to_integer": [[1321, null]], "polars.Series.str.to_lowercase": [[1322, null]], "polars.Series.str.to_time": [[1323, null]], "polars.Series.str.to_titlecase": [[1324, null]], "polars.Series.str.to_uppercase": [[1325, null]], "polars.Series.str.zfill": [[1326, null]], "polars.Series.struct.field": [[1327, null]], "polars.Series.struct.fields": [[1328, null]], "polars.Series.struct.json_encode": [[1329, null]], "polars.Series.struct.rename_fields": [[1330, null]], "polars.Series.struct.schema": [[1331, null]], "polars.Series.struct.unnest": [[1332, null]], "polars.Series.sum": [[1333, null]], "polars.Series.tail": [[1334, null]], "polars.Series.tan": [[1335, null]], "polars.Series.tanh": [[1336, null]], "polars.Series.to_arrow": [[1337, null]], "polars.Series.to_dummies": [[1338, null]], "polars.Series.to_frame": [[1339, null]], "polars.Series.to_init_repr": [[1340, null]], "polars.Series.to_jax": [[1341, null]], "polars.Series.to_list": [[1342, null]], "polars.Series.to_numpy": [[1343, null]], "polars.Series.to_pandas": [[1344, null]], "polars.Series.to_physical": [[1345, null]], "polars.Series.to_torch": [[1346, null]], "polars.Series.top_k": [[1347, null]], "polars.Series.unique": [[1348, null]], "polars.Series.unique_counts": [[1349, null]], "polars.Series.upper_bound": [[1350, null]], "polars.Series.value_counts": [[1351, null]], "polars.Series.var": [[1352, null]], "polars.Series.zip_with": [[1353, null]], "polars.StringCache": [[56, null]], "polars.align_frames": [[57, null]], "polars.all": [[760, null]], "polars.all_horizontal": [[761, null]], "polars.any": [[762, null]], "polars.any_horizontal": [[763, null]], "polars.api.register_dataframe_namespace": [[58, null]], "polars.api.register_expr_namespace": [[59, null]], "polars.api.register_lazyframe_namespace": [[60, null]], "polars.api.register_series_namespace": [[61, null]], "polars.approx_n_unique": [[764, null]], "polars.arange": [[765, null]], "polars.arctan2": [[766, null]], "polars.arctan2d": [[767, null]], "polars.arg_sort_by": [[768, null]], "polars.arg_where": [[769, null]], "polars.build_info": [[62, null]], "polars.business_day_count": [[770, null]], "polars.catalog.unity.CatalogInfo": [[196, null]], "polars.catalog.unity.ColumnInfo": [[197, null]], "polars.catalog.unity.DataSourceFormat": [[198, null]], "polars.catalog.unity.NamespaceInfo": [[199, null]], "polars.catalog.unity.TableInfo": [[200, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[201, null]], "polars.catalog.unity.TableType": [[202, null]], "polars.coalesce": [[771, null]], "polars.col": [[841, null]], "polars.collect_all": [[63, null]], "polars.collect_all_async": [[64, null]], "polars.concat": [[65, null]], "polars.concat_arr": [[772, null]], "polars.concat_list": [[773, null]], "polars.concat_str": [[774, null]], "polars.corr": [[775, null]], "polars.count": [[776, null]], "polars.cov": [[777, null]], "polars.cum_count": [[778, null]], "polars.cum_fold": [[779, null]], "polars.cum_reduce": [[780, null]], "polars.cum_sum": [[781, null]], "polars.cum_sum_horizontal": [[782, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[330, null]], "polars.dataframe.group_by.GroupBy.agg": [[331, null]], "polars.dataframe.group_by.GroupBy.all": [[332, null]], "polars.dataframe.group_by.GroupBy.count": [[333, null]], "polars.dataframe.group_by.GroupBy.first": [[334, null]], "polars.dataframe.group_by.GroupBy.head": [[335, null]], "polars.dataframe.group_by.GroupBy.last": [[336, null]], "polars.dataframe.group_by.GroupBy.len": [[337, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[338, null]], "polars.dataframe.group_by.GroupBy.max": [[339, null]], "polars.dataframe.group_by.GroupBy.mean": [[340, null]], "polars.dataframe.group_by.GroupBy.median": [[341, null]], "polars.dataframe.group_by.GroupBy.min": [[342, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[343, null]], "polars.dataframe.group_by.GroupBy.quantile": [[344, null]], "polars.dataframe.group_by.GroupBy.sum": [[345, null]], "polars.dataframe.group_by.GroupBy.tail": [[346, null]], "polars.datatypes.Array": [[66, null]], "polars.datatypes.Binary": [[67, null]], "polars.datatypes.Boolean": [[68, null]], "polars.datatypes.Categorical": [[69, null]], "polars.datatypes.DataType": [[70, null]], "polars.datatypes.Date": [[71, null]], "polars.datatypes.Datetime": [[72, null]], "polars.datatypes.Decimal": [[73, null]], "polars.datatypes.Duration": [[74, null]], "polars.datatypes.Enum": [[75, null]], "polars.datatypes.Field": [[76, null]], "polars.datatypes.Float32": [[77, null]], "polars.datatypes.Float64": [[78, null]], "polars.datatypes.Int128": [[79, null]], "polars.datatypes.Int16": [[80, null]], "polars.datatypes.Int32": [[81, null]], "polars.datatypes.Int64": [[82, null]], "polars.datatypes.Int8": [[83, null]], "polars.datatypes.List": [[84, null]], "polars.datatypes.Null": [[85, null]], "polars.datatypes.Object": [[86, null]], "polars.datatypes.String": [[87, null]], "polars.datatypes.Struct": [[88, null]], "polars.datatypes.Time": [[89, null]], "polars.datatypes.UInt16": [[90, null]], "polars.datatypes.UInt32": [[91, null]], "polars.datatypes.UInt64": [[92, null]], "polars.datatypes.UInt8": [[93, null]], "polars.datatypes.Unknown": [[94, null]], "polars.datatypes.Utf8": [[95, null]], "polars.date": [[783, null]], "polars.date_range": [[784, null]], "polars.date_ranges": [[785, null]], "polars.datetime": [[786, null]], "polars.datetime_range": [[787, null]], "polars.datetime_ranges": [[788, null]], "polars.defer": [[96, null]], "polars.disable_string_cache": [[97, null]], "polars.duration": [[789, null]], "polars.element": [[790, null]], "polars.enable_string_cache": [[98, null]], "polars.escape_regex": [[99, null]], "polars.exceptions.CategoricalRemappingWarning": [[100, null]], "polars.exceptions.ChronoFormatWarning": [[101, null]], "polars.exceptions.ColumnNotFoundError": [[102, null]], "polars.exceptions.ComputeError": [[103, null]], "polars.exceptions.CustomUFuncWarning": [[104, null]], "polars.exceptions.DataOrientationWarning": [[105, null]], "polars.exceptions.DuplicateError": [[106, null]], "polars.exceptions.InvalidOperationError": [[107, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[108, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[109, null]], "polars.exceptions.NoDataError": [[110, null]], "polars.exceptions.NoRowsReturnedError": [[111, null]], "polars.exceptions.OutOfBoundsError": [[112, null]], "polars.exceptions.PanicException": [[113, null]], "polars.exceptions.ParameterCollisionError": [[114, null]], "polars.exceptions.PerformanceWarning": [[115, null]], "polars.exceptions.PolarsError": [[116, null]], "polars.exceptions.PolarsInefficientMapWarning": [[117, null]], "polars.exceptions.PolarsWarning": [[118, null]], "polars.exceptions.RowsError": [[119, null]], "polars.exceptions.SQLInterfaceError": [[120, null]], "polars.exceptions.SQLSyntaxError": [[121, null]], "polars.exceptions.SchemaError": [[122, null]], "polars.exceptions.SchemaFieldNotFoundError": [[123, null]], "polars.exceptions.ShapeError": [[124, null]], "polars.exceptions.StringCacheMismatchError": [[125, null]], "polars.exceptions.StructFieldNotFoundError": [[126, null]], "polars.exceptions.TooManyRowsReturnedError": [[127, null]], "polars.exceptions.UnstableWarning": [[128, null]], "polars.exceptions.UnsuitableSQLError": [[129, null]], "polars.exclude": [[791, null]], "polars.explain_all": [[130, null]], "polars.first": [[792, null]], "polars.fold": [[793, null]], "polars.format": [[794, null]], "polars.from_arrow": [[131, null]], "polars.from_dataframe": [[132, null]], "polars.from_dict": [[133, null]], "polars.from_dicts": [[134, null]], "polars.from_epoch": [[795, null]], "polars.from_numpy": [[135, null]], "polars.from_pandas": [[136, null]], "polars.from_records": [[137, null]], "polars.from_repr": [[138, null]], "polars.get_index_type": [[139, null]], "polars.groups": [[796, null]], "polars.head": [[797, null]], "polars.implode": [[798, null]], "polars.int_range": [[799, null]], "polars.int_ranges": [[800, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[140, null]], "polars.io.parquet.ParquetFieldOverwrites": [[141, null]], "polars.io.partition.BasePartitionContext": [[142, null]], "polars.io.partition.KeyedPartition": [[143, null]], "polars.io.partition.KeyedPartitionContext": [[144, null]], "polars.io.plugins.register_io_source": [[145, null]], "polars.json_normalize": [[146, null]], "polars.last": [[801, null]], "polars.lazyframe.engine_config.GPUEngine": [[937, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[938, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[939, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[940, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[941, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[942, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[943, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[944, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[945, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[946, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[947, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[948, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[949, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[950, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[951, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[952, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[953, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[954, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[955, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[956, null]], "polars.len": [[802, null]], "polars.linear_space": [[803, null]], "polars.linear_spaces": [[804, null]], "polars.lit": [[805, null]], "polars.map_batches": [[806, null]], "polars.map_groups": [[807, null]], "polars.max": [[808, null]], "polars.max_horizontal": [[809, null]], "polars.mean": [[810, null]], "polars.mean_horizontal": [[811, null]], "polars.median": [[812, null]], "polars.min": [[813, null]], "polars.min_horizontal": [[814, null]], "polars.n_unique": [[815, null]], "polars.nth": [[816, null]], "polars.ones": [[817, null]], "polars.plugins.register_plugin_function": [[147, null]], "polars.quantile": [[818, null]], "polars.read_avro": [[148, null]], "polars.read_clipboard": [[149, null]], "polars.read_csv": [[150, null]], "polars.read_csv_batched": [[151, null]], "polars.read_database": [[152, null]], "polars.read_database_uri": [[153, null]], "polars.read_delta": [[154, null]], "polars.read_excel": [[155, null]], "polars.read_ipc": [[156, null]], "polars.read_ipc_schema": [[157, null]], "polars.read_ipc_stream": [[158, null]], "polars.read_json": [[159, null]], "polars.read_ndjson": [[160, null]], "polars.read_ods": [[161, null]], "polars.read_parquet": [[162, null]], "polars.read_parquet_metadata": [[163, null]], "polars.read_parquet_schema": [[164, null]], "polars.reduce": [[819, null]], "polars.repeat": [[820, null]], "polars.rolling_corr": [[821, null]], "polars.rolling_cov": [[822, null]], "polars.scan_csv": [[165, null]], "polars.scan_delta": [[166, null]], "polars.scan_iceberg": [[167, null]], "polars.scan_ipc": [[168, null]], "polars.scan_ndjson": [[169, null]], "polars.scan_parquet": [[170, null]], "polars.scan_pyarrow_dataset": [[171, null]], "polars.select": [[823, null]], "polars.set_random_seed": [[172, null]], "polars.show_versions": [[173, null]], "polars.sql": [[824, null]], "polars.sql_expr": [[825, null]], "polars.std": [[826, null]], "polars.struct": [[827, null]], "polars.sum": [[828, null]], "polars.sum_horizontal": [[829, null]], "polars.tail": [[830, null]], "polars.testing.assert_frame_equal": [[174, null]], "polars.testing.assert_frame_not_equal": [[175, null]], "polars.testing.assert_series_equal": [[176, null]], "polars.testing.assert_series_not_equal": [[177, null]], "polars.testing.parametric.column": [[178, null]], "polars.testing.parametric.columns": [[179, null]], "polars.testing.parametric.create_list_strategy": [[180, null]], "polars.testing.parametric.dataframes": [[181, null]], "polars.testing.parametric.dtypes": [[182, null]], "polars.testing.parametric.lists": [[183, null]], "polars.testing.parametric.load_profile": [[184, null]], "polars.testing.parametric.series": [[185, null]], "polars.testing.parametric.set_profile": [[186, null]], "polars.thread_pool_size": [[187, null]], "polars.threadpool_size": [[188, null]], "polars.time": [[831, null]], "polars.time_range": [[832, null]], "polars.time_ranges": [[833, null]], "polars.using_string_cache": [[189, null]], "polars.var": [[834, null]], "polars.when": [[835, null]], "polars.zeros": [[836, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_engine_affinity", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.PartitionByKey", "reference/api/polars.PartitionMaxSize", "reference/api/polars.PartitionParted", "reference/api/polars.ScanCastOptions", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.defer", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.explain_all", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.parquet.ParquetFieldOverwrites", "reference/api/polars.io.partition.BasePartitionContext", "reference/api/polars.io.partition.KeyedPartition", "reference/api/polars.io.partition.KeyedPartitionContext", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_metadata", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_business_day", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_kurtosis", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.QueryOptFlags", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.backward_fill", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_business_day", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.forward_fill", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.repeat_by", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_kurtosis", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_engine_affinity.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.PartitionByKey.rst", "reference/api/polars.PartitionMaxSize.rst", "reference/api/polars.PartitionParted.rst", "reference/api/polars.ScanCastOptions.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.defer.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.explain_all.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.parquet.ParquetFieldOverwrites.rst", "reference/api/polars.io.partition.BasePartitionContext.rst", "reference/api/polars.io.partition.KeyedPartition.rst", "reference/api/polars.io.partition.KeyedPartitionContext.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_metadata.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_business_day.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_kurtosis.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.QueryOptFlags.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.backward_fill.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_business_day.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.forward_fill.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.repeat_by.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_kurtosis.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[207, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[970, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[208, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[971, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[209, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1390, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1390, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[210, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[972, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[190, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[196, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[197, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[199, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[200, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[32, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[33, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[34, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[35, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[66, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[67, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[68, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[69, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[70, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[71, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[72, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[73, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[74, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[75, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[76, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[77, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[78, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[79, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[80, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[81, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[82, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[83, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[84, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[85, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[86, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[87, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[88, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[89, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[90, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[91, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[92, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[93, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[94, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.io.parquet.parquetfieldoverwrites method)": [[141, "polars.io.parquet.ParquetFieldOverwrites.__init__", false]], "__init__() (polars.io.partition.basepartitioncontext method)": [[142, "polars.io.partition.BasePartitionContext.__init__", false]], "__init__() (polars.io.partition.keyedpartition method)": [[143, "polars.io.partition.KeyedPartition.__init__", false]], "__init__() (polars.io.partition.keyedpartitioncontext method)": [[144, "polars.io.partition.KeyedPartitionContext.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[937, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.partitionbykey method)": [[52, "polars.PartitionByKey.__init__", false]], "__init__() (polars.partitionmaxsize method)": [[53, "polars.PartitionMaxSize.__init__", false]], "__init__() (polars.partitionparted method)": [[54, "polars.PartitionParted.__init__", false]], "__init__() (polars.queryoptflags method)": [[936, "polars.QueryOptFlags.__init__", false]], "__init__() (polars.scancastoptions method)": [[55, "polars.ScanCastOptions.__init__", false]], "__init__() (polars.sqlcontext method)": [[1390, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[178, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[330, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[360, "polars.Expr.abs", false]], "abs() (polars.series method)": [[973, "polars.Series.abs", false]], "add() (polars.expr method)": [[361, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[449, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1063, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[331, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[938, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[362, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[363, "polars.Expr.alias", false]], "alias() (polars.series method)": [[974, "polars.Series.alias", false]], "align_frames() (in module polars)": [[57, "polars.align_frames", false]], "all() (in module polars)": [[760, "polars.all", false]], "all() (in module polars.selectors)": [[968, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[332, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[364, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[380, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[546, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[939, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[975, "polars.Series.all", false]], "all() (polars.series.arr method)": [[990, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1168, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[761, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[968, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[968, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[365, "polars.Expr.and_", false]], "any() (in module polars)": [[762, "polars.any", false]], "any() (polars.expr method)": [[366, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[381, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[547, "polars.Expr.list.any", false]], "any() (polars.series method)": [[976, "polars.Series.any", false]], "any() (polars.series.arr method)": [[991, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1169, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[763, "polars.any_horizontal", false]], "append() (polars.expr method)": [[367, "polars.Expr.append", false]], "append() (polars.series method)": [[977, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[764, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[211, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[368, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[860, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[978, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[765, "polars.arange", false]], "arccos() (polars.expr method)": [[369, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[979, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[370, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[980, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[371, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[981, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[372, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[982, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[373, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[983, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[766, "polars.arctan2", false]], "arctan2d() (in module polars)": [[767, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[374, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[984, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[375, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[382, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[548, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[985, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[992, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1170, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[376, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[383, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[549, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[986, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[993, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1171, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[377, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[987, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[768, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[378, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[988, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[379, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[989, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[769, "polars.arg_where", false]], "array (class in polars.datatypes)": [[66, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[174, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[175, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[176, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[177, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[404, "polars.Expr.backward_fill", false]], "backward_fill() (polars.series method)": [[1014, "polars.Series.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[450, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1064, "polars.Series.dt.base_utc_offset", false]], "basepartitioncontext (class in polars.io.partition)": [[142, "polars.io.partition.BasePartitionContext", false]], "binary (class in polars.datatypes)": [[67, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[968, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[412, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1022, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[413, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1023, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[414, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1024, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[415, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1025, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[416, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1026, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[417, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1027, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[418, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1028, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[419, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1029, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[420, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1030, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[68, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[968, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[212, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[421, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[861, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1031, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[422, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[62, "polars.build_info", false]], "business_day_count() (in module polars)": [[770, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[968, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[968, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[968, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[862, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[954, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[213, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[423, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[863, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1032, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[451, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1065, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[190, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[196, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[69, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[968, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[100, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[429, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1041, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[430, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1042, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[452, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1066, "polars.Series.dt.century", false]], "chronoformatwarning": [[101, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1043, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[214, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[864, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1044, "polars.Series.clear", false]], "clip() (polars.expr method)": [[431, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1045, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[215, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[865, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1046, "polars.Series.clone", false]], "coalesce() (in module polars)": [[771, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[866, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[63, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[64, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[867, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[216, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[868, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[178, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[197, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[102, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[217, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[869, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[179, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[453, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1067, "polars.Series.dt.combine", false]], "computeerror": [[103, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[65, "polars.concat", false]], "concat() (polars.expr.list method)": [[550, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[690, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1172, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1278, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[772, "polars.concat_arr", false]], "concat_list() (in module polars)": [[773, "polars.concat_list", false]], "concat_str() (in module polars)": [[774, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[968, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[384, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[405, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[551, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[691, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[994, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[1015, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1173, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1279, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[692, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1280, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[454, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1068, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[775, "polars.corr", false]], "corr() (polars.dataframe method)": [[218, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[432, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1047, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[433, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1048, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[434, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1049, "polars.Series.cot", false]], "count() (in module polars)": [[776, "polars.count", false]], "count() (polars.dataframe method)": [[219, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[333, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[435, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[870, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[940, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1050, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[385, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[552, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[693, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[995, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1174, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1281, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[777, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[180, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[32, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[33, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[34, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[35, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[778, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[436, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1051, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[779, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[437, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1052, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[438, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1053, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[439, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1054, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[780, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[781, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[440, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1055, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[782, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[441, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1056, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[104, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[442, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1057, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[181, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[105, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[198, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[70, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[71, "polars.datatypes.Date", false]], "date() (in module polars)": [[783, "polars.date", false]], "date() (in module polars.selectors)": [[968, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[455, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1069, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[784, "polars.date_range", false]], "date_ranges() (in module polars)": [[785, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[72, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[786, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[968, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[456, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1070, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[787, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[788, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[457, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1071, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[73, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[968, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[406, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[694, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1016, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1282, "polars.Series.str.decode", false]], "defer() (in module polars)": [[96, "polars.defer", false]], "degrees() (polars.expr method)": [[443, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[220, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[871, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1058, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[221, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[444, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[872, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[445, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[553, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1059, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1175, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[968, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[97, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[446, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1060, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[222, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[873, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[223, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[224, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[447, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[874, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1061, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[225, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[448, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[554, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[875, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1062, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1176, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[458, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1072, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1113, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[226, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[876, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[182, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[106, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[74, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[789, "polars.duration", false]], "duration() (in module polars.selectors)": [[968, "polars.selectors.duration", false]], "element() (in module polars)": [[790, "polars.element", false]], "enable_string_cache() (in module polars)": [[98, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[407, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[695, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1017, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1283, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[968, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[408, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[424, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[696, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1018, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1033, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1284, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[495, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1114, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[75, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[459, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1073, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[496, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[596, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1115, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[497, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1116, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[227, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1117, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[99, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[697, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1285, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[228, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1118, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[555, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1177, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[498, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1119, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[499, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1120, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[500, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1121, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[501, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1122, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[791, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[968, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[502, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1371, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1372, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[503, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1123, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[968, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[877, "polars.LazyFrame.explain", false]], "explain_all() (in module polars)": [[130, "polars.explain_all", false]], "explode() (polars.dataframe method)": [[229, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[504, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[386, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[556, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[698, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[878, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1124, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[996, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1178, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1286, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[230, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1125, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[505, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1126, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[699, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1287, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[700, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1288, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[701, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1289, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[702, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1290, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[955, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[956, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[76, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[739, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1327, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1328, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[231, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[506, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[879, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1127, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[232, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[507, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[880, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1128, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[233, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[508, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[881, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1129, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[703, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1291, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[704, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1292, "polars.Series.str.find_many", false]], "first() (in module polars)": [[792, "polars.first", false]], "first() (in module polars.selectors)": [[968, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[334, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[509, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[387, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[557, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[882, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[941, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1130, "polars.Series.first", false]], "first() (polars.series.arr method)": [[997, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1179, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[234, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1131, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[510, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[968, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[77, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[78, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[511, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1132, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[512, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[793, "polars.fold", false]], "fold() (polars.dataframe method)": [[235, "polars.DataFrame.fold", false]], "format() (in module polars)": [[794, "polars.format", false]], "forward_fill() (polars.expr method)": [[513, "polars.Expr.forward_fill", false]], "forward_fill() (polars.series method)": [[1133, "polars.Series.forward_fill", false]], "from_arrow() (in module polars)": [[131, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[132, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[133, "polars.from_dict", false]], "from_dicts() (in module polars)": [[134, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[795, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[514, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[135, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[136, "polars.from_pandas", false]], "from_records() (in module polars)": [[137, "polars.from_records", false]], "from_repr() (in module polars)": [[138, "polars.from_repr", false]], "gather() (polars.expr method)": [[515, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[558, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1134, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1180, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[236, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[516, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[559, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[883, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1135, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1181, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[517, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1136, "polars.Series.ge", false]], "get() (polars.expr method)": [[518, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[388, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[560, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[998, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1182, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[425, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1034, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1137, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[237, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[238, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[239, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[139, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[201, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[191, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[240, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[937, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[241, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[884, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[242, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[885, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[796, "polars.groups", false]], "gt() (polars.expr method)": [[519, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1138, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[597, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[520, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1139, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1140, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[521, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1141, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[243, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[797, "polars.head", false]], "head() (polars.dataframe method)": [[244, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[335, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[522, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[561, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[705, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[886, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[942, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1142, "polars.Series.head", false]], "head() (polars.series.list method)": [[1183, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1293, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[245, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[523, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1143, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[460, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1074, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[246, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[798, "polars.implode", false]], "implode() (polars.expr method)": [[524, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1144, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[525, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1145, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[247, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[526, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[887, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[79, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[80, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[81, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[82, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[83, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[799, "polars.int_range", false]], "int_ranges() (in module polars)": [[800, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[968, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[248, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[527, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[888, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1146, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[528, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1147, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[107, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[529, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1148, "polars.Series.is_between", false]], "is_business_day() (polars.expr.dt method)": [[461, "polars.Expr.dt.is_business_day", false]], "is_business_day() (polars.series.dt method)": [[1075, "polars.Series.dt.is_business_day", false]], "is_column() (polars.expr.meta method)": [[598, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[599, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[249, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[530, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1149, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[250, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1150, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[531, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1151, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[532, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1152, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[533, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1153, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[534, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1154, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[535, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1155, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[462, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1076, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[600, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1035, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[536, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1156, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[537, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1157, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[538, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1158, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[539, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1159, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[601, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[968, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1160, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[251, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[540, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1161, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[463, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1077, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[252, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1162, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[253, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[254, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[255, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[256, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[389, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[562, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[706, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[889, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[999, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1184, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1294, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[257, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[890, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[258, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[891, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[707, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1295, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[740, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1329, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[146, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[708, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1296, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[616, "polars.Expr.name.keep", false]], "keyedpartition (class in polars.io.partition)": [[143, "polars.io.partition.KeyedPartition", false]], "keyedpartitioncontext (class in polars.io.partition)": [[144, "polars.io.partition.KeyedPartitionContext", false]], "kurtosis() (polars.expr method)": [[541, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1163, "polars.Series.kurtosis", false]], "last() (in module polars)": [[801, "polars.last", false]], "last() (in module polars.selectors)": [[968, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[336, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[542, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[390, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[563, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[892, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[943, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1164, "polars.Series.last", false]], "last() (polars.series.arr method)": [[1000, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1185, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[259, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[893, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[543, "polars.Expr.le", false]], "le() (polars.series method)": [[1165, "polars.Series.le", false]], "len() (in module polars)": [[802, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[337, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[544, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[564, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[944, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1166, "polars.Series.len", false]], "len() (polars.series.list method)": [[1186, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[426, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[709, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1036, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1297, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[427, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[710, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1037, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1298, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[260, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[545, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[894, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1167, "polars.Series.limit", false]], "linear_space() (in module polars)": [[803, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[804, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[84, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[192, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[193, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[194, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[183, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[805, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[184, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[586, "polars.Expr.log", false]], "log() (polars.series method)": [[1208, "polars.Series.log", false]], "log10() (polars.expr method)": [[587, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1209, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[588, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1210, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[589, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1211, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[590, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1212, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[617, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[806, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[591, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[895, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[592, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1213, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[618, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[807, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[338, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[945, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[261, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[108, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[968, "polars.selectors.matches", false]], "max() (in module polars)": [[808, "polars.max", false]], "max() (polars.dataframe method)": [[262, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[339, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[593, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[391, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[565, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[896, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[946, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1214, "polars.Series.max", false]], "max() (polars.series.arr method)": [[1001, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1078, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1187, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[809, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[263, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[810, "polars.mean", false]], "mean() (polars.dataframe method)": [[264, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[340, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[594, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[566, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[897, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[947, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1215, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1079, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1188, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[811, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[265, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[812, "polars.median", false]], "median() (polars.dataframe method)": [[266, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[341, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[595, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[392, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[567, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[898, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[948, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1216, "polars.Series.median", false]], "median() (polars.series.arr method)": [[1002, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1080, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1189, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[267, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[899, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[268, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[900, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[464, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1081, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[465, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1082, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[466, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1083, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[813, "polars.min", false]], "min() (polars.dataframe method)": [[269, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[342, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[611, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[393, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[568, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[901, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[949, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1217, "polars.Series.min", false]], "min() (polars.series.arr method)": [[1003, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1084, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1190, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[814, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[270, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[467, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1085, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[612, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[613, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1218, "polars.Series.mode", false]], "module": [[968, "module-polars.selectors", false]], "moduleupgraderequirederror": [[109, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[468, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1086, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[469, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1087, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[470, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1088, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[614, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[271, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1219, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[815, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[272, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[343, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[615, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[394, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[569, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[950, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1220, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[1004, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1191, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1221, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[199, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[625, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1222, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[626, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1223, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[471, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1089, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[627, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[602, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1224, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[628, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1225, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[629, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1226, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[140, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[110, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[711, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1299, "polars.Series.str.normalize", false]], "norowsreturnederror": [[111, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[630, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1227, "polars.Series.not_", false]], "nth() (in module polars)": [[816, "polars.nth", false]], "null (class in polars.datatypes)": [[85, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[273, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[631, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[902, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1228, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[968, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[86, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[472, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1090, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[817, "polars.ones", false]], "or_() (polars.expr method)": [[632, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[473, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1091, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[112, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[603, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[633, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[712, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1300, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[713, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1301, "polars.Series.str.pad_start", false]], "panicexception": [[113, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[114, "polars.exceptions.ParameterCollisionError", false]], "parquetfieldoverwrites (class in polars.io.parquet)": [[141, "polars.io.parquet.ParquetFieldOverwrites", false]], "partition_by() (polars.dataframe method)": [[274, "polars.DataFrame.partition_by", false]], "partitionbykey (class in polars)": [[52, "polars.PartitionByKey", false]], "partitionmaxsize (class in polars)": [[53, "polars.PartitionMaxSize", false]], "partitionparted (class in polars)": [[54, "polars.PartitionParted", false]], "pct_change() (polars.expr method)": [[634, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1229, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[635, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1230, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[636, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1231, "polars.Series.peak_min", false]], "performancewarning": [[115, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[275, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[637, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[903, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[276, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[355, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1367, "polars.Series.plot", false]], "polars.selectors": [[968, "module-polars.selectors", false]], "polarserror": [[116, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[117, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[118, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[604, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[638, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1232, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[619, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[620, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[277, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[639, "polars.Expr.product", false]], "product() (polars.series method)": [[1233, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[904, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[640, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1234, "polars.Series.qcut", false]], "quantile() (in module polars)": [[818, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[278, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[344, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[641, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[905, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[951, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1235, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[474, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1092, "polars.Series.dt.quarter", false]], "queryoptflags (class in polars)": [[936, "polars.QueryOptFlags", false]], "radians() (polars.expr method)": [[642, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[643, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1236, "polars.Series.rank", false]], "read_avro() (in module polars)": [[148, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[149, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[150, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[151, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[152, "polars.read_database", false]], "read_database_uri() (in module polars)": [[153, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[154, "polars.read_delta", false]], "read_excel() (in module polars)": [[155, "polars.read_excel", false]], "read_ipc() (in module polars)": [[156, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[157, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[158, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[159, "polars.read_json", false]], "read_ndjson() (in module polars)": [[160, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[161, "polars.read_ods", false]], "read_parquet() (in module polars)": [[162, "polars.read_parquet", false]], "read_parquet_metadata() (in module polars)": [[163, "polars.read_parquet_metadata", false]], "read_parquet_schema() (in module polars)": [[164, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[279, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[644, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1237, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[819, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1373, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[58, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[59, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1374, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[145, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[60, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1375, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[147, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[61, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[645, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[409, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1238, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1019, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[906, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[280, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[907, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[281, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[908, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1239, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[741, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1330, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[820, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[646, "polars.Expr.repeat_by", false]], "repeat_by() (polars.series method)": [[1240, "polars.Series.repeat_by", false]], "replace() (polars.expr method)": [[647, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[475, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[714, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1241, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1093, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1302, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[715, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1303, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[282, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[716, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1304, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[648, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1242, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[476, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1094, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[649, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1243, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[283, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[650, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[395, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[570, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[717, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[909, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1244, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[1005, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1192, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1305, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[651, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1245, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[652, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1246, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[284, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[653, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[910, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[821, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[822, "polars.rolling_cov", false]], "rolling_kurtosis() (polars.expr method)": [[654, "polars.Expr.rolling_kurtosis", false]], "rolling_kurtosis() (polars.series method)": [[1247, "polars.Series.rolling_kurtosis", false]], "rolling_map() (polars.expr method)": [[655, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1248, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[656, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1249, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[657, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[658, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1250, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[659, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[660, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1251, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[661, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[662, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1252, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[663, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[664, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1253, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[665, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[666, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1254, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[667, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1255, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[668, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[669, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1256, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[670, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[671, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1257, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[672, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[605, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[673, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[477, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1258, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1095, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[674, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1259, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[285, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[286, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[287, "polars.DataFrame.rows_by_key", false]], "rowserror": [[119, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[288, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[675, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[571, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1260, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1193, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[165, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[166, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[167, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[168, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[169, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[170, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[171, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[195, "polars.Catalog.scan_table", false]], "scancastoptions (class in polars)": [[55, "polars.ScanCastOptions", false]], "scatter() (polars.series method)": [[1261, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[289, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[911, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1331, "polars.Series.struct.schema", false]], "schemaerror": [[122, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[123, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[676, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1262, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[478, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1096, "polars.Series.dt.second", false]], "select() (in module polars)": [[823, "polars.select", false]], "select() (polars.dataframe method)": [[290, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[912, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[291, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[913, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[292, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[606, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[914, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[185, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1263, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[572, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1194, "polars.Series.list.set_difference", false]], "set_engine_affinity() (polars.config class method)": [[10, "polars.Config.set_engine_affinity", false]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[573, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1195, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[186, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[172, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[293, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[677, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[915, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1264, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[574, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1196, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[575, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1197, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[294, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1265, "polars.Series.shape", false]], "shapeerror": [[124, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[295, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[678, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[396, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[576, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[916, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1266, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[1006, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1198, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[607, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[917, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[173, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[679, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1267, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[296, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1268, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[680, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1269, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[681, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1270, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[968, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[682, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1271, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[683, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1272, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[410, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1020, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[684, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1273, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[297, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[685, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[577, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[718, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[918, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1274, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1199, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1306, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[298, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[686, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[397, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[578, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[919, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1275, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[1007, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1200, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[687, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[719, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1307, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[720, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1308, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[721, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1309, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[824, "polars.sql", false]], "sql() (polars.dataframe method)": [[299, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[920, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[825, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1390, "polars.SQLContext", false]], "sqlinterfaceerror": [[120, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[121, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[688, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1276, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[968, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[411, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[428, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[722, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1021, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1038, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1310, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[31, "polars.Config.state", false]], "std() (in module polars)": [[826, "polars.std", false]], "std() (polars.dataframe method)": [[300, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[689, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[398, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[579, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[921, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1277, "polars.Series.std", false]], "std() (polars.series.arr method)": [[1008, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1201, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[479, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1097, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[87, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[968, "polars.selectors.string", false]], "stringcache (class in polars)": [[56, "polars.StringCache", false]], "stringcachemismatcherror": [[125, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[723, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1311, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[724, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1312, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[725, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1313, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[726, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1314, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[727, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1315, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[728, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1316, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[88, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[827, "polars.struct", false]], "structfieldnotfounderror": [[126, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[356, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[744, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[621, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[622, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[828, "polars.sum", false]], "sum() (polars.dataframe method)": [[301, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[345, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[745, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[399, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[580, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[922, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[952, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1333, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[1009, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1202, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[829, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[302, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[200, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1376, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[202, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[830, "polars.tail", false]], "tail() (polars.dataframe method)": [[303, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[346, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[746, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[581, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[729, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[923, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[953, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1334, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1203, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1317, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[747, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1335, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[748, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1336, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[968, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[187, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[188, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[89, "polars.datatypes.Time", false]], "time() (in module polars)": [[831, "polars.time", false]], "time() (in module polars.selectors)": [[968, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[480, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1098, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[832, "polars.time_range", false]], "time_ranges() (in module polars)": [[833, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[481, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1099, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[582, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1204, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[304, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1337, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[730, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1318, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[731, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1319, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[732, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1320, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[305, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[306, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[307, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1338, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1339, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[308, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1340, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[733, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1321, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[309, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1341, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[400, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1342, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[1010, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1039, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[623, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[734, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1322, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[310, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1343, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[311, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1344, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[749, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1345, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[312, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[482, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1100, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[313, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[401, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[583, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[1011, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1205, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[735, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1323, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[736, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1324, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[314, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1346, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[624, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[737, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1325, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[127, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[315, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[750, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[924, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1347, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[751, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[483, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1101, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[484, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1102, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[485, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1103, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[486, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1104, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[487, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1105, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[488, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1106, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[489, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1107, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[316, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[608, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[752, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[490, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1108, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[90, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[91, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[92, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[93, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[609, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[317, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[753, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[402, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[584, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[925, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1348, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[1012, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1206, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[754, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1349, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[94, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[318, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[742, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[926, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1332, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[319, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[927, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1377, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[968, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[128, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[320, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[129, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[321, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[928, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[755, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1350, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[322, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1040, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[189, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[95, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[756, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1351, "polars.Series.value_counts", false]], "var() (in module polars)": [[834, "polars.var", false]], "var() (polars.dataframe method)": [[323, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[757, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[403, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[585, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[929, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1352, "polars.Series.var", false]], "var() (polars.series.arr method)": [[1013, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1207, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[324, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[491, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1109, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[492, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1110, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[835, "polars.when", false]], "where() (polars.expr method)": [[758, "polars.Expr.where", false]], "width (polars.dataframe property)": [[325, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[930, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[326, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[931, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[327, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[932, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[933, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[743, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[328, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[934, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[329, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[935, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[493, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1111, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[37, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[38, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[39, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[40, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[41, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[42, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[43, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[44, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[45, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[610, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[46, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[47, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[759, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[494, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1112, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[836, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[738, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1326, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1353, "polars.Series.zip_with", false]]}, "objects": {"polars": [[190, 0, 1, "", "Catalog"], [32, 0, 1, "", "CredentialProvider"], [33, 0, 1, "", "CredentialProviderAWS"], [34, 0, 1, "", "CredentialProviderAzure"], [35, 0, 1, "", "CredentialProviderGCP"], [52, 0, 1, "", "PartitionByKey"], [53, 0, 1, "", "PartitionMaxSize"], [54, 0, 1, "", "PartitionParted"], [936, 0, 1, "", "QueryOptFlags"], [1390, 0, 1, "", "SQLContext"], [55, 0, 1, "", "ScanCastOptions"], [56, 0, 1, "", "StringCache"], [57, 4, 1, "", "align_frames"], [760, 4, 1, "", "all"], [761, 4, 1, "", "all_horizontal"], [762, 4, 1, "", "any"], [763, 4, 1, "", "any_horizontal"], [764, 4, 1, "", "approx_n_unique"], [765, 4, 1, "", "arange"], [766, 4, 1, "", "arctan2"], [767, 4, 1, "", "arctan2d"], [768, 4, 1, "", "arg_sort_by"], [769, 4, 1, "", "arg_where"], [62, 4, 1, "", "build_info"], [770, 4, 1, "", "business_day_count"], [771, 4, 1, "", "coalesce"], [63, 4, 1, "", "collect_all"], [64, 4, 1, "", "collect_all_async"], [65, 4, 1, "", "concat"], [772, 4, 1, "", "concat_arr"], [773, 4, 1, "", "concat_list"], [774, 4, 1, "", "concat_str"], [775, 4, 1, "", "corr"], [776, 4, 1, "", "count"], [777, 4, 1, "", "cov"], [778, 4, 1, "", "cum_count"], [779, 4, 1, "", "cum_fold"], [780, 4, 1, "", "cum_reduce"], [781, 4, 1, "", "cum_sum"], [782, 4, 1, "", "cum_sum_horizontal"], [783, 4, 1, "", "date"], [784, 4, 1, "", "date_range"], [785, 4, 1, "", "date_ranges"], [786, 4, 1, "", "datetime"], [787, 4, 1, "", "datetime_range"], [788, 4, 1, "", "datetime_ranges"], [96, 4, 1, "", "defer"], [97, 4, 1, "", "disable_string_cache"], [789, 4, 1, "", "duration"], [790, 4, 1, "", "element"], [98, 4, 1, "", "enable_string_cache"], [99, 4, 1, "", "escape_regex"], [791, 4, 1, "", "exclude"], [130, 4, 1, "", "explain_all"], [792, 4, 1, "", "first"], [793, 4, 1, "", "fold"], [794, 4, 1, "", "format"], [131, 4, 1, "", "from_arrow"], [132, 4, 1, "", "from_dataframe"], [133, 4, 1, "", "from_dict"], [134, 4, 1, "", "from_dicts"], [795, 4, 1, "", "from_epoch"], [135, 4, 1, "", "from_numpy"], [136, 4, 1, "", "from_pandas"], [137, 4, 1, "", "from_records"], [138, 4, 1, "", "from_repr"], [139, 4, 1, "", "get_index_type"], [796, 4, 1, "", "groups"], [797, 4, 1, "", "head"], [798, 4, 1, "", "implode"], [799, 4, 1, "", "int_range"], [800, 4, 1, "", "int_ranges"], [146, 4, 1, "", "json_normalize"], [801, 4, 1, "", "last"], [802, 4, 1, "", "len"], [803, 4, 1, "", "linear_space"], [804, 4, 1, "", "linear_spaces"], [805, 4, 1, "", "lit"], [806, 4, 1, "", "map_batches"], [807, 4, 1, "", "map_groups"], [808, 4, 1, "", "max"], [809, 4, 1, "", "max_horizontal"], [810, 4, 1, "", "mean"], [811, 4, 1, "", "mean_horizontal"], [812, 4, 1, "", "median"], [813, 4, 1, "", "min"], [814, 4, 1, "", "min_horizontal"], [815, 4, 1, "", "n_unique"], [816, 4, 1, "", "nth"], [817, 4, 1, "", "ones"], [818, 4, 1, "", "quantile"], [148, 4, 1, "", "read_avro"], [149, 4, 1, "", "read_clipboard"], [150, 4, 1, "", "read_csv"], [151, 4, 1, "", "read_csv_batched"], [152, 4, 1, "", "read_database"], [153, 4, 1, "", "read_database_uri"], [154, 4, 1, "", "read_delta"], [155, 4, 1, "", "read_excel"], [156, 4, 1, "", "read_ipc"], [157, 4, 1, "", "read_ipc_schema"], [158, 4, 1, "", "read_ipc_stream"], [159, 4, 1, "", "read_json"], [160, 4, 1, "", "read_ndjson"], [161, 4, 1, "", "read_ods"], [162, 4, 1, "", "read_parquet"], [163, 4, 1, "", "read_parquet_metadata"], [164, 4, 1, "", "read_parquet_schema"], [819, 4, 1, "", "reduce"], [820, 4, 1, "", "repeat"], [821, 4, 1, "", "rolling_corr"], [822, 4, 1, "", "rolling_cov"], [165, 4, 1, "", "scan_csv"], [166, 4, 1, "", "scan_delta"], [167, 4, 1, "", "scan_iceberg"], [168, 4, 1, "", "scan_ipc"], [169, 4, 1, "", "scan_ndjson"], [170, 4, 1, "", "scan_parquet"], [171, 4, 1, "", "scan_pyarrow_dataset"], [823, 4, 1, "", "select"], [968, 7, 0, "-", "selectors"], [172, 4, 1, "", "set_random_seed"], [173, 4, 1, "", "show_versions"], [824, 4, 1, "", "sql"], [825, 4, 1, "", "sql_expr"], [826, 4, 1, "", "std"], [827, 4, 1, "", "struct"], [828, 4, 1, "", "sum"], [829, 4, 1, "", "sum_horizontal"], [830, 4, 1, "", "tail"], [187, 4, 1, "", "thread_pool_size"], [188, 4, 1, "", "threadpool_size"], [831, 4, 1, "", "time"], [832, 4, 1, "", "time_range"], [833, 4, 1, "", "time_ranges"], [189, 4, 1, "", "using_string_cache"], [834, 4, 1, "", "var"], [835, 4, 1, "", "when"], [836, 4, 1, "", "zeros"]], "polars.Catalog": [[190, 1, 1, "", "__init__"], [191, 1, 1, "", "get_table_info"], [192, 1, 1, "", "list_catalogs"], [193, 1, 1, "", "list_namespaces"], [194, 1, 1, "", "list_tables"], [195, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_engine_affinity"], [11, 1, 1, "", "set_float_precision"], [12, 1, 1, "", "set_fmt_float"], [13, 1, 1, "", "set_fmt_str_lengths"], [14, 1, 1, "", "set_fmt_table_cell_list_len"], [15, 1, 1, "", "set_streaming_chunk_size"], [16, 1, 1, "", "set_tbl_cell_alignment"], [17, 1, 1, "", "set_tbl_cell_numeric_alignment"], [18, 1, 1, "", "set_tbl_cols"], [19, 1, 1, "", "set_tbl_column_data_type_inline"], [20, 1, 1, "", "set_tbl_dataframe_shape_below"], [21, 1, 1, "", "set_tbl_formatting"], [22, 1, 1, "", "set_tbl_hide_column_data_types"], [23, 1, 1, "", "set_tbl_hide_column_names"], [24, 1, 1, "", "set_tbl_hide_dataframe_shape"], [25, 1, 1, "", "set_tbl_hide_dtype_separator"], [26, 1, 1, "", "set_tbl_rows"], [27, 1, 1, "", "set_tbl_width_chars"], [28, 1, 1, "", "set_thousands_separator"], [29, 1, 1, "", "set_trim_decimal_zeros"], [30, 1, 1, "", "set_verbose"], [31, 1, 1, "", "state"]], "polars.CredentialProvider": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[34, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[35, 1, 1, "", "__init__"]], "polars.DataFrame": [[207, 1, 1, "", "__array__"], [208, 1, 1, "", "__arrow_c_stream__"], [209, 1, 1, "", "__dataframe__"], [210, 1, 1, "", "__getitem__"], [211, 1, 1, "", "approx_n_unique"], [212, 1, 1, "", "bottom_k"], [213, 1, 1, "", "cast"], [214, 1, 1, "", "clear"], [215, 1, 1, "", "clone"], [216, 1, 1, "", "collect_schema"], [217, 2, 1, "", "columns"], [218, 1, 1, "", "corr"], [219, 1, 1, "", "count"], [220, 1, 1, "", "describe"], [221, 1, 1, "", "deserialize"], [222, 1, 1, "", "drop"], [223, 1, 1, "", "drop_in_place"], [224, 1, 1, "", "drop_nans"], [225, 1, 1, "", "drop_nulls"], [226, 2, 1, "", "dtypes"], [227, 1, 1, "", "equals"], [228, 1, 1, "", "estimated_size"], [229, 1, 1, "", "explode"], [230, 1, 1, "", "extend"], [231, 1, 1, "", "fill_nan"], [232, 1, 1, "", "fill_null"], [233, 1, 1, "", "filter"], [234, 2, 1, "", "flags"], [235, 1, 1, "", "fold"], [236, 1, 1, "", "gather_every"], [237, 1, 1, "", "get_column"], [238, 1, 1, "", "get_column_index"], [239, 1, 1, "", "get_columns"], [240, 1, 1, "", "glimpse"], [241, 1, 1, "", "group_by"], [242, 1, 1, "", "group_by_dynamic"], [243, 1, 1, "", "hash_rows"], [244, 1, 1, "", "head"], [245, 2, 1, "", "height"], [246, 1, 1, "", "hstack"], [247, 1, 1, "", "insert_column"], [248, 1, 1, "", "interpolate"], [249, 1, 1, "", "is_duplicated"], [250, 1, 1, "", "is_empty"], [251, 1, 1, "", "is_unique"], [252, 1, 1, "", "item"], [253, 1, 1, "", "iter_columns"], [254, 1, 1, "", "iter_rows"], [255, 1, 1, "", "iter_slices"], [256, 1, 1, "", "join"], [257, 1, 1, "", "join_asof"], [258, 1, 1, "", "join_where"], [259, 1, 1, "", "lazy"], [260, 1, 1, "", "limit"], [261, 1, 1, "", "map_rows"], [262, 1, 1, "", "max"], [263, 1, 1, "", "max_horizontal"], [264, 1, 1, "", "mean"], [265, 1, 1, "", "mean_horizontal"], [266, 1, 1, "", "median"], [267, 1, 1, "", "melt"], [268, 1, 1, "", "merge_sorted"], [269, 1, 1, "", "min"], [270, 1, 1, "", "min_horizontal"], [271, 1, 1, "", "n_chunks"], [272, 1, 1, "", "n_unique"], [273, 1, 1, "", "null_count"], [274, 1, 1, "", "partition_by"], [275, 1, 1, "", "pipe"], [276, 1, 1, "", "pivot"], [355, 2, 1, "", "plot"], [277, 1, 1, "", "product"], [278, 1, 1, "", "quantile"], [279, 1, 1, "", "rechunk"], [280, 1, 1, "", "remove"], [281, 1, 1, "", "rename"], [282, 1, 1, "", "replace_column"], [283, 1, 1, "", "reverse"], [284, 1, 1, "", "rolling"], [285, 1, 1, "", "row"], [286, 1, 1, "", "rows"], [287, 1, 1, "", "rows_by_key"], [288, 1, 1, "", "sample"], [289, 2, 1, "", "schema"], [290, 1, 1, "", "select"], [291, 1, 1, "", "select_seq"], [292, 1, 1, "", "serialize"], [293, 1, 1, "", "set_sorted"], [294, 2, 1, "", "shape"], [295, 1, 1, "", "shift"], [296, 1, 1, "", "shrink_to_fit"], [297, 1, 1, "", "slice"], [298, 1, 1, "", "sort"], [299, 1, 1, "", "sql"], [300, 1, 1, "", "std"], [356, 2, 1, "", "style"], [301, 1, 1, "", "sum"], [302, 1, 1, "", "sum_horizontal"], [303, 1, 1, "", "tail"], [304, 1, 1, "", "to_arrow"], [305, 1, 1, "", "to_dict"], [306, 1, 1, "", "to_dicts"], [307, 1, 1, "", "to_dummies"], [308, 1, 1, "", "to_init_repr"], [309, 1, 1, "", "to_jax"], [310, 1, 1, "", "to_numpy"], [311, 1, 1, "", "to_pandas"], [312, 1, 1, "", "to_series"], [313, 1, 1, "", "to_struct"], [314, 1, 1, "", "to_torch"], [315, 1, 1, "", "top_k"], [316, 1, 1, "", "transpose"], [317, 1, 1, "", "unique"], [318, 1, 1, "", "unnest"], [319, 1, 1, "", "unpivot"], [320, 1, 1, "", "unstack"], [321, 1, 1, "", "update"], [322, 1, 1, "", "upsample"], [323, 1, 1, "", "var"], [324, 1, 1, "", "vstack"], [325, 2, 1, "", "width"], [326, 1, 1, "", "with_columns"], [327, 1, 1, "", "with_columns_seq"], [328, 1, 1, "", "with_row_count"], [329, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_clipboard"], [38, 1, 1, "", "write_csv"], [39, 1, 1, "", "write_database"], [40, 1, 1, "", "write_delta"], [41, 1, 1, "", "write_excel"], [42, 1, 1, "", "write_iceberg"], [43, 1, 1, "", "write_ipc"], [44, 1, 1, "", "write_ipc_stream"], [45, 1, 1, "", "write_json"], [46, 1, 1, "", "write_ndjson"], [47, 1, 1, "", "write_parquet"]], "polars.Expr": [[360, 1, 1, "", "abs"], [361, 1, 1, "", "add"], [362, 1, 1, "", "agg_groups"], [363, 1, 1, "", "alias"], [364, 1, 1, "", "all"], [365, 1, 1, "", "and_"], [366, 1, 1, "", "any"], [367, 1, 1, "", "append"], [368, 1, 1, "", "approx_n_unique"], [369, 1, 1, "", "arccos"], [370, 1, 1, "", "arccosh"], [371, 1, 1, "", "arcsin"], [372, 1, 1, "", "arcsinh"], [373, 1, 1, "", "arctan"], [374, 1, 1, "", "arctanh"], [375, 1, 1, "", "arg_max"], [376, 1, 1, "", "arg_min"], [377, 1, 1, "", "arg_sort"], [378, 1, 1, "", "arg_true"], [379, 1, 1, "", "arg_unique"], [404, 1, 1, "", "backward_fill"], [412, 1, 1, "", "bitwise_and"], [413, 1, 1, "", "bitwise_count_ones"], [414, 1, 1, "", "bitwise_count_zeros"], [415, 1, 1, "", "bitwise_leading_ones"], [416, 1, 1, "", "bitwise_leading_zeros"], [417, 1, 1, "", "bitwise_or"], [418, 1, 1, "", "bitwise_trailing_ones"], [419, 1, 1, "", "bitwise_trailing_zeros"], [420, 1, 1, "", "bitwise_xor"], [421, 1, 1, "", "bottom_k"], [422, 1, 1, "", "bottom_k_by"], [423, 1, 1, "", "cast"], [429, 1, 1, "", "cbrt"], [430, 1, 1, "", "ceil"], [431, 1, 1, "", "clip"], [432, 1, 1, "", "cos"], [433, 1, 1, "", "cosh"], [434, 1, 1, "", "cot"], [435, 1, 1, "", "count"], [436, 1, 1, "", "cum_count"], [437, 1, 1, "", "cum_max"], [438, 1, 1, "", "cum_min"], [439, 1, 1, "", "cum_prod"], [440, 1, 1, "", "cum_sum"], [441, 1, 1, "", "cumulative_eval"], [442, 1, 1, "", "cut"], [443, 1, 1, "", "degrees"], [444, 1, 1, "", "deserialize"], [445, 1, 1, "", "diff"], [446, 1, 1, "", "dot"], [447, 1, 1, "", "drop_nans"], [448, 1, 1, "", "drop_nulls"], [495, 1, 1, "", "entropy"], [496, 1, 1, "", "eq"], [497, 1, 1, "", "eq_missing"], [498, 1, 1, "", "ewm_mean"], [499, 1, 1, "", "ewm_mean_by"], [500, 1, 1, "", "ewm_std"], [501, 1, 1, "", "ewm_var"], [502, 1, 1, "", "exclude"], [503, 1, 1, "", "exp"], [504, 1, 1, "", "explode"], [505, 1, 1, "", "extend_constant"], [506, 1, 1, "", "fill_nan"], [507, 1, 1, "", "fill_null"], [508, 1, 1, "", "filter"], [509, 1, 1, "", "first"], [510, 1, 1, "", "flatten"], [511, 1, 1, "", "floor"], [512, 1, 1, "", "floordiv"], [513, 1, 1, "", "forward_fill"], [514, 1, 1, "", "from_json"], [515, 1, 1, "", "gather"], [516, 1, 1, "", "gather_every"], [517, 1, 1, "", "ge"], [518, 1, 1, "", "get"], [519, 1, 1, "", "gt"], [520, 1, 1, "", "has_nulls"], [521, 1, 1, "", "hash"], [522, 1, 1, "", "head"], [523, 1, 1, "", "hist"], [524, 1, 1, "", "implode"], [525, 1, 1, "", "index_of"], [526, 1, 1, "", "inspect"], [527, 1, 1, "", "interpolate"], [528, 1, 1, "", "interpolate_by"], [529, 1, 1, "", "is_between"], [530, 1, 1, "", "is_duplicated"], [531, 1, 1, "", "is_finite"], [532, 1, 1, "", "is_first_distinct"], [533, 1, 1, "", "is_in"], [534, 1, 1, "", "is_infinite"], [535, 1, 1, "", "is_last_distinct"], [536, 1, 1, "", "is_nan"], [537, 1, 1, "", "is_not_nan"], [538, 1, 1, "", "is_not_null"], [539, 1, 1, "", "is_null"], [540, 1, 1, "", "is_unique"], [541, 1, 1, "", "kurtosis"], [542, 1, 1, "", "last"], [543, 1, 1, "", "le"], [544, 1, 1, "", "len"], [545, 1, 1, "", "limit"], [586, 1, 1, "", "log"], [587, 1, 1, "", "log10"], [588, 1, 1, "", "log1p"], [589, 1, 1, "", "lower_bound"], [590, 1, 1, "", "lt"], [591, 1, 1, "", "map_batches"], [592, 1, 1, "", "map_elements"], [593, 1, 1, "", "max"], [594, 1, 1, "", "mean"], [595, 1, 1, "", "median"], [611, 1, 1, "", "min"], [612, 1, 1, "", "mod"], [613, 1, 1, "", "mode"], [614, 1, 1, "", "mul"], [615, 1, 1, "", "n_unique"], [625, 1, 1, "", "nan_max"], [626, 1, 1, "", "nan_min"], [627, 1, 1, "", "ne"], [628, 1, 1, "", "ne_missing"], [629, 1, 1, "", "neg"], [630, 1, 1, "", "not_"], [631, 1, 1, "", "null_count"], [632, 1, 1, "", "or_"], [633, 1, 1, "", "over"], [634, 1, 1, "", "pct_change"], [635, 1, 1, "", "peak_max"], [636, 1, 1, "", "peak_min"], [637, 1, 1, "", "pipe"], [638, 1, 1, "", "pow"], [639, 1, 1, "", "product"], [640, 1, 1, "", "qcut"], [641, 1, 1, "", "quantile"], [642, 1, 1, "", "radians"], [643, 1, 1, "", "rank"], [644, 1, 1, "", "rechunk"], [645, 1, 1, "", "reinterpret"], [646, 1, 1, "", "repeat_by"], [647, 1, 1, "", "replace"], [648, 1, 1, "", "replace_strict"], [649, 1, 1, "", "reshape"], [650, 1, 1, "", "reverse"], [651, 1, 1, "", "rle"], [652, 1, 1, "", "rle_id"], [653, 1, 1, "", "rolling"], [654, 1, 1, "", "rolling_kurtosis"], [655, 1, 1, "", "rolling_map"], [656, 1, 1, "", "rolling_max"], [657, 1, 1, "", "rolling_max_by"], [658, 1, 1, "", "rolling_mean"], [659, 1, 1, "", "rolling_mean_by"], [660, 1, 1, "", "rolling_median"], [661, 1, 1, "", "rolling_median_by"], [662, 1, 1, "", "rolling_min"], [663, 1, 1, "", "rolling_min_by"], [664, 1, 1, "", "rolling_quantile"], [665, 1, 1, "", "rolling_quantile_by"], [666, 1, 1, "", "rolling_skew"], [667, 1, 1, "", "rolling_std"], [668, 1, 1, "", "rolling_std_by"], [669, 1, 1, "", "rolling_sum"], [670, 1, 1, "", "rolling_sum_by"], [671, 1, 1, "", "rolling_var"], [672, 1, 1, "", "rolling_var_by"], [673, 1, 1, "", "round"], [674, 1, 1, "", "round_sig_figs"], [675, 1, 1, "", "sample"], [676, 1, 1, "", "search_sorted"], [677, 1, 1, "", "set_sorted"], [678, 1, 1, "", "shift"], [679, 1, 1, "", "shrink_dtype"], [680, 1, 1, "", "shuffle"], [681, 1, 1, "", "sign"], [682, 1, 1, "", "sin"], [683, 1, 1, "", "sinh"], [684, 1, 1, "", "skew"], [685, 1, 1, "", "slice"], [686, 1, 1, "", "sort"], [687, 1, 1, "", "sort_by"], [688, 1, 1, "", "sqrt"], [689, 1, 1, "", "std"], [744, 1, 1, "", "sub"], [745, 1, 1, "", "sum"], [746, 1, 1, "", "tail"], [747, 1, 1, "", "tan"], [748, 1, 1, "", "tanh"], [749, 1, 1, "", "to_physical"], [750, 1, 1, "", "top_k"], [751, 1, 1, "", "top_k_by"], [752, 1, 1, "", "truediv"], [753, 1, 1, "", "unique"], [754, 1, 1, "", "unique_counts"], [755, 1, 1, "", "upper_bound"], [756, 1, 1, "", "value_counts"], [757, 1, 1, "", "var"], [758, 1, 1, "", "where"], [759, 1, 1, "", "xor"]], "polars.Expr.arr": [[380, 1, 1, "", "all"], [381, 1, 1, "", "any"], [382, 1, 1, "", "arg_max"], [383, 1, 1, "", "arg_min"], [384, 1, 1, "", "contains"], [385, 1, 1, "", "count_matches"], [386, 1, 1, "", "explode"], [387, 1, 1, "", "first"], [388, 1, 1, "", "get"], [389, 1, 1, "", "join"], [390, 1, 1, "", "last"], [391, 1, 1, "", "max"], [392, 1, 1, "", "median"], [393, 1, 1, "", "min"], [394, 1, 1, "", "n_unique"], [395, 1, 1, "", "reverse"], [396, 1, 1, "", "shift"], [397, 1, 1, "", "sort"], [398, 1, 1, "", "std"], [399, 1, 1, "", "sum"], [400, 1, 1, "", "to_list"], [401, 1, 1, "", "to_struct"], [402, 1, 1, "", "unique"], [403, 1, 1, "", "var"]], "polars.Expr.bin": [[405, 1, 1, "", "contains"], [406, 1, 1, "", "decode"], [407, 1, 1, "", "encode"], [408, 1, 1, "", "ends_with"], [409, 1, 1, "", "reinterpret"], [410, 1, 1, "", "size"], [411, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[424, 1, 1, "", "ends_with"], [425, 1, 1, "", "get_categories"], [426, 1, 1, "", "len_bytes"], [427, 1, 1, "", "len_chars"], [428, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[449, 1, 1, "", "add_business_days"], [450, 1, 1, "", "base_utc_offset"], [451, 1, 1, "", "cast_time_unit"], [452, 1, 1, "", "century"], [453, 1, 1, "", "combine"], [454, 1, 1, "", "convert_time_zone"], [455, 1, 1, "", "date"], [456, 1, 1, "", "datetime"], [457, 1, 1, "", "day"], [458, 1, 1, "", "dst_offset"], [459, 1, 1, "", "epoch"], [460, 1, 1, "", "hour"], [461, 1, 1, "", "is_business_day"], [462, 1, 1, "", "is_leap_year"], [463, 1, 1, "", "iso_year"], [464, 1, 1, "", "microsecond"], [465, 1, 1, "", "millennium"], [466, 1, 1, "", "millisecond"], [467, 1, 1, "", "minute"], [468, 1, 1, "", "month"], [469, 1, 1, "", "month_end"], [470, 1, 1, "", "month_start"], [471, 1, 1, "", "nanosecond"], [472, 1, 1, "", "offset_by"], [473, 1, 1, "", "ordinal_day"], [474, 1, 1, "", "quarter"], [475, 1, 1, "", "replace"], [476, 1, 1, "", "replace_time_zone"], [477, 1, 1, "", "round"], [478, 1, 1, "", "second"], [479, 1, 1, "", "strftime"], [480, 1, 1, "", "time"], [481, 1, 1, "", "timestamp"], [482, 1, 1, "", "to_string"], [483, 1, 1, "", "total_days"], [484, 1, 1, "", "total_hours"], [485, 1, 1, "", "total_microseconds"], [486, 1, 1, "", "total_milliseconds"], [487, 1, 1, "", "total_minutes"], [488, 1, 1, "", "total_nanoseconds"], [489, 1, 1, "", "total_seconds"], [490, 1, 1, "", "truncate"], [491, 1, 1, "", "week"], [492, 1, 1, "", "weekday"], [493, 1, 1, "", "with_time_unit"], [494, 1, 1, "", "year"]], "polars.Expr.list": [[546, 1, 1, "", "all"], [547, 1, 1, "", "any"], [548, 1, 1, "", "arg_max"], [549, 1, 1, "", "arg_min"], [550, 1, 1, "", "concat"], [551, 1, 1, "", "contains"], [552, 1, 1, "", "count_matches"], [553, 1, 1, "", "diff"], [554, 1, 1, "", "drop_nulls"], [555, 1, 1, "", "eval"], [556, 1, 1, "", "explode"], [557, 1, 1, "", "first"], [558, 1, 1, "", "gather"], [559, 1, 1, "", "gather_every"], [560, 1, 1, "", "get"], [561, 1, 1, "", "head"], [562, 1, 1, "", "join"], [563, 1, 1, "", "last"], [564, 1, 1, "", "len"], [565, 1, 1, "", "max"], [566, 1, 1, "", "mean"], [567, 1, 1, "", "median"], [568, 1, 1, "", "min"], [569, 1, 1, "", "n_unique"], [570, 1, 1, "", "reverse"], [571, 1, 1, "", "sample"], [572, 1, 1, "", "set_difference"], [573, 1, 1, "", "set_intersection"], [574, 1, 1, "", "set_symmetric_difference"], [575, 1, 1, "", "set_union"], [576, 1, 1, "", "shift"], [577, 1, 1, "", "slice"], [578, 1, 1, "", "sort"], [579, 1, 1, "", "std"], [580, 1, 1, "", "sum"], [581, 1, 1, "", "tail"], [582, 1, 1, "", "to_array"], [583, 1, 1, "", "to_struct"], [584, 1, 1, "", "unique"], [585, 1, 1, "", "var"]], "polars.Expr.meta": [[596, 1, 1, "", "eq"], [597, 1, 1, "", "has_multiple_outputs"], [598, 1, 1, "", "is_column"], [599, 1, 1, "", "is_column_selection"], [600, 1, 1, "", "is_literal"], [601, 1, 1, "", "is_regex_projection"], [602, 1, 1, "", "ne"], [603, 1, 1, "", "output_name"], [604, 1, 1, "", "pop"], [605, 1, 1, "", "root_names"], [606, 1, 1, "", "serialize"], [607, 1, 1, "", "show_graph"], [608, 1, 1, "", "tree_format"], [609, 1, 1, "", "undo_aliases"], [610, 1, 1, "", "write_json"]], "polars.Expr.name": [[616, 1, 1, "", "keep"], [617, 1, 1, "", "map"], [618, 1, 1, "", "map_fields"], [619, 1, 1, "", "prefix"], [620, 1, 1, "", "prefix_fields"], [621, 1, 1, "", "suffix"], [622, 1, 1, "", "suffix_fields"], [623, 1, 1, "", "to_lowercase"], [624, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[690, 1, 1, "", "concat"], [691, 1, 1, "", "contains"], [692, 1, 1, "", "contains_any"], [693, 1, 1, "", "count_matches"], [694, 1, 1, "", "decode"], [695, 1, 1, "", "encode"], [696, 1, 1, "", "ends_with"], [697, 1, 1, "", "escape_regex"], [698, 1, 1, "", "explode"], [699, 1, 1, "", "extract"], [700, 1, 1, "", "extract_all"], [701, 1, 1, "", "extract_groups"], [702, 1, 1, "", "extract_many"], [703, 1, 1, "", "find"], [704, 1, 1, "", "find_many"], [705, 1, 1, "", "head"], [706, 1, 1, "", "join"], [707, 1, 1, "", "json_decode"], [708, 1, 1, "", "json_path_match"], [709, 1, 1, "", "len_bytes"], [710, 1, 1, "", "len_chars"], [711, 1, 1, "", "normalize"], [712, 1, 1, "", "pad_end"], [713, 1, 1, "", "pad_start"], [714, 1, 1, "", "replace"], [715, 1, 1, "", "replace_all"], [716, 1, 1, "", "replace_many"], [717, 1, 1, "", "reverse"], [718, 1, 1, "", "slice"], [719, 1, 1, "", "split"], [720, 1, 1, "", "split_exact"], [721, 1, 1, "", "splitn"], [722, 1, 1, "", "starts_with"], [723, 1, 1, "", "strip_chars"], [724, 1, 1, "", "strip_chars_end"], [725, 1, 1, "", "strip_chars_start"], [726, 1, 1, "", "strip_prefix"], [727, 1, 1, "", "strip_suffix"], [728, 1, 1, "", "strptime"], [729, 1, 1, "", "tail"], [730, 1, 1, "", "to_date"], [731, 1, 1, "", "to_datetime"], [732, 1, 1, "", "to_decimal"], [733, 1, 1, "", "to_integer"], [734, 1, 1, "", "to_lowercase"], [735, 1, 1, "", "to_time"], [736, 1, 1, "", "to_titlecase"], [737, 1, 1, "", "to_uppercase"], [738, 1, 1, "", "zfill"]], "polars.Expr.struct": [[739, 1, 1, "", "field"], [740, 1, 1, "", "json_encode"], [741, 1, 1, "", "rename_fields"], [742, 1, 1, "", "unnest"], [743, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[860, 1, 1, "", "approx_n_unique"], [861, 1, 1, "", "bottom_k"], [862, 1, 1, "", "cache"], [863, 1, 1, "", "cast"], [864, 1, 1, "", "clear"], [865, 1, 1, "", "clone"], [866, 1, 1, "", "collect"], [867, 1, 1, "", "collect_async"], [868, 1, 1, "", "collect_schema"], [869, 2, 1, "", "columns"], [870, 1, 1, "", "count"], [871, 1, 1, "", "describe"], [872, 1, 1, "", "deserialize"], [873, 1, 1, "", "drop"], [874, 1, 1, "", "drop_nans"], [875, 1, 1, "", "drop_nulls"], [876, 2, 1, "", "dtypes"], [877, 1, 1, "", "explain"], [878, 1, 1, "", "explode"], [879, 1, 1, "", "fill_nan"], [880, 1, 1, "", "fill_null"], [881, 1, 1, "", "filter"], [882, 1, 1, "", "first"], [883, 1, 1, "", "gather_every"], [884, 1, 1, "", "group_by"], [885, 1, 1, "", "group_by_dynamic"], [886, 1, 1, "", "head"], [887, 1, 1, "", "inspect"], [888, 1, 1, "", "interpolate"], [889, 1, 1, "", "join"], [890, 1, 1, "", "join_asof"], [891, 1, 1, "", "join_where"], [892, 1, 1, "", "last"], [893, 1, 1, "", "lazy"], [894, 1, 1, "", "limit"], [895, 1, 1, "", "map_batches"], [896, 1, 1, "", "max"], [897, 1, 1, "", "mean"], [898, 1, 1, "", "median"], [899, 1, 1, "", "melt"], [900, 1, 1, "", "merge_sorted"], [901, 1, 1, "", "min"], [902, 1, 1, "", "null_count"], [903, 1, 1, "", "pipe"], [904, 1, 1, "", "profile"], [905, 1, 1, "", "quantile"], [906, 1, 1, "", "remote"], [907, 1, 1, "", "remove"], [908, 1, 1, "", "rename"], [909, 1, 1, "", "reverse"], [910, 1, 1, "", "rolling"], [911, 2, 1, "", "schema"], [912, 1, 1, "", "select"], [913, 1, 1, "", "select_seq"], [914, 1, 1, "", "serialize"], [915, 1, 1, "", "set_sorted"], [916, 1, 1, "", "shift"], [917, 1, 1, "", "show_graph"], [48, 1, 1, "", "sink_csv"], [49, 1, 1, "", "sink_ipc"], [50, 1, 1, "", "sink_ndjson"], [51, 1, 1, "", "sink_parquet"], [918, 1, 1, "", "slice"], [919, 1, 1, "", "sort"], [920, 1, 1, "", "sql"], [921, 1, 1, "", "std"], [922, 1, 1, "", "sum"], [923, 1, 1, "", "tail"], [924, 1, 1, "", "top_k"], [925, 1, 1, "", "unique"], [926, 1, 1, "", "unnest"], [927, 1, 1, "", "unpivot"], [928, 1, 1, "", "update"], [929, 1, 1, "", "var"], [930, 2, 1, "", "width"], [931, 1, 1, "", "with_columns"], [932, 1, 1, "", "with_columns_seq"], [933, 1, 1, "", "with_context"], [934, 1, 1, "", "with_row_count"], [935, 1, 1, "", "with_row_index"]], "polars.PartitionByKey": [[52, 1, 1, "", "__init__"]], "polars.PartitionMaxSize": [[53, 1, 1, "", "__init__"]], "polars.PartitionParted": [[54, 1, 1, "", "__init__"]], "polars.QueryOptFlags": [[936, 1, 1, "", "__init__"]], "polars.SQLContext": [[1390, 1, 1, "", "__enter__"], [1390, 1, 1, "", "__exit__"], [1390, 1, 1, "", "__init__"], [1371, 1, 1, "", "execute"], [1372, 1, 1, "", "execute_global"], [1373, 1, 1, "", "register"], [1374, 1, 1, "", "register_globals"], [1375, 1, 1, "", "register_many"], [1376, 1, 1, "", "tables"], [1377, 1, 1, "", "unregister"]], "polars.ScanCastOptions": [[55, 1, 1, "", "__init__"]], "polars.Series": [[970, 1, 1, "", "__array__"], [971, 1, 1, "", "__arrow_c_stream__"], [972, 1, 1, "", "__getitem__"], [973, 1, 1, "", "abs"], [974, 1, 1, "", "alias"], [975, 1, 1, "", "all"], [976, 1, 1, "", "any"], [977, 1, 1, "", "append"], [978, 1, 1, "", "approx_n_unique"], [979, 1, 1, "", "arccos"], [980, 1, 1, "", "arccosh"], [981, 1, 1, "", "arcsin"], [982, 1, 1, "", "arcsinh"], [983, 1, 1, "", "arctan"], [984, 1, 1, "", "arctanh"], [985, 1, 1, "", "arg_max"], [986, 1, 1, "", "arg_min"], [987, 1, 1, "", "arg_sort"], [988, 1, 1, "", "arg_true"], [989, 1, 1, "", "arg_unique"], [1014, 1, 1, "", "backward_fill"], [1022, 1, 1, "", "bitwise_and"], [1023, 1, 1, "", "bitwise_count_ones"], [1024, 1, 1, "", "bitwise_count_zeros"], [1025, 1, 1, "", "bitwise_leading_ones"], [1026, 1, 1, "", "bitwise_leading_zeros"], [1027, 1, 1, "", "bitwise_or"], [1028, 1, 1, "", "bitwise_trailing_ones"], [1029, 1, 1, "", "bitwise_trailing_zeros"], [1030, 1, 1, "", "bitwise_xor"], [1031, 1, 1, "", "bottom_k"], [1032, 1, 1, "", "cast"], [1041, 1, 1, "", "cbrt"], [1042, 1, 1, "", "ceil"], [1043, 1, 1, "", "chunk_lengths"], [1044, 1, 1, "", "clear"], [1045, 1, 1, "", "clip"], [1046, 1, 1, "", "clone"], [1047, 1, 1, "", "cos"], [1048, 1, 1, "", "cosh"], [1049, 1, 1, "", "cot"], [1050, 1, 1, "", "count"], [1051, 1, 1, "", "cum_count"], [1052, 1, 1, "", "cum_max"], [1053, 1, 1, "", "cum_min"], [1054, 1, 1, "", "cum_prod"], [1055, 1, 1, "", "cum_sum"], [1056, 1, 1, "", "cumulative_eval"], [1057, 1, 1, "", "cut"], [1058, 1, 1, "", "describe"], [1059, 1, 1, "", "diff"], [1060, 1, 1, "", "dot"], [1061, 1, 1, "", "drop_nans"], [1062, 1, 1, "", "drop_nulls"], [1113, 2, 1, "", "dtype"], [1114, 1, 1, "", "entropy"], [1115, 1, 1, "", "eq"], [1116, 1, 1, "", "eq_missing"], [1117, 1, 1, "", "equals"], [1118, 1, 1, "", "estimated_size"], [1119, 1, 1, "", "ewm_mean"], [1120, 1, 1, "", "ewm_mean_by"], [1121, 1, 1, "", "ewm_std"], [1122, 1, 1, "", "ewm_var"], [1123, 1, 1, "", "exp"], [1124, 1, 1, "", "explode"], [1125, 1, 1, "", "extend"], [1126, 1, 1, "", "extend_constant"], [1127, 1, 1, "", "fill_nan"], [1128, 1, 1, "", "fill_null"], [1129, 1, 1, "", "filter"], [1130, 1, 1, "", "first"], [1131, 2, 1, "", "flags"], [1132, 1, 1, "", "floor"], [1133, 1, 1, "", "forward_fill"], [1134, 1, 1, "", "gather"], [1135, 1, 1, "", "gather_every"], [1136, 1, 1, "", "ge"], [1137, 1, 1, "", "get_chunks"], [1138, 1, 1, "", "gt"], [1139, 1, 1, "", "has_nulls"], [1140, 1, 1, "", "has_validity"], [1141, 1, 1, "", "hash"], [1142, 1, 1, "", "head"], [1143, 1, 1, "", "hist"], [1144, 1, 1, "", "implode"], [1145, 1, 1, "", "index_of"], [1146, 1, 1, "", "interpolate"], [1147, 1, 1, "", "interpolate_by"], [1148, 1, 1, "", "is_between"], [1149, 1, 1, "", "is_duplicated"], [1150, 1, 1, "", "is_empty"], [1151, 1, 1, "", "is_finite"], [1152, 1, 1, "", "is_first_distinct"], [1153, 1, 1, "", "is_in"], [1154, 1, 1, "", "is_infinite"], [1155, 1, 1, "", "is_last_distinct"], [1156, 1, 1, "", "is_nan"], [1157, 1, 1, "", "is_not_nan"], [1158, 1, 1, "", "is_not_null"], [1159, 1, 1, "", "is_null"], [1160, 1, 1, "", "is_sorted"], [1161, 1, 1, "", "is_unique"], [1162, 1, 1, "", "item"], [1163, 1, 1, "", "kurtosis"], [1164, 1, 1, "", "last"], [1165, 1, 1, "", "le"], [1166, 1, 1, "", "len"], [1167, 1, 1, "", "limit"], [1208, 1, 1, "", "log"], [1209, 1, 1, "", "log10"], [1210, 1, 1, "", "log1p"], [1211, 1, 1, "", "lower_bound"], [1212, 1, 1, "", "lt"], [1213, 1, 1, "", "map_elements"], [1214, 1, 1, "", "max"], [1215, 1, 1, "", "mean"], [1216, 1, 1, "", "median"], [1217, 1, 1, "", "min"], [1218, 1, 1, "", "mode"], [1219, 1, 1, "", "n_chunks"], [1220, 1, 1, "", "n_unique"], [1221, 2, 1, "", "name"], [1222, 1, 1, "", "nan_max"], [1223, 1, 1, "", "nan_min"], [1224, 1, 1, "", "ne"], [1225, 1, 1, "", "ne_missing"], [1226, 1, 1, "", "new_from_index"], [1227, 1, 1, "", "not_"], [1228, 1, 1, "", "null_count"], [1229, 1, 1, "", "pct_change"], [1230, 1, 1, "", "peak_max"], [1231, 1, 1, "", "peak_min"], [1367, 2, 1, "", "plot"], [1232, 1, 1, "", "pow"], [1233, 1, 1, "", "product"], [1234, 1, 1, "", "qcut"], [1235, 1, 1, "", "quantile"], [1236, 1, 1, "", "rank"], [1237, 1, 1, "", "rechunk"], [1238, 1, 1, "", "reinterpret"], [1239, 1, 1, "", "rename"], [1240, 1, 1, "", "repeat_by"], [1241, 1, 1, "", "replace"], [1242, 1, 1, "", "replace_strict"], [1243, 1, 1, "", "reshape"], [1244, 1, 1, "", "reverse"], [1245, 1, 1, "", "rle"], [1246, 1, 1, "", "rle_id"], [1247, 1, 1, "", "rolling_kurtosis"], [1248, 1, 1, "", "rolling_map"], [1249, 1, 1, "", "rolling_max"], [1250, 1, 1, "", "rolling_mean"], [1251, 1, 1, "", "rolling_median"], [1252, 1, 1, "", "rolling_min"], [1253, 1, 1, "", "rolling_quantile"], [1254, 1, 1, "", "rolling_skew"], [1255, 1, 1, "", "rolling_std"], [1256, 1, 1, "", "rolling_sum"], [1257, 1, 1, "", "rolling_var"], [1258, 1, 1, "", "round"], [1259, 1, 1, "", "round_sig_figs"], [1260, 1, 1, "", "sample"], [1261, 1, 1, "", "scatter"], [1262, 1, 1, "", "search_sorted"], [1263, 1, 1, "", "set"], [1264, 1, 1, "", "set_sorted"], [1265, 2, 1, "", "shape"], [1266, 1, 1, "", "shift"], [1267, 1, 1, "", "shrink_dtype"], [1268, 1, 1, "", "shrink_to_fit"], [1269, 1, 1, "", "shuffle"], [1270, 1, 1, "", "sign"], [1271, 1, 1, "", "sin"], [1272, 1, 1, "", "sinh"], [1273, 1, 1, "", "skew"], [1274, 1, 1, "", "slice"], [1275, 1, 1, "", "sort"], [1276, 1, 1, "", "sqrt"], [1277, 1, 1, "", "std"], [1333, 1, 1, "", "sum"], [1334, 1, 1, "", "tail"], [1335, 1, 1, "", "tan"], [1336, 1, 1, "", "tanh"], [1337, 1, 1, "", "to_arrow"], [1338, 1, 1, "", "to_dummies"], [1339, 1, 1, "", "to_frame"], [1340, 1, 1, "", "to_init_repr"], [1341, 1, 1, "", "to_jax"], [1342, 1, 1, "", "to_list"], [1343, 1, 1, "", "to_numpy"], [1344, 1, 1, "", "to_pandas"], [1345, 1, 1, "", "to_physical"], [1346, 1, 1, "", "to_torch"], [1347, 1, 1, "", "top_k"], [1348, 1, 1, "", "unique"], [1349, 1, 1, "", "unique_counts"], [1350, 1, 1, "", "upper_bound"], [1351, 1, 1, "", "value_counts"], [1352, 1, 1, "", "var"], [1353, 1, 1, "", "zip_with"]], "polars.Series.arr": [[990, 1, 1, "", "all"], [991, 1, 1, "", "any"], [992, 1, 1, "", "arg_max"], [993, 1, 1, "", "arg_min"], [994, 1, 1, "", "contains"], [995, 1, 1, "", "count_matches"], [996, 1, 1, "", "explode"], [997, 1, 1, "", "first"], [998, 1, 1, "", "get"], [999, 1, 1, "", "join"], [1000, 1, 1, "", "last"], [1001, 1, 1, "", "max"], [1002, 1, 1, "", "median"], [1003, 1, 1, "", "min"], [1004, 1, 1, "", "n_unique"], [1005, 1, 1, "", "reverse"], [1006, 1, 1, "", "shift"], [1007, 1, 1, "", "sort"], [1008, 1, 1, "", "std"], [1009, 1, 1, "", "sum"], [1010, 1, 1, "", "to_list"], [1011, 1, 1, "", "to_struct"], [1012, 1, 1, "", "unique"], [1013, 1, 1, "", "var"]], "polars.Series.bin": [[1015, 1, 1, "", "contains"], [1016, 1, 1, "", "decode"], [1017, 1, 1, "", "encode"], [1018, 1, 1, "", "ends_with"], [1019, 1, 1, "", "reinterpret"], [1020, 1, 1, "", "size"], [1021, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1033, 1, 1, "", "ends_with"], [1034, 1, 1, "", "get_categories"], [1035, 1, 1, "", "is_local"], [1036, 1, 1, "", "len_bytes"], [1037, 1, 1, "", "len_chars"], [1038, 1, 1, "", "starts_with"], [1039, 1, 1, "", "to_local"], [1040, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1063, 1, 1, "", "add_business_days"], [1064, 1, 1, "", "base_utc_offset"], [1065, 1, 1, "", "cast_time_unit"], [1066, 1, 1, "", "century"], [1067, 1, 1, "", "combine"], [1068, 1, 1, "", "convert_time_zone"], [1069, 1, 1, "", "date"], [1070, 1, 1, "", "datetime"], [1071, 1, 1, "", "day"], [1072, 1, 1, "", "dst_offset"], [1073, 1, 1, "", "epoch"], [1074, 1, 1, "", "hour"], [1075, 1, 1, "", "is_business_day"], [1076, 1, 1, "", "is_leap_year"], [1077, 1, 1, "", "iso_year"], [1078, 1, 1, "", "max"], [1079, 1, 1, "", "mean"], [1080, 1, 1, "", "median"], [1081, 1, 1, "", "microsecond"], [1082, 1, 1, "", "millennium"], [1083, 1, 1, "", "millisecond"], [1084, 1, 1, "", "min"], [1085, 1, 1, "", "minute"], [1086, 1, 1, "", "month"], [1087, 1, 1, "", "month_end"], [1088, 1, 1, "", "month_start"], [1089, 1, 1, "", "nanosecond"], [1090, 1, 1, "", "offset_by"], [1091, 1, 1, "", "ordinal_day"], [1092, 1, 1, "", "quarter"], [1093, 1, 1, "", "replace"], [1094, 1, 1, "", "replace_time_zone"], [1095, 1, 1, "", "round"], [1096, 1, 1, "", "second"], [1097, 1, 1, "", "strftime"], [1098, 1, 1, "", "time"], [1099, 1, 1, "", "timestamp"], [1100, 1, 1, "", "to_string"], [1101, 1, 1, "", "total_days"], [1102, 1, 1, "", "total_hours"], [1103, 1, 1, "", "total_microseconds"], [1104, 1, 1, "", "total_milliseconds"], [1105, 1, 1, "", "total_minutes"], [1106, 1, 1, "", "total_nanoseconds"], [1107, 1, 1, "", "total_seconds"], [1108, 1, 1, "", "truncate"], [1109, 1, 1, "", "week"], [1110, 1, 1, "", "weekday"], [1111, 1, 1, "", "with_time_unit"], [1112, 1, 1, "", "year"]], "polars.Series.list": [[1168, 1, 1, "", "all"], [1169, 1, 1, "", "any"], [1170, 1, 1, "", "arg_max"], [1171, 1, 1, "", "arg_min"], [1172, 1, 1, "", "concat"], [1173, 1, 1, "", "contains"], [1174, 1, 1, "", "count_matches"], [1175, 1, 1, "", "diff"], [1176, 1, 1, "", "drop_nulls"], [1177, 1, 1, "", "eval"], [1178, 1, 1, "", "explode"], [1179, 1, 1, "", "first"], [1180, 1, 1, "", "gather"], [1181, 1, 1, "", "gather_every"], [1182, 1, 1, "", "get"], [1183, 1, 1, "", "head"], [1184, 1, 1, "", "join"], [1185, 1, 1, "", "last"], [1186, 1, 1, "", "len"], [1187, 1, 1, "", "max"], [1188, 1, 1, "", "mean"], [1189, 1, 1, "", "median"], [1190, 1, 1, "", "min"], [1191, 1, 1, "", "n_unique"], [1192, 1, 1, "", "reverse"], [1193, 1, 1, "", "sample"], [1194, 1, 1, "", "set_difference"], [1195, 1, 1, "", "set_intersection"], [1196, 1, 1, "", "set_symmetric_difference"], [1197, 1, 1, "", "set_union"], [1198, 1, 1, "", "shift"], [1199, 1, 1, "", "slice"], [1200, 1, 1, "", "sort"], [1201, 1, 1, "", "std"], [1202, 1, 1, "", "sum"], [1203, 1, 1, "", "tail"], [1204, 1, 1, "", "to_array"], [1205, 1, 1, "", "to_struct"], [1206, 1, 1, "", "unique"], [1207, 1, 1, "", "var"]], "polars.Series.str": [[1278, 1, 1, "", "concat"], [1279, 1, 1, "", "contains"], [1280, 1, 1, "", "contains_any"], [1281, 1, 1, "", "count_matches"], [1282, 1, 1, "", "decode"], [1283, 1, 1, "", "encode"], [1284, 1, 1, "", "ends_with"], [1285, 1, 1, "", "escape_regex"], [1286, 1, 1, "", "explode"], [1287, 1, 1, "", "extract"], [1288, 1, 1, "", "extract_all"], [1289, 1, 1, "", "extract_groups"], [1290, 1, 1, "", "extract_many"], [1291, 1, 1, "", "find"], [1292, 1, 1, "", "find_many"], [1293, 1, 1, "", "head"], [1294, 1, 1, "", "join"], [1295, 1, 1, "", "json_decode"], [1296, 1, 1, "", "json_path_match"], [1297, 1, 1, "", "len_bytes"], [1298, 1, 1, "", "len_chars"], [1299, 1, 1, "", "normalize"], [1300, 1, 1, "", "pad_end"], [1301, 1, 1, "", "pad_start"], [1302, 1, 1, "", "replace"], [1303, 1, 1, "", "replace_all"], [1304, 1, 1, "", "replace_many"], [1305, 1, 1, "", "reverse"], [1306, 1, 1, "", "slice"], [1307, 1, 1, "", "split"], [1308, 1, 1, "", "split_exact"], [1309, 1, 1, "", "splitn"], [1310, 1, 1, "", "starts_with"], [1311, 1, 1, "", "strip_chars"], [1312, 1, 1, "", "strip_chars_end"], [1313, 1, 1, "", "strip_chars_start"], [1314, 1, 1, "", "strip_prefix"], [1315, 1, 1, "", "strip_suffix"], [1316, 1, 1, "", "strptime"], [1317, 1, 1, "", "tail"], [1318, 1, 1, "", "to_date"], [1319, 1, 1, "", "to_datetime"], [1320, 1, 1, "", "to_decimal"], [1321, 1, 1, "", "to_integer"], [1322, 1, 1, "", "to_lowercase"], [1323, 1, 1, "", "to_time"], [1324, 1, 1, "", "to_titlecase"], [1325, 1, 1, "", "to_uppercase"], [1326, 1, 1, "", "zfill"]], "polars.Series.struct": [[1327, 1, 1, "", "field"], [1328, 3, 1, "", "fields"], [1329, 1, 1, "", "json_encode"], [1330, 1, 1, "", "rename_fields"], [1331, 3, 1, "", "schema"], [1332, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.api": [[58, 4, 1, "", "register_dataframe_namespace"], [59, 4, 1, "", "register_expr_namespace"], [60, 4, 1, "", "register_lazyframe_namespace"], [61, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[196, 0, 1, "", "CatalogInfo"], [197, 0, 1, "", "ColumnInfo"], [198, 5, 1, "", "DataSourceFormat"], [199, 0, 1, "", "NamespaceInfo"], [200, 0, 1, "", "TableInfo"], [202, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[196, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[197, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[199, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[200, 1, 1, "", "__init__"], [201, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[330, 1, 1, "", "__iter__"], [331, 1, 1, "", "agg"], [332, 1, 1, "", "all"], [333, 1, 1, "", "count"], [334, 1, 1, "", "first"], [335, 1, 1, "", "head"], [336, 1, 1, "", "last"], [337, 1, 1, "", "len"], [338, 1, 1, "", "map_groups"], [339, 1, 1, "", "max"], [340, 1, 1, "", "mean"], [341, 1, 1, "", "median"], [342, 1, 1, "", "min"], [343, 1, 1, "", "n_unique"], [344, 1, 1, "", "quantile"], [345, 1, 1, "", "sum"], [346, 1, 1, "", "tail"]], "polars.datatypes": [[66, 0, 1, "", "Array"], [67, 0, 1, "", "Binary"], [68, 0, 1, "", "Boolean"], [69, 0, 1, "", "Categorical"], [70, 0, 1, "", "DataType"], [71, 0, 1, "", "Date"], [72, 0, 1, "", "Datetime"], [73, 0, 1, "", "Decimal"], [74, 0, 1, "", "Duration"], [75, 0, 1, "", "Enum"], [76, 0, 1, "", "Field"], [77, 0, 1, "", "Float32"], [78, 0, 1, "", "Float64"], [79, 0, 1, "", "Int128"], [80, 0, 1, "", "Int16"], [81, 0, 1, "", "Int32"], [82, 0, 1, "", "Int64"], [83, 0, 1, "", "Int8"], [84, 0, 1, "", "List"], [85, 0, 1, "", "Null"], [86, 0, 1, "", "Object"], [87, 0, 1, "", "String"], [88, 0, 1, "", "Struct"], [89, 0, 1, "", "Time"], [90, 0, 1, "", "UInt16"], [91, 0, 1, "", "UInt32"], [92, 0, 1, "", "UInt64"], [93, 0, 1, "", "UInt8"], [94, 0, 1, "", "Unknown"], [95, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[66, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[69, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[70, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[83, 1, 1, "", "__init__"]], "polars.datatypes.List": [[84, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[85, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[86, 1, 1, "", "__init__"]], "polars.datatypes.String": [[87, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[88, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[89, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[92, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[93, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[94, 1, 1, "", "__init__"]], "polars.exceptions": [[100, 6, 1, "", "CategoricalRemappingWarning"], [101, 6, 1, "", "ChronoFormatWarning"], [102, 6, 1, "", "ColumnNotFoundError"], [103, 6, 1, "", "ComputeError"], [104, 6, 1, "", "CustomUFuncWarning"], [105, 6, 1, "", "DataOrientationWarning"], [106, 6, 1, "", "DuplicateError"], [107, 6, 1, "", "InvalidOperationError"], [108, 6, 1, "", "MapWithoutReturnDtypeWarning"], [109, 6, 1, "", "ModuleUpgradeRequiredError"], [110, 6, 1, "", "NoDataError"], [111, 6, 1, "", "NoRowsReturnedError"], [112, 6, 1, "", "OutOfBoundsError"], [113, 6, 1, "", "PanicException"], [114, 6, 1, "", "ParameterCollisionError"], [115, 6, 1, "", "PerformanceWarning"], [116, 6, 1, "", "PolarsError"], [117, 6, 1, "", "PolarsInefficientMapWarning"], [118, 6, 1, "", "PolarsWarning"], [119, 6, 1, "", "RowsError"], [120, 6, 1, "", "SQLInterfaceError"], [121, 6, 1, "", "SQLSyntaxError"], [122, 6, 1, "", "SchemaError"], [123, 6, 1, "", "SchemaFieldNotFoundError"], [124, 6, 1, "", "ShapeError"], [125, 6, 1, "", "StringCacheMismatchError"], [126, 6, 1, "", "StructFieldNotFoundError"], [127, 6, 1, "", "TooManyRowsReturnedError"], [128, 6, 1, "", "UnstableWarning"], [129, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[140, 1, 1, "", "next_batches"]], "polars.io.parquet": [[141, 0, 1, "", "ParquetFieldOverwrites"]], "polars.io.parquet.ParquetFieldOverwrites": [[141, 1, 1, "", "__init__"]], "polars.io.partition": [[142, 0, 1, "", "BasePartitionContext"], [143, 0, 1, "", "KeyedPartition"], [144, 0, 1, "", "KeyedPartitionContext"]], "polars.io.partition.BasePartitionContext": [[142, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartition": [[143, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartitionContext": [[144, 1, 1, "", "__init__"]], "polars.io.plugins": [[145, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[937, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[937, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[938, 1, 1, "", "agg"], [939, 1, 1, "", "all"], [940, 1, 1, "", "count"], [941, 1, 1, "", "first"], [942, 1, 1, "", "head"], [943, 1, 1, "", "last"], [944, 1, 1, "", "len"], [945, 1, 1, "", "map_groups"], [946, 1, 1, "", "max"], [947, 1, 1, "", "mean"], [948, 1, 1, "", "median"], [949, 1, 1, "", "min"], [950, 1, 1, "", "n_unique"], [951, 1, 1, "", "quantile"], [952, 1, 1, "", "sum"], [953, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[954, 1, 1, "", "cancel"], [955, 1, 1, "", "fetch"], [956, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[147, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[968, 4, 1, "", "all"], [968, 4, 1, "", "alpha"], [968, 4, 1, "", "alphanumeric"], [968, 4, 1, "", "binary"], [968, 4, 1, "", "boolean"], [968, 4, 1, "", "by_dtype"], [968, 4, 1, "", "by_index"], [968, 4, 1, "", "by_name"], [968, 4, 1, "", "categorical"], [968, 4, 1, "", "contains"], [968, 4, 1, "", "date"], [968, 4, 1, "", "datetime"], [968, 4, 1, "", "decimal"], [968, 4, 1, "", "digit"], [968, 4, 1, "", "duration"], [968, 4, 1, "", "ends_with"], [968, 4, 1, "", "exclude"], [968, 4, 1, "", "expand_selector"], [968, 4, 1, "", "first"], [968, 4, 1, "", "float"], [968, 4, 1, "", "integer"], [968, 4, 1, "", "is_selector"], [968, 4, 1, "", "last"], [968, 4, 1, "", "matches"], [968, 4, 1, "", "numeric"], [968, 4, 1, "", "signed_integer"], [968, 4, 1, "", "starts_with"], [968, 4, 1, "", "string"], [968, 4, 1, "", "temporal"], [968, 4, 1, "", "time"], [968, 4, 1, "", "unsigned_integer"]], "polars.testing": [[174, 4, 1, "", "assert_frame_equal"], [175, 4, 1, "", "assert_frame_not_equal"], [176, 4, 1, "", "assert_series_equal"], [177, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[178, 0, 1, "", "column"], [179, 4, 1, "", "columns"], [180, 4, 1, "", "create_list_strategy"], [181, 4, 1, "", "dataframes"], [182, 4, 1, "", "dtypes"], [183, 4, 1, "", "lists"], [184, 4, 1, "", "load_profile"], [185, 4, 1, "", "series"], [186, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[178, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 12, 38, 39, 40, 41, 47, 48, 55, 61, 66, 76, 88, 96, 99, 101, 107, 131, 138, 145, 150, 151, 152, 153, 155, 156, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 185, 212, 213, 224, 225, 228, 233, 236, 241, 242, 247, 253, 256, 257, 267, 274, 276, 280, 282, 284, 287, 290, 291, 298, 307, 310, 315, 317, 318, 319, 320, 321, 326, 327, 352, 389, 422, 454, 459, 479, 482, 502, 508, 512, 525, 541, 562, 591, 592, 604, 613, 618, 625, 626, 633, 634, 645, 652, 654, 687, 691, 699, 700, 701, 703, 705, 714, 715, 718, 719, 721, 728, 729, 730, 731, 735, 739, 741, 743, 751, 760, 761, 762, 763, 768, 775, 778, 781, 782, 791, 792, 794, 795, 801, 806, 807, 808, 809, 811, 813, 814, 816, 823, 825, 827, 828, 829, 835, 841, 845, 861, 863, 874, 875, 884, 885, 889, 890, 899, 907, 912, 913, 919, 924, 925, 926, 927, 928, 931, 932, 945, 962, 967, 968, 972, 973, 974, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1071, 1072, 1073, 1075, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1087, 1088, 1091, 1093, 1095, 1096, 1097, 1100, 1108, 1110, 1111, 1112, 1113, 1118, 1119, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1131, 1132, 1134, 1135, 1137, 1139, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1362, 1367, 1371, 1375, 1378, 1385, 1386], "0": [1, 7, 9, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 41, 47, 51, 52, 57, 58, 59, 61, 63, 65, 66, 73, 84, 96, 132, 138, 146, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 224, 226, 227, 231, 232, 233, 235, 236, 239, 240, 241, 242, 243, 247, 248, 252, 254, 255, 256, 259, 261, 263, 264, 265, 266, 267, 270, 271, 272, 273, 276, 277, 278, 280, 282, 284, 286, 287, 288, 289, 290, 297, 298, 299, 300, 302, 307, 308, 309, 310, 311, 312, 314, 315, 316, 320, 322, 323, 326, 328, 329, 331, 333, 334, 336, 338, 339, 340, 341, 342, 343, 344, 345, 352, 355, 356, 360, 362, 363, 365, 369, 370, 371, 372, 373, 374, 377, 378, 379, 382, 383, 385, 388, 398, 401, 403, 410, 412, 417, 420, 422, 423, 429, 430, 431, 432, 433, 434, 441, 442, 443, 447, 448, 449, 455, 456, 460, 464, 466, 467, 471, 475, 478, 480, 482, 485, 486, 488, 489, 493, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 511, 512, 514, 516, 517, 519, 521, 523, 527, 528, 531, 534, 536, 537, 538, 539, 541, 543, 548, 549, 552, 555, 558, 559, 560, 566, 567, 579, 583, 585, 586, 587, 588, 590, 591, 593, 594, 595, 599, 604, 607, 610, 611, 612, 614, 616, 625, 626, 627, 628, 629, 631, 632, 634, 637, 638, 640, 641, 642, 643, 647, 648, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 681, 682, 683, 684, 688, 689, 690, 693, 698, 699, 700, 703, 704, 732, 743, 744, 745, 747, 748, 749, 751, 752, 757, 758, 760, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 777, 779, 786, 790, 793, 799, 800, 802, 803, 804, 807, 810, 811, 812, 816, 818, 819, 821, 822, 823, 824, 831, 832, 833, 834, 835, 836, 841, 845, 860, 861, 863, 864, 865, 866, 868, 870, 871, 873, 874, 876, 877, 879, 880, 881, 883, 884, 885, 888, 889, 893, 895, 898, 899, 902, 904, 905, 907, 910, 911, 912, 917, 919, 920, 921, 924, 929, 931, 933, 934, 935, 938, 940, 941, 943, 945, 946, 947, 948, 949, 950, 951, 952, 962, 967, 968, 972, 979, 980, 981, 982, 983, 984, 985, 987, 989, 992, 998, 1008, 1011, 1013, 1020, 1032, 1039, 1041, 1042, 1044, 1047, 1048, 1049, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1070, 1074, 1079, 1080, 1081, 1083, 1085, 1089, 1093, 1096, 1100, 1103, 1104, 1106, 1107, 1111, 1114, 1117, 1119, 1120, 1121, 1122, 1127, 1132, 1135, 1140, 1141, 1143, 1146, 1147, 1151, 1154, 1156, 1157, 1158, 1159, 1162, 1163, 1170, 1171, 1174, 1177, 1180, 1181, 1182, 1188, 1189, 1201, 1205, 1207, 1208, 1209, 1210, 1211, 1215, 1216, 1222, 1223, 1229, 1232, 1234, 1235, 1236, 1241, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1270, 1271, 1272, 1273, 1276, 1277, 1278, 1281, 1286, 1287, 1288, 1291, 1292, 1296, 1302, 1320, 1335, 1336, 1338, 1341, 1343, 1344, 1345, 1346, 1350, 1352, 1362, 1367, 1371, 1377, 1379, 1380, 1381, 1384, 1385, 1387, 1388, 1390, 1392, 1393], "00": [28, 41, 72, 213, 220, 242, 322, 352, 450, 451, 454, 458, 469, 470, 472, 476, 477, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 657, 659, 661, 663, 665, 668, 670, 672, 728, 731, 735, 786, 787, 788, 789, 803, 831, 832, 833, 845, 863, 871, 885, 962, 968, 1064, 1065, 1068, 1069, 1070, 1072, 1073, 1074, 1080, 1081, 1085, 1087, 1088, 1089, 1090, 1094, 1095, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1111, 1302, 1316, 1319, 1323, 1385], "000": [9, 11, 28, 41, 53, 352, 1302, 1393], "0000": [314, 352, 1346, 1362, 1393], "000000": [406, 407, 482, 694, 1016, 1017, 1282], "00000001": [12, 759, 845], "00000010": [759, 845], "00000011": [759, 845], "00000100": [759, 845], "00001000": [759, 845], "00001010": [759, 845], "00001011": [759, 845], "0000e": 12, "0000ff": [406, 407, 694, 1016, 1017, 1282], "0001": 482, "000100": 482, "000101": 482, "0005": 968, "00050": 968, "000800": 1100, "001": [59, 738, 789, 1103, 1104, 1106, 1326], "002": [789, 1103, 1104, 1106], "005": [1114, 1362], "00prefix": 968, "00z": [728, 731, 1316, 1319], "01": [29, 57, 71, 72, 181, 213, 220, 240, 242, 257, 284, 322, 352, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 728, 730, 731, 735, 770, 783, 784, 785, 786, 787, 788, 789, 803, 845, 863, 871, 885, 890, 910, 962, 968, 1063, 1065, 1067, 1068, 1069, 1070, 1073, 1074, 1080, 1081, 1085, 1087, 1088, 1089, 1090, 1093, 1094, 1095, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1111, 1316, 1318, 1319, 1323, 1385, 1388], "010": [9, 733, 1321], "01000": 29, "01000010": [759, 845], "01000110": [759, 845], "012": [674, 711, 845, 1259, 1299, 1362], "0123": [738, 1326], "01234": [674, 845, 1259, 1362], "012345": 1100, "015625": [1232, 1362], "01\u00b2": [711, 1299], "02": [57, 213, 220, 240, 242, 284, 322, 352, 449, 451, 453, 459, 469, 470, 472, 476, 481, 482, 484, 487, 489, 493, 653, 657, 659, 661, 663, 665, 668, 670, 672, 673, 728, 730, 731, 735, 770, 783, 784, 785, 786, 787, 788, 789, 803, 845, 863, 871, 885, 910, 962, 968, 1011, 1065, 1067, 1069, 1070, 1073, 1074, 1080, 1081, 1085, 1087, 1088, 1089, 1093, 1094, 1095, 1098, 1099, 1102, 1105, 1107, 1108, 1205, 1316, 1318, 1319, 1323, 1385, 1386], "03": [57, 138, 150, 213, 242, 257, 284, 322, 352, 451, 453, 454, 459, 461, 469, 470, 472, 475, 476, 477, 479, 481, 482, 483, 484, 487, 489, 490, 493, 499, 512, 653, 657, 659, 661, 663, 665, 668, 670, 672, 730, 735, 783, 784, 785, 786, 787, 788, 789, 845, 863, 885, 890, 910, 962, 968, 1065, 1067, 1068, 1073, 1074, 1080, 1081, 1087, 1088, 1089, 1094, 1095, 1097, 1099, 1101, 1102, 1105, 1107, 1318, 1323], "037037": [1232, 1362], "04": [171, 213, 220, 242, 322, 352, 453, 454, 469, 470, 475, 476, 477, 479, 483, 484, 487, 489, 493, 657, 659, 661, 663, 665, 668, 670, 672, 728, 770, 783, 786, 787, 789, 845, 863, 871, 885, 962, 968, 1068, 1081, 1085, 1087, 1088, 1089, 1094, 1097, 1101, 1102, 1105, 1107, 1111, 1316, 1385], "047198": 1387, "05": [17, 171, 174, 175, 176, 177, 181, 213, 220, 322, 352, 449, 452, 453, 454, 455, 456, 460, 461, 464, 465, 466, 467, 469, 470, 471, 476, 478, 479, 480, 482, 483, 770, 783, 784, 786, 787, 863, 871, 962, 968, 1067, 1068, 1069, 1070, 1094, 1095, 1097, 1098, 1100, 1101, 1108, 1385, 1386, 1388], "050545": 138, "0522623626787952": [1163, 1362], "0545": [1069, 1070, 1098], "05t10": 1100, "06": [181, 213, 322, 352, 449, 453, 468, 474, 476, 477, 478, 490, 491, 783, 786, 803, 863, 962, 968, 1063, 1094, 1095, 1100, 1108], "060": [455, 456, 460, 464, 466, 467, 471, 478, 480], "0601749420166": [228, 352], "06293300616044681": [1114, 1362], "07": [17, 150, 181, 220, 352, 449, 452, 453, 465, 476, 477, 482, 490, 728, 783, 784, 786, 787, 795, 871, 962, 968, 1063, 1067, 1094, 1100, 1316, 1385, 1388], "071068": [220, 352, 871, 962], "08": [150, 174, 175, 176, 177, 220, 257, 284, 299, 352, 449, 453, 469, 470, 477, 482, 653, 728, 787, 789, 803, 845, 871, 890, 910, 962, 968, 1063, 1095, 1108, 1316, 1385, 1386], "085537": [1123, 1362], "09": [57, 150, 220, 284, 352, 449, 453, 469, 470, 482, 633, 653, 732, 783, 784, 786, 833, 845, 871, 910, 962, 968, 1063, 1320], "090909": [634, 845], "094395": 1387, "098612": [588, 845, 1208, 1210, 1362, 1384], "0999": [452, 465], "0_": [41, 352], "0m": [458, 1072], "0x11bc0ad80": 967, "0\u00b5": 482, "1": [1, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 51, 52, 57, 58, 59, 60, 61, 63, 65, 66, 84, 88, 96, 102, 105, 106, 107, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 151, 154, 155, 156, 159, 160, 161, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 181, 185, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 410, 412, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 600, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 696, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 714, 715, 716, 720, 721, 722, 723, 724, 725, 732, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 841, 845, 860, 861, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 962, 968, 972, 973, 974, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1020, 1031, 1032, 1036, 1037, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1134, 1135, 1137, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1166, 1167, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1287, 1289, 1290, 1291, 1292, 1294, 1295, 1296, 1297, 1298, 1302, 1303, 1304, 1308, 1309, 1320, 1326, 1327, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1362, 1367, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393], "10": [14, 17, 18, 28, 36, 38, 40, 41, 43, 44, 47, 57, 65, 138, 150, 151, 153, 165, 173, 215, 220, 224, 230, 239, 240, 242, 244, 246, 247, 248, 253, 257, 260, 271, 275, 277, 282, 284, 290, 299, 303, 326, 331, 334, 336, 339, 340, 341, 342, 343, 344, 345, 352, 363, 367, 375, 376, 377, 379, 431, 437, 440, 445, 449, 450, 452, 453, 455, 456, 458, 460, 464, 465, 466, 467, 469, 470, 471, 475, 476, 477, 478, 480, 482, 490, 493, 499, 520, 521, 522, 527, 533, 545, 553, 559, 561, 567, 577, 579, 581, 585, 587, 603, 605, 616, 631, 633, 634, 637, 647, 648, 653, 685, 733, 743, 746, 759, 770, 771, 779, 784, 786, 787, 790, 793, 795, 797, 805, 806, 830, 833, 845, 866, 867, 871, 874, 885, 886, 888, 890, 894, 903, 904, 910, 912, 922, 923, 931, 938, 941, 943, 946, 947, 948, 949, 950, 951, 952, 962, 968, 1045, 1059, 1063, 1064, 1066, 1067, 1072, 1082, 1094, 1100, 1108, 1111, 1114, 1120, 1142, 1153, 1167, 1175, 1183, 1189, 1199, 1201, 1203, 1207, 1209, 1213, 1229, 1242, 1261, 1263, 1321, 1334, 1341, 1343, 1346, 1362, 1371, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1388, 1393], "100": [11, 18, 28, 41, 53, 134, 137, 146, 150, 151, 152, 155, 159, 160, 161, 165, 169, 258, 276, 295, 352, 482, 647, 648, 678, 692, 702, 704, 707, 716, 732, 788, 845, 891, 916, 962, 968, 1116, 1209, 1225, 1241, 1242, 1249, 1250, 1252, 1266, 1280, 1292, 1295, 1304, 1320, 1362, 1382, 1393], "1000": [152, 228, 308, 329, 352, 368, 845, 935, 962, 1103, 1209, 1340, 1362, 1393], "10000": [150, 255, 352], "100000": [11, 28], "1000000": [12, 1106], "1001": [329, 352, 935, 962], "1002": [329, 352, 935, 962], "10047419486152048166": [243, 352], "1005": [368, 845], "100_000": [53, 823, 895, 962], "100\u00b5": 482, "101": [9, 28, 258, 352, 453, 482, 733, 891, 962, 968, 1321, 1393], "101000": 453, "10101": [28, 1388], "1010101": 9, "101514": [220, 352, 871, 962], "102": [258, 352, 891, 962], "1024": [38, 47, 48, 51, 150, 151, 152, 160, 169, 352, 410, 962, 1020], "1040361802642717": [1163, 1362], "107149": 1387, "10734580197236529959": [1141, 1362], "1073741824": [679, 845], "10783150408545073287": [243, 352], "107_930_000": 1371, "10_000": [41, 352], "10i": [242, 352, 885, 962], "10m": [477, 490, 1095, 1108], "10t00": 482, "11": [11, 17, 47, 51, 173, 181, 211, 220, 257, 284, 352, 363, 469, 470, 472, 477, 490, 514, 527, 559, 610, 634, 643, 653, 655, 669, 685, 759, 803, 828, 833, 841, 845, 860, 866, 867, 871, 886, 890, 894, 904, 910, 923, 962, 968, 1090, 1095, 1108, 1213, 1248, 1362, 1380], "110": [224, 352, 716, 733, 874, 962, 1321], "1101441246220388612": [521, 845], "111": [11, 1382], "11111": 1096, "111110": 1096, "11111001": [759, 845], "11111010": [759, 845], "11111111": 11, "112": [679, 845, 1393], "11330": 180, "1152921504606846976": [1238, 1362], "116": 180, "11638928888656214026": [521, 845], "118034": [921, 962], "11aa": 1385, "11aabb": 1385, "11h": [450, 1064], "12": [27, 41, 57, 138, 150, 173, 181, 220, 242, 253, 257, 258, 284, 299, 322, 352, 363, 439, 449, 450, 452, 453, 457, 465, 468, 469, 470, 472, 473, 474, 475, 477, 482, 490, 491, 492, 499, 527, 559, 591, 607, 634, 642, 653, 669, 679, 693, 714, 732, 780, 783, 786, 787, 788, 803, 806, 831, 832, 833, 845, 871, 885, 886, 890, 891, 894, 910, 917, 923, 962, 968, 1064, 1066, 1067, 1079, 1080, 1082, 1086, 1093, 1095, 1100, 1108, 1120, 1213, 1258, 1281, 1303, 1320, 1362, 1384, 1385, 1386, 1388, 1390, 1393], "120": [258, 352, 789, 891, 962, 1387], "1200": [674, 845], "120134": [732, 1320], "121": 1393, "123": [9, 600, 693, 700, 715, 738, 835, 968, 1281, 1288, 1326, 1339, 1362], "123000": 968, "1232e": [1047, 1049, 1362], "1234": [28, 674, 845], "12345": [795, 1042, 1100, 1132, 1258, 1362], "1234500": 968, "123456": [9, 968], "1234567": 28, "123456780": 138, "12346": 795, "123465": 968, "123a123": 715, "123abc": [714, 1302, 1303], "125": [1, 41, 61, 352, 361, 638, 824, 845, 920, 962, 1229, 1232, 1362], "1252": 150, "127": [1350, 1362, 1381], "128": [59, 73, 79, 1229, 1362], "129": [679, 845], "13": [141, 214, 215, 220, 231, 232, 239, 258, 259, 271, 284, 326, 334, 336, 339, 340, 341, 342, 343, 344, 345, 352, 363, 449, 455, 456, 460, 464, 466, 467, 471, 478, 480, 603, 605, 653, 732, 773, 779, 782, 786, 793, 829, 831, 834, 845, 864, 865, 871, 879, 880, 891, 893, 910, 931, 941, 943, 946, 947, 948, 949, 950, 951, 952, 962, 1063, 1095, 1108, 1109, 1213, 1320, 1362, 1381], "130": [258, 352, 891, 962], "13382926553367784577": [521, 845], "134821952": 1371, "134_821_952": 1371, "135": [767, 1387], "13614470193936745724": [521, 845], "13756996518000038261": [1141, 1362], "13d": 482, "13h": [450, 1064], "14": [40, 173, 220, 242, 258, 261, 284, 322, 334, 336, 339, 340, 341, 342, 343, 344, 345, 352, 450, 455, 456, 460, 464, 466, 467, 471, 478, 480, 482, 527, 600, 643, 786, 831, 832, 845, 871, 885, 891, 910, 941, 943, 946, 947, 948, 949, 950, 951, 952, 962, 968, 1064, 1095, 1100], "140": [258, 352, 891, 962], "141592653589793": 11, "141593": [642, 845, 979, 1362, 1384, 1387], "142857": [1229, 1362], "143": [732, 1320, 1393], "1433": [39, 352], "1436e16": 181, "1438741209321515184": [243, 352], "1440": [487, 1105], "1443e235": 1393, "149": 1393, "14d": 968, "14h": 482, "15": [11, 41, 141, 173, 220, 242, 258, 261, 284, 352, 441, 445, 470, 475, 477, 482, 490, 499, 637, 653, 669, 711, 780, 786, 831, 832, 845, 871, 885, 891, 910, 962, 968, 1056, 1059, 1095, 1100, 1108, 1120, 1299, 1362, 1381, 1385], "150": [258, 352, 891, 962, 1250, 1362], "1500": [173, 184], "15000": [255, 352], "153061": [541, 845], "155": 146, "15836": 181, "15_000": [255, 352], "16": [1, 41, 59, 80, 90, 173, 187, 220, 242, 258, 284, 326, 352, 437, 440, 475, 482, 527, 607, 614, 633, 638, 653, 733, 743, 779, 789, 790, 793, 803, 845, 871, 885, 891, 910, 917, 931, 962, 968, 1095, 1108, 1229, 1271, 1321, 1335, 1362, 1381, 1384, 1385, 1390], "160": [258, 352, 891, 962], "165": [1095, 1108], "1656e15": [1049, 1362], "166667": [1229, 1362], "1666683077": 795, "1666683099": 795, "167": 57, "16996": 1393, "16h": 968, "17": [138, 173, 181, 228, 257, 331, 352, 499, 525, 633, 655, 673, 775, 795, 832, 845, 890, 938, 962, 1047, 1049, 1095, 1120, 1145, 1248, 1362, 1393], "170": [146, 258, 352, 891, 962], "17293822569102704640": [1238, 1362], "174": 1393, "175201": [683, 845, 1272, 1362], "1755e": [178, 181], "1764": 61, "17888890": [228, 352], "179": 1393, "17_500": [255, 352], "18": [39, 138, 155, 220, 268, 284, 352, 440, 477, 490, 493, 527, 616, 633, 653, 743, 845, 871, 900, 904, 910, 962, 968, 1100, 1111, 1379, 1390], "180": [146, 443, 642, 845, 1387], "1800": [475, 1093], "1844": 181, "18446744073709551614": [1238, 1362], "185_000_000": 1371, "186": 1393, "1875": [671, 845, 929, 962], "1897": [452, 465, 1066, 1082], "18d": 968, "19": [181, 257, 284, 352, 452, 477, 653, 659, 661, 663, 665, 732, 845, 890, 910, 962, 1066, 1095, 1108, 1320], "1920": 1385, "196": 1386, "1964": [904, 962], "1969": [1385, 1386], "1970": [71, 72, 171, 490, 1108, 1371], "1972": 1371, "1976": [463, 494], "1977": [463, 494], "1978": [455, 456, 460, 463, 464, 466, 467, 471, 478, 480, 494, 1386], "1979": [463, 494], "1980": 482, "1985": [784, 787], "1990": [150, 1371], "1993": 1371, "1994": 1371, "1995": 150, "1998": [472, 1090], "1999": [299, 352, 472, 482, 968, 1090, 1100, 1388], "199992": [895, 962], "199994": [895, 962], "199996": [895, 962], "199998": [895, 962], "1_000_000": [228, 352, 1118, 1362], "1_234_500": 968, "1d": [242, 257, 284, 322, 352, 451, 472, 477, 482, 484, 487, 490, 493, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 789, 805, 832, 833, 845, 885, 890, 910, 962, 968, 1065, 1073, 1080, 1090, 1095, 1099, 1102, 1105, 1108, 1120, 1362], "1e": [12, 174, 175, 176, 177], "1e6": 12, "1h": [242, 257, 284, 322, 352, 458, 472, 477, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1072, 1074, 1090, 1095, 1108, 1120, 1362], "1i": [242, 284, 322, 352, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 845, 885, 910, 962, 1120, 1362], "1m": [242, 257, 284, 322, 352, 472, 477, 489, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1090, 1095, 1103, 1104, 1106, 1107, 1108, 1120, 1362], "1mo": [242, 257, 284, 322, 352, 454, 469, 470, 472, 476, 477, 483, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1068, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1101, 1108, 1109, 1120, 1362], "1n": [242, 257, 284, 322, 352, 472, 477, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1090, 1095, 1108, 1120, 1362], "1q": [242, 257, 284, 322, 352, 472, 477, 490, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1090, 1095, 1108], "1st_col": 968, "1u": [242, 257, 284, 322, 352, 472, 477, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1090, 1095, 1108, 1120, 1362], "1w": [242, 257, 284, 322, 352, 472, 477, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1090, 1095, 1108, 1120, 1362], "1w2d": [784, 785], "1y": [242, 257, 284, 322, 352, 472, 477, 490, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1090, 1095, 1108], "1y2mo": [472, 1090], "1zy3": [693, 1281], "2": [1, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 65, 66, 84, 88, 102, 105, 107, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 153, 159, 160, 162, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 183, 195, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 355, 356, 360, 361, 362, 363, 365, 367, 368, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 410, 412, 417, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 449, 450, 452, 453, 454, 455, 456, 457, 458, 461, 462, 465, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 607, 608, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 699, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 819, 823, 824, 825, 826, 827, 828, 830, 833, 834, 835, 841, 845, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 962, 967, 968, 972, 973, 974, 977, 980, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1019, 1020, 1031, 1037, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1064, 1067, 1069, 1070, 1072, 1074, 1075, 1078, 1079, 1080, 1082, 1084, 1085, 1086, 1087, 1088, 1092, 1093, 1094, 1095, 1098, 1108, 1110, 1111, 1112, 1113, 1114, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1134, 1135, 1137, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1166, 1167, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1269, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1281, 1287, 1289, 1291, 1292, 1293, 1295, 1296, 1298, 1299, 1302, 1303, 1308, 1309, 1311, 1312, 1313, 1316, 1317, 1319, 1320, 1321, 1322, 1325, 1327, 1329, 1330, 1332, 1333, 1334, 1335, 1337, 1338, 1339, 1340, 1342, 1343, 1344, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1362, 1367, 1371, 1372, 1374, 1375, 1377, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393], "20": [39, 40, 41, 66, 138, 150, 151, 155, 156, 158, 162, 165, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 188, 211, 220, 224, 230, 242, 246, 268, 275, 277, 282, 284, 299, 309, 310, 314, 322, 328, 333, 352, 375, 376, 377, 431, 445, 452, 455, 456, 460, 464, 465, 466, 467, 471, 477, 478, 480, 482, 490, 493, 514, 521, 527, 591, 599, 610, 637, 657, 659, 661, 663, 665, 668, 670, 672, 698, 732, 743, 758, 786, 795, 805, 824, 832, 845, 860, 871, 874, 877, 885, 900, 903, 910, 920, 934, 940, 962, 968, 1059, 1066, 1070, 1082, 1095, 1100, 1108, 1111, 1117, 1123, 1140, 1241, 1286, 1320, 1341, 1343, 1346, 1362, 1378, 1379, 1382, 1388, 1390], "200": [485, 486, 488, 647, 648, 845, 968, 1116, 1225, 1241, 1242, 1249, 1250, 1252, 1362, 1382], "2000": [452, 462, 465, 469, 470, 472, 968, 1066, 1076, 1082, 1087, 1088, 1090, 1096, 1371, 1385], "200000": [485, 895, 962], "200000000": 488, "2001": [17, 451, 452, 457, 459, 462, 465, 468, 472, 473, 474, 477, 481, 490, 491, 492, 493, 657, 659, 661, 663, 665, 668, 670, 672, 728, 845, 968, 1065, 1066, 1071, 1073, 1074, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1089, 1090, 1091, 1092, 1095, 1099, 1108, 1109, 1110, 1111, 1112, 1316], "2002": [150, 462, 472, 1076, 1090, 1112], "2003": [472, 795, 1090], "2004": [472, 1090], "2005": [472, 1090], "2006": [472, 1090], "2008": 1371, "200m": [485, 486, 488], "2010": [299, 352, 482, 968], "2011": [450, 1064], "2012": [450, 1064, 1388], "2013": 1093, "2016": [257, 352, 890, 962], "2017": [257, 352, 890, 962], "2018": [257, 352, 476, 890, 962, 1094], "2019": [257, 352, 890, 962], "202": 1386, "2020": [154, 166, 213, 220, 240, 257, 284, 352, 355, 449, 454, 458, 461, 476, 479, 482, 483, 484, 485, 486, 487, 488, 489, 499, 653, 728, 730, 731, 770, 845, 863, 871, 890, 910, 962, 968, 1063, 1068, 1072, 1075, 1094, 1097, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1120, 1316, 1318, 1319, 1362, 1386], "2021": [213, 220, 240, 242, 322, 352, 728, 805, 863, 871, 885, 962, 968, 1069, 1070, 1077, 1098, 1316, 1385], "2022": [57, 213, 220, 240, 352, 453, 477, 490, 728, 784, 785, 787, 788, 789, 795, 863, 871, 962, 968, 1067, 1077, 1095, 1108, 1316], "2023": [17, 41, 138, 173, 255, 352, 453, 789, 805, 968, 1067], "2024": [173, 449, 455, 456, 460, 461, 464, 466, 467, 471, 475, 478, 480, 633, 770, 783, 784, 786, 787, 789, 845, 968, 1063, 1075, 1093, 1385, 1388], "2025": [449, 461, 475, 770, 803, 968, 1063, 1075], "2026": 1386, "2030": 1385, "2031": 968, "2040": 482, "2047317070637311557": [243, 352], "2055938745": 138, "2065": [455, 456, 460, 464, 466, 467, 471, 478, 480], "2068": 181, "207": 1386, "2077": [299, 352, 482, 968, 1100, 1385, 1386], "2095": 181, "20_000": [41, 352], "20t08": 482, "20t18": 1100, "20word": 153, "21": [173, 220, 268, 301, 352, 441, 452, 498, 500, 501, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 786, 795, 803, 821, 822, 845, 871, 900, 962, 968, 1056, 1066, 1119, 1121, 1122, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1362, 1379], "213": 1393, "2147483647": 1393, "2147483648": [1211, 1362], "21d": 968, "22": [47, 51, 173, 181, 352, 457, 473, 477, 490, 492, 493, 655, 657, 659, 661, 663, 665, 668, 670, 672, 728, 786, 841, 845, 962, 968, 1095, 1108, 1111, 1248, 1316, 1362, 1385, 1386, 1393], "221": 1393, "2246e": [1271, 1335, 1362], "225": [477, 490, 1387], "22500": 823, "22_000_000": 1371, "22_500": 823, "23": [11, 132, 181, 220, 242, 284, 314, 352, 453, 457, 460, 473, 475, 477, 482, 492, 653, 657, 659, 661, 663, 665, 668, 670, 672, 786, 789, 831, 832, 833, 845, 871, 885, 910, 920, 962, 968, 1067, 1074, 1093, 1346, 1362, 1392, 1393], "230498": 12, "230498095872587": 12, "2304980958725870923": 12, "232338648": 1371, "2337": [41, 352], "234": 28, "2345": 968, "23456789": 11, "235": 1393, "23h": 968, "24": [59, 173, 242, 256, 257, 261, 284, 299, 322, 352, 439, 441, 457, 472, 473, 477, 484, 490, 492, 614, 653, 657, 659, 661, 663, 665, 668, 670, 672, 711, 784, 785, 787, 788, 789, 832, 833, 845, 885, 889, 890, 910, 962, 1056, 1090, 1095, 1102, 1108, 1162, 1337, 1362, 1385, 1392], "24030": 180, "249": [759, 845], "25": [1, 28, 41, 61, 138, 220, 224, 242, 247, 257, 284, 309, 314, 322, 326, 352, 410, 445, 457, 458, 473, 477, 482, 490, 492, 499, 638, 640, 643, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 752, 786, 787, 788, 789, 795, 803, 804, 807, 832, 833, 845, 871, 874, 885, 890, 897, 910, 929, 931, 962, 968, 1020, 1058, 1059, 1072, 1095, 1100, 1108, 1114, 1120, 1143, 1229, 1234, 1302, 1362, 1379, 1384, 1390, 1391], "250": [759, 845, 1250, 1362, 1382, 1393], "2500": [255, 314, 352], "254508": [499, 845, 1120, 1362], "255": 1393, "256": [261, 352, 410, 1020, 1229, 1362, 1384], "2560": 1020, "259921": [429, 845, 1041, 1362, 1384], "25_000_000": 1371, "26": [39, 41, 173, 178, 179, 180, 181, 185, 220, 352, 458, 491, 871, 962, 1072], "266667": [220, 352, 871, 962], "27": [1, 61, 309, 345, 352, 440, 468, 474, 491, 743, 770, 845, 952, 968, 1063, 1232, 1341, 1362, 1392, 1393], "270": 1387, "28": [305, 310, 352, 361, 476, 493, 845, 1094, 1111, 1343, 1362, 1385, 1387, 1392, 1393], "283185": [642, 845], "2846": 352, "285714": [528, 845, 1147, 1362], "289962": 1387, "28_341_469": 1371, "29": [17, 173, 450, 469, 1064, 1087], "29096": 1393, "290994": [921, 962], "292432": [980, 1362], "292893": [499, 845, 1120, 1362], "2_color_scal": [41, 352], "2d": [284, 309, 310, 352, 472, 653, 805, 845, 910, 962, 1064, 1071], "2h": [657, 659, 661, 663, 665, 668, 670, 672, 845], "2i": [242, 352, 885, 962], "2m": [968, 1085], "2x": 180, "3": [1, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 57, 58, 59, 60, 61, 65, 66, 84, 96, 102, 105, 107, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 153, 155, 159, 160, 161, 165, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 185, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 355, 356, 361, 362, 363, 364, 366, 377, 378, 379, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 410, 411, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 612, 613, 614, 615, 616, 617, 619, 621, 623, 624, 627, 630, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 686, 687, 688, 691, 692, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 729, 730, 735, 736, 739, 740, 741, 742, 743, 744, 746, 750, 751, 754, 755, 756, 758, 759, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 841, 845, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 938, 939, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 962, 967, 968, 973, 974, 977, 979, 981, 982, 983, 985, 986, 987, 988, 989, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1021, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1067, 1068, 1071, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1084, 1085, 1086, 1091, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1103, 1104, 1106, 1108, 1110, 1111, 1113, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1134, 1135, 1137, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1166, 1167, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1280, 1282, 1283, 1284, 1287, 1288, 1289, 1292, 1293, 1294, 1295, 1297, 1298, 1302, 1303, 1304, 1305, 1306, 1310, 1317, 1318, 1323, 1324, 1327, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1342, 1343, 1344, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1362, 1367, 1371, 1372, 1374, 1375, 1377, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393], "30": [41, 63, 220, 230, 242, 246, 275, 282, 305, 326, 352, 355, 375, 376, 377, 445, 453, 455, 456, 460, 464, 466, 467, 468, 469, 471, 474, 476, 477, 478, 480, 482, 483, 490, 491, 521, 599, 679, 786, 803, 805, 831, 832, 845, 866, 871, 877, 885, 903, 904, 917, 931, 962, 968, 1059, 1067, 1087, 1094, 1095, 1100, 1101, 1108, 1140, 1362, 1367, 1378, 1379, 1382, 1384, 1385, 1387, 1388, 1391, 1393], "300": [305, 352, 520, 631, 648, 845, 968, 1242, 1249, 1250, 1252, 1362, 1382], "3000": 968, "3002": [452, 465, 1066, 1082], "30103": [587, 845, 1384], "3022416320763508302": [1141, 1362], "30_000": [41, 352], "30m": [242, 352, 477, 490, 885, 962, 1095, 1108], "30t16": 482, "31": [61, 66, 150, 151, 165, 174, 175, 176, 177, 220, 299, 352, 452, 453, 457, 465, 469, 472, 475, 483, 698, 728, 783, 786, 795, 805, 824, 871, 962, 968, 1064, 1066, 1067, 1071, 1082, 1087, 1093, 1100, 1101, 1117, 1241, 1286, 1316, 1362, 1386, 1388, 1390, 1393], "31t06": 1100, "32": [59, 71, 77, 81, 91, 252, 257, 284, 352, 614, 653, 679, 845, 890, 910, 962, 1060, 1091, 1229, 1253, 1362, 1379, 1385], "321": [28, 1393], "3212": [732, 1320], "321cba": 1385, "3265500": 968, "32971": [493, 1111], "32974": [493, 1111], "32976": [493, 1111], "32bit": [309, 352], "33": [220, 268, 352, 673, 845, 871, 900, 962, 1253, 1362, 1386], "333": [17, 674, 845, 1116, 1225, 1259, 1362], "33333": 1388, "333333": [248, 352, 616, 803, 888, 962, 1229, 1257, 1362, 1379], "34": [220, 352, 714, 728, 871, 962, 1303, 1316], "3420": [732, 1320], "343622": [684, 845], "345": [426, 427, 709, 710, 1036, 1037, 1297, 1298], "3450": [1259, 1362], "3456": 968, "34776706224699483": [1273, 1362], "35": [41, 352, 445, 482, 786, 845, 1059, 1362], "350": [352, 355, 520, 631, 845, 1250, 1362, 1367], "3500": [1259, 1362], "356": [457, 473, 492], "356194": [766, 767, 1387], "357": [457, 473, 492], "358": [457, 473, 492], "359": [457, 473, 492], "36": [220, 352, 871, 962, 1390], "360": [443, 642, 845, 1387], "361": 1393, "363961": [579, 1201], "366": [473, 1091], "37": [13, 141, 968], "370h": [499, 845, 1120, 1362], "37338": 1393, "38": [41, 138, 178, 181, 352], "38180177416060584": [666, 845, 1254, 1362], "381802": [666, 845, 1254, 1362], "386294": [588, 845, 1210, 1362, 1384], "389056": [503, 845, 1123, 1362, 1384], "39": [670, 795, 845], "39m": 968, "3_color_scal": [41, 352], "3d12h4m25": [242, 257, 284, 322, 352, 477, 490, 499, 653, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1095, 1108, 1120, 1362], "3f": [153, 728, 731, 1316, 1319], "3i": [242, 284, 352, 885, 962], "3rd": [1293, 1317], "3xy": [693, 1281], "4": [1, 8, 10, 14, 18, 26, 36, 38, 40, 41, 43, 44, 47, 57, 58, 59, 60, 61, 65, 66, 84, 105, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 151, 156, 158, 162, 165, 168, 169, 170, 173, 185, 209, 210, 211, 212, 213, 214, 215, 219, 221, 225, 229, 230, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 268, 270, 271, 272, 274, 275, 276, 277, 280, 284, 286, 287, 294, 295, 298, 302, 303, 304, 305, 306, 307, 310, 313, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 331, 332, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 355, 356, 360, 361, 362, 363, 365, 367, 379, 386, 387, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 403, 410, 421, 422, 423, 426, 427, 429, 430, 431, 435, 436, 439, 440, 441, 443, 446, 453, 456, 457, 465, 473, 474, 475, 476, 477, 478, 479, 482, 484, 487, 489, 490, 492, 496, 497, 499, 503, 504, 506, 507, 508, 510, 511, 512, 515, 516, 517, 518, 519, 522, 524, 526, 527, 528, 529, 538, 539, 543, 544, 545, 552, 553, 554, 555, 556, 558, 559, 561, 569, 571, 572, 573, 574, 575, 576, 577, 581, 582, 587, 590, 591, 592, 612, 614, 616, 617, 619, 621, 623, 624, 627, 628, 629, 632, 633, 635, 636, 637, 638, 641, 643, 647, 648, 649, 650, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 678, 681, 685, 686, 687, 688, 691, 693, 697, 700, 703, 705, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 726, 727, 728, 729, 733, 738, 739, 741, 742, 743, 744, 746, 749, 750, 751, 752, 758, 759, 761, 763, 764, 766, 767, 768, 769, 771, 772, 773, 774, 775, 777, 779, 780, 781, 782, 783, 786, 787, 788, 790, 792, 793, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 841, 845, 860, 861, 863, 864, 865, 866, 867, 870, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 903, 904, 905, 907, 910, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 934, 935, 938, 939, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 962, 967, 968, 972, 977, 980, 987, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1020, 1031, 1036, 1037, 1042, 1043, 1045, 1051, 1056, 1058, 1060, 1070, 1074, 1081, 1082, 1083, 1085, 1086, 1087, 1088, 1089, 1092, 1094, 1095, 1097, 1102, 1105, 1107, 1108, 1109, 1110, 1117, 1120, 1124, 1125, 1127, 1128, 1134, 1135, 1137, 1142, 1143, 1146, 1147, 1148, 1149, 1153, 1156, 1157, 1158, 1159, 1161, 1167, 1174, 1175, 1176, 1177, 1178, 1183, 1187, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1203, 1204, 1219, 1222, 1223, 1226, 1229, 1230, 1231, 1232, 1236, 1237, 1241, 1242, 1243, 1246, 1247, 1251, 1253, 1254, 1255, 1256, 1257, 1260, 1262, 1266, 1267, 1270, 1273, 1274, 1275, 1279, 1281, 1285, 1288, 1291, 1293, 1297, 1298, 1300, 1301, 1306, 1308, 1309, 1314, 1315, 1316, 1317, 1321, 1326, 1327, 1330, 1332, 1334, 1340, 1343, 1345, 1347, 1353, 1362, 1367, 1371, 1372, 1374, 1375, 1377, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1390, 1391, 1392, 1393], "40": [41, 220, 230, 257, 275, 352, 477, 482, 490, 521, 585, 732, 743, 845, 871, 890, 903, 962, 968, 1077, 1108, 1207, 1320, 1378, 1379, 1382, 1385], "400": [321, 352, 485, 486, 488, 928, 962, 1249, 1250, 1252, 1362, 1382], "4000000": [1118, 1362], "400157": 96, "404": [258, 352, 699, 701, 891, 962, 1287, 1289], "4096": 1384, "41": [220, 352, 670, 845, 871, 962, 1379, 1393], "412277": 181, "414214": [688, 845, 1276, 1362, 1384], "4160": 61, "416147": 1387, "4164": [257, 352, 890, 962], "42": [61, 141, 220, 243, 268, 284, 352, 482, 653, 845, 871, 900, 910, 962, 1141, 1362, 1378, 1392], "424778": [642, 845], "428571": [498, 845, 1119, 1362], "429101": 1379, "4294967296": [47, 352], "43": [220, 284, 352, 440, 653, 670, 845, 871, 910, 962], "4321": 968, "433013": [667, 845, 921, 962], "44": [11, 268, 352, 446, 845, 900, 962], "4411": [257, 352, 890, 962], "44225": [1041, 1362], "444": 11, "44444444444": 11, "45": [41, 220, 284, 352, 453, 477, 490, 653, 670, 693, 700, 740, 767, 786, 805, 831, 832, 845, 871, 910, 962, 968, 1067, 1095, 1100, 1108, 1281, 1288, 1329, 1384, 1385, 1387, 1391, 1393], "450": [1250, 1362], "45000": 823, "4500000": 968, "456": [9, 11, 453, 968, 1067, 1339, 1362], "456000": [453, 1067], "456001\u00b5": 968, "4566": [257, 352, 890, 962], "456789": [482, 968, 1096], "456789\u00b5": 968, "456m": 968, "457658": 1387, "459148": [495, 845], "46": 968, "4696": [257, 352, 890, 962], "47": [57, 220, 352, 670, 845, 871, 962, 968, 1379], "470": [904, 962], "47033": [666, 845, 1254, 1362], "47033046033698594": [666, 845, 1254, 1362], "475": [904, 962], "48": [13, 181, 284, 352, 653, 743, 845, 910, 962, 968], "4827": [257, 352, 890, 962], "485": 1393, "49": [220, 352, 871, 962, 968], "492474": [499, 845, 1120, 1362], "498": [258, 352, 891, 962], "4_500_000": 968, "4ab4a": 1385, "4d": [499, 845, 1120, 1362], "4f6228": [41, 352], "4f71": [41, 352], "4xm": [1081, 1083, 1089], "51": 968, "512": [47, 152, 254, 352, 410, 638, 845, 1020, 1229, 1362], "51966": [733, 1321], "52": [326, 352, 491, 673, 845, 931, 962], "523599": 1387, "527525": [1255, 1362], "53": [491, 1109, 1390], "533316061": 1371, "533_316_061": 1371, "54": [503, 845, 1163, 1362, 1384, 1393], "540": [443, 642, 845], "540302": 1387, "543": 9, "543081": [433, 845, 1048, 1362], "5432": 152, "54321": 9, "544": 1393, "544705": 775, "549306": [984, 1362], "55": [41, 59, 352, 525, 845, 1145, 1362, 1381, 1385, 1386], "5555": 968, "55550": 968, "56": [138, 714, 747, 845, 1303], "566371": [642, 845], "567": 28, "56789": [1042, 1132, 1258, 1362], "57": [670, 845, 1258, 1362, 1387, 1393], "570796": [369, 371, 845, 979, 981, 1362, 1387], "575050513": [178, 181], "58": [146, 276, 352], "581139": [1058, 1362], "584963": [586, 845], "587401": [429, 845, 1384], "59": [138, 220, 352, 453, 467, 475, 478, 482, 512, 786, 831, 832, 833, 845, 871, 962, 968, 1067, 1085, 1093, 1096], "59815": [503, 845, 1384], "5_000_555": 968, "5th": [41, 352], "6": [1, 8, 10, 14, 36, 38, 40, 41, 43, 44, 45, 46, 47, 56, 58, 60, 65, 97, 98, 105, 131, 134, 135, 136, 137, 155, 159, 160, 173, 210, 213, 216, 217, 221, 222, 223, 225, 226, 227, 229, 230, 233, 236, 237, 238, 239, 240, 242, 244, 246, 247, 248, 250, 252, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 269, 270, 273, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 295, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 316, 318, 319, 320, 322, 323, 324, 325, 326, 328, 329, 335, 345, 346, 352, 355, 356, 361, 365, 386, 387, 388, 390, 396, 422, 423, 426, 427, 439, 440, 446, 449, 453, 457, 461, 468, 472, 473, 474, 485, 486, 488, 491, 492, 495, 497, 506, 507, 512, 516, 522, 524, 527, 545, 546, 547, 556, 559, 572, 573, 574, 575, 579, 591, 592, 628, 632, 639, 642, 643, 644, 649, 651, 653, 656, 658, 660, 662, 664, 667, 669, 670, 671, 676, 681, 687, 693, 698, 709, 710, 733, 744, 746, 751, 759, 761, 763, 770, 772, 777, 779, 780, 781, 783, 786, 790, 793, 799, 806, 807, 811, 824, 828, 835, 841, 845, 863, 866, 867, 868, 869, 872, 873, 875, 876, 877, 878, 881, 882, 883, 885, 886, 888, 889, 890, 892, 894, 895, 902, 904, 906, 907, 908, 910, 911, 912, 914, 916, 917, 918, 919, 920, 923, 926, 927, 930, 931, 934, 935, 942, 952, 953, 962, 968, 994, 996, 997, 998, 1000, 1006, 1036, 1043, 1047, 1049, 1054, 1055, 1060, 1063, 1075, 1090, 1100, 1110, 1117, 1124, 1137, 1143, 1168, 1169, 1178, 1181, 1194, 1195, 1196, 1197, 1201, 1219, 1233, 1236, 1237, 1243, 1245, 1251, 1253, 1255, 1257, 1262, 1267, 1270, 1281, 1286, 1297, 1321, 1333, 1343, 1362, 1367, 1372, 1375, 1377, 1379, 1380, 1384, 1390, 1391, 1393], "60": [41, 230, 276, 352, 460, 466, 467, 478, 489, 512, 670, 728, 845, 1091, 1096, 1107, 1238, 1316, 1362, 1387], "600": [321, 352, 485, 486, 488, 928, 962, 968], "60000": 464, "600000": 968, "60000000": 471, "60206": [587, 845, 1384], "605551": 826, "605551275463989": 826, "609438": 1384, "60_000": [455, 456, 460, 464, 466, 467, 471, 478, 480], "61": [276, 352], "625": [664, 845], "626172": [695, 1283], "63": [670, 845], "63204": 1393, "6331e16": [1335, 1362, 1387], "636253": 1387, "64": [1, 59, 61, 72, 74, 78, 82, 89, 92, 172, 209, 314, 352, 434, 614, 638, 845, 1229, 1232, 1362, 1384], "64030": [733, 1321], "642093": 1387, "647961": 181, "64bit": [173, 645, 845, 1238, 1362], "65": [224, 352, 874, 962, 1114, 1362], "650": [520, 631, 845], "65280": [733, 1321], "654": [28, 824, 920, 962], "65432": 1388, "654321": 600, "65536": 1384, "65552": [409, 1019], "66": [257, 321, 352, 670, 759, 845, 890, 928, 962, 1163, 1253, 1362], "663053": 138, "666": 968, "666000": 968, "666667": [220, 248, 323, 340, 352, 498, 803, 804, 810, 845, 871, 888, 929, 947, 962, 1119, 1362], "666f6f": [695, 1283], "67500": 823, "676": [258, 352, 891, 962], "678": [693, 700, 1281, 1288], "6789": [29, 968], "67890": 29, "686241": 1379, "69": [670, 845, 1163, 1362], "693147": [588, 845, 1208, 1210, 1362, 1384], "6_000_000": 1371, "7": [1, 17, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 58, 60, 65, 155, 159, 160, 173, 188, 210, 213, 216, 217, 218, 220, 222, 223, 226, 227, 229, 233, 236, 238, 242, 244, 246, 248, 256, 260, 262, 264, 266, 268, 269, 273, 276, 278, 281, 282, 284, 285, 287, 288, 289, 290, 292, 295, 297, 300, 301, 302, 303, 308, 310, 311, 312, 320, 322, 323, 324, 352, 355, 356, 361, 365, 387, 388, 390, 399, 440, 452, 453, 457, 465, 473, 476, 477, 482, 490, 492, 503, 516, 522, 527, 528, 545, 559, 572, 573, 574, 575, 632, 633, 643, 649, 653, 669, 670, 687, 703, 732, 746, 770, 779, 780, 783, 786, 787, 793, 798, 806, 807, 824, 828, 835, 845, 863, 868, 869, 871, 873, 876, 878, 881, 883, 885, 886, 888, 889, 894, 900, 902, 905, 908, 910, 911, 912, 916, 920, 923, 962, 968, 984, 997, 998, 1000, 1009, 1066, 1067, 1071, 1077, 1082, 1094, 1095, 1100, 1108, 1110, 1123, 1147, 1162, 1181, 1194, 1195, 1196, 1197, 1242, 1243, 1256, 1262, 1291, 1320, 1362, 1367, 1372, 1377, 1379, 1380, 1381, 1384, 1386, 1390, 1393], "70": [220, 352, 759, 787, 845, 871, 962, 1163, 1362, 1379], "700": [321, 352, 928, 962], "702963": [41, 352], "7051579356916758811": 167, "707107": [398, 500, 667, 668, 766, 845, 1008, 1121, 1362, 1387], "712389": 1387, "714": 1393, "714286": [528, 845, 1147, 1362], "718281828459045": [11, 495, 586, 845, 1114, 1208, 1362], "718282": [503, 845, 1123, 1362, 1384], "720": [443, 642, 845], "7264": 1393, "732051": [1276, 1362], "7415e16": 181, "742": [258, 352, 891, 962], "75": [41, 220, 224, 352, 365, 632, 640, 643, 656, 658, 660, 662, 667, 669, 671, 803, 807, 845, 871, 874, 962, 968, 1058, 1143, 1163, 1234, 1302, 1362, 1379, 1387, 1393], "7500": [255, 352], "7508": 1393, "754": [752, 845], "754888": [495, 845], "761594": [748, 845, 1336, 1362], "764052": 96, "7654": 968, "765431": 1096, "7654321": 28, "76933c": [41, 352], "77": 1100, "78": [9, 146, 714, 1303], "780": 9, "784": [257, 352, 890, 962], "785398": [373, 766, 767, 845, 983, 1362, 1387], "789": [11, 968], "79": [1163, 1362], "7d": 968, "8": [1, 12, 36, 38, 40, 43, 44, 45, 46, 47, 48, 57, 58, 60, 61, 65, 83, 87, 93, 159, 160, 173, 210, 213, 216, 217, 218, 220, 222, 223, 225, 226, 227, 229, 233, 236, 238, 240, 244, 246, 253, 256, 257, 258, 260, 261, 262, 264, 266, 269, 278, 281, 282, 284, 285, 287, 288, 289, 290, 292, 295, 297, 299, 300, 301, 303, 308, 310, 311, 312, 320, 323, 324, 326, 352, 365, 367, 379, 387, 388, 390, 437, 440, 441, 453, 482, 516, 523, 527, 528, 553, 555, 559, 572, 573, 574, 575, 614, 632, 633, 638, 643, 649, 650, 655, 679, 685, 687, 711, 712, 713, 728, 759, 764, 770, 775, 777, 780, 782, 790, 792, 797, 798, 801, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 824, 826, 829, 830, 834, 845, 863, 868, 869, 871, 873, 875, 876, 878, 881, 883, 886, 889, 890, 891, 894, 895, 904, 908, 911, 912, 916, 920, 923, 931, 962, 968, 997, 998, 1000, 1049, 1056, 1077, 1143, 1147, 1162, 1175, 1177, 1181, 1194, 1195, 1196, 1197, 1229, 1232, 1243, 1246, 1248, 1251, 1253, 1255, 1257, 1300, 1301, 1316, 1362, 1371, 1372, 1377, 1379, 1380, 1381, 1384, 1385, 1386, 1390, 1393], "80": [41, 224, 352, 874, 962], "800": [485, 486, 488, 1100], "8000": 152, "803065983": 138, "81": 1384, "814697265625": [1118, 1362], "816497": [300, 352], "8192": 150, "82": [257, 352, 890, 962], "8257e14": 1393, "83": [257, 352, 890, 962], "833": [257, 352, 890, 962], "833333": [340, 947], "848062": 1387, "848808": 181, "85": [41, 146, 352, 1163, 1362, 1393], "850": [520, 631, 845], "8568409950394724": [1114, 1362], "8589934592": [679, 845], "86": 1393, "8601": 1385, "87": 1393, "876": 9, "88": [220, 352, 871, 962], "881374": [372, 845, 982, 1362], "888": [824, 920, 962], "8_000_000": 1371, "8a": [1016, 1017], "8nin": 1393, "9": [1, 9, 36, 38, 40, 41, 43, 44, 47, 51, 52, 57, 65, 210, 218, 220, 233, 235, 244, 248, 256, 258, 260, 261, 276, 284, 286, 287, 290, 302, 303, 320, 324, 326, 345, 352, 361, 365, 367, 379, 387, 388, 390, 395, 397, 437, 440, 443, 453, 482, 508, 516, 527, 533, 553, 559, 570, 578, 616, 632, 633, 642, 649, 653, 654, 655, 666, 669, 670, 681, 685, 700, 732, 740, 743, 773, 779, 780, 783, 786, 798, 833, 845, 871, 881, 886, 888, 889, 891, 894, 910, 912, 923, 931, 952, 962, 968, 992, 993, 997, 998, 1000, 1005, 1007, 1058, 1071, 1081, 1083, 1089, 1095, 1108, 1109, 1153, 1162, 1175, 1181, 1192, 1200, 1243, 1247, 1248, 1254, 1256, 1258, 1270, 1288, 1320, 1329, 1362, 1371, 1372, 1377, 1380, 1381, 1390], "90": [220, 258, 352, 732, 871, 891, 962, 1320, 1379, 1387], "90000": 823, "901234": [1042, 1132, 1258, 1362], "909": [257, 352, 890, 962], "910": [257, 352, 700, 890, 962, 1288], "910t": [693, 700, 1281, 1288], "914": [257, 352, 890, 962], "9223372036854775807": [755, 845], "9223372036854775808": [589, 845], "927295": 1387, "928571": [501, 845, 1122, 1362], "93": [1163, 1362], "94": [362, 845], "9477376373212048": [1163, 1362], "95": [18, 362, 845, 968], "95b3d7": [41, 352], "96": [18, 220, 352, 362, 845, 871, 962, 1163, 1362], "961": 61, "963624": [500, 845, 1121, 1362], "964028": [276, 352], "96_067_179": 1371, "97": [18, 247, 352, 362, 845, 1163, 1362], "9774092659964970114": [521, 845], "978307200": [459, 1073], "978307200000": 481, "978307200000000": [459, 481, 1073, 1099], "978307200000000000": 1099, "978393600": [459, 1073], "978393600000": 481, "978393600000000": [459, 481, 1073, 1099], "978393600000000000": 1099, "978480000": [459, 1073], "978480000000": 481, "978480000000000": [459, 481, 1073, 1099], "978480000000000000": 1099, "978738": 96, "98": [18, 247, 276, 352, 421, 515, 518, 686, 732, 750, 845, 1320], "987": [28, 600], "987000": 968, "9876": 9, "987654": [28, 968], "987654321": 11, "9876543210": 138, "987m": 968, "988": 11, "99": [18, 41, 231, 232, 247, 250, 276, 321, 352, 362, 421, 505, 507, 515, 518, 686, 750, 845, 879, 880, 928, 962, 1100, 1114, 1126, 1362, 1384], "9914e218": 181, "998347": [276, 352], "999": [452, 465, 968, 1066, 1082, 1382, 1393], "999000": 968, "999954": [276, 352], "999999": [475, 738, 786, 831, 832, 833, 968, 1093, 1100, 1326], "999999\u00b5": 968, "9bbb59": [41, 352], "A": [14, 38, 41, 47, 48, 51, 52, 53, 54, 63, 64, 69, 75, 130, 138, 143, 145, 150, 151, 152, 153, 165, 167, 172, 187, 217, 226, 235, 242, 257, 263, 265, 270, 276, 302, 305, 320, 321, 322, 326, 327, 352, 360, 427, 447, 448, 453, 479, 482, 496, 497, 505, 517, 519, 531, 534, 536, 537, 543, 583, 590, 591, 604, 618, 627, 628, 650, 656, 658, 660, 662, 664, 667, 669, 671, 691, 692, 693, 699, 700, 701, 702, 703, 704, 705, 708, 710, 714, 715, 716, 718, 729, 738, 773, 789, 790, 794, 845, 869, 876, 885, 890, 908, 928, 931, 932, 962, 968, 1037, 1061, 1062, 1067, 1097, 1100, 1116, 1126, 1225, 1249, 1250, 1252, 1255, 1256, 1257, 1279, 1280, 1281, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1296, 1298, 1302, 1303, 1304, 1306, 1317, 1326, 1362, 1371, 1372, 1375, 1388, 1390], "AND": [760, 761, 824, 968, 1381], "ANDs": [412, 845, 1022, 1362], "AS": [299, 352, 824, 825, 920, 962, 1371, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1390, 1392], "And": [736, 1324], "As": [13, 56, 97, 98, 131, 133, 134, 135, 137, 155, 159, 160, 169, 233, 280, 309, 314, 352, 583, 835, 881, 907, 962], "At": [47, 48, 49, 50, 51, 63, 64, 276, 352, 866, 867, 877, 904, 917, 962], "BY": [824, 920, 962, 1371, 1374, 1380, 1389, 1390], "Be": 962, "By": [5, 13, 15, 31, 34, 57, 150, 151, 165, 242, 256, 257, 284, 286, 295, 300, 322, 323, 352, 396, 472, 477, 490, 576, 579, 585, 633, 648, 653, 657, 659, 661, 663, 665, 668, 670, 672, 678, 689, 757, 777, 784, 785, 787, 788, 789, 805, 826, 832, 833, 834, 845, 866, 885, 889, 890, 910, 916, 921, 929, 962, 1006, 1090, 1095, 1108, 1198, 1242, 1266, 1277, 1352, 1362], "For": [15, 40, 41, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 224, 225, 228, 230, 256, 257, 276, 284, 309, 338, 352, 355, 469, 470, 482, 498, 500, 501, 512, 583, 592, 604, 645, 684, 691, 699, 700, 701, 703, 705, 729, 779, 789, 793, 794, 835, 841, 845, 874, 875, 890, 910, 945, 962, 1100, 1118, 1119, 1121, 1122, 1125, 1213, 1238, 1273, 1279, 1287, 1288, 1289, 1291, 1293, 1317, 1341, 1362, 1367], "IF": 1383, "If": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 62, 63, 64, 73, 131, 132, 133, 134, 135, 136, 137, 146, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 182, 183, 184, 195, 209, 213, 225, 230, 233, 240, 242, 244, 252, 253, 254, 256, 257, 260, 261, 265, 272, 276, 280, 284, 286, 287, 288, 292, 295, 297, 299, 302, 303, 306, 307, 309, 310, 316, 317, 319, 320, 321, 352, 355, 364, 366, 389, 396, 401, 409, 423, 449, 453, 454, 461, 469, 470, 479, 482, 508, 523, 529, 533, 541, 562, 571, 576, 577, 583, 591, 592, 599, 600, 606, 608, 633, 638, 640, 643, 645, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 678, 680, 684, 685, 690, 700, 701, 703, 705, 706, 707, 718, 719, 720, 721, 723, 724, 725, 728, 729, 730, 731, 735, 738, 756, 760, 762, 765, 769, 770, 771, 774, 775, 777, 779, 784, 785, 787, 788, 789, 792, 793, 799, 800, 801, 803, 804, 805, 807, 811, 817, 820, 821, 822, 827, 829, 832, 833, 835, 836, 845, 866, 867, 875, 877, 881, 885, 889, 890, 895, 899, 904, 906, 907, 908, 910, 914, 916, 917, 918, 920, 925, 927, 928, 937, 945, 955, 962, 967, 968, 975, 976, 999, 1006, 1011, 1019, 1032, 1045, 1063, 1067, 1068, 1075, 1087, 1088, 1097, 1100, 1125, 1142, 1143, 1148, 1153, 1162, 1163, 1167, 1184, 1193, 1198, 1199, 1205, 1213, 1232, 1234, 1236, 1238, 1241, 1242, 1243, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1262, 1264, 1266, 1269, 1273, 1274, 1278, 1288, 1289, 1291, 1293, 1294, 1295, 1302, 1306, 1307, 1308, 1309, 1311, 1312, 1313, 1316, 1317, 1318, 1319, 1323, 1326, 1334, 1337, 1341, 1343, 1351, 1362, 1367, 1371, 1372, 1374, 1382, 1385, 1390], "In": [57, 64, 152, 154, 166, 167, 170, 181, 185, 205, 210, 228, 230, 233, 242, 257, 258, 261, 272, 276, 284, 310, 319, 352, 355, 591, 592, 633, 653, 714, 715, 835, 845, 867, 885, 890, 891, 910, 927, 962, 1118, 1125, 1232, 1237, 1303, 1362, 1367], "It": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 73, 79, 96, 98, 130, 141, 142, 143, 144, 145, 146, 154, 160, 162, 163, 165, 166, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 207, 220, 258, 268, 275, 299, 309, 314, 321, 329, 338, 352, 355, 356, 441, 442, 449, 461, 523, 583, 592, 603, 640, 654, 655, 657, 659, 661, 663, 665, 666, 668, 670, 672, 770, 772, 803, 804, 835, 841, 845, 862, 866, 867, 871, 877, 891, 895, 900, 904, 920, 928, 935, 936, 945, 962, 970, 1040, 1056, 1057, 1063, 1075, 1143, 1234, 1247, 1248, 1251, 1253, 1254, 1261, 1263, 1341, 1346, 1362, 1367], "Its": [243, 352, 521, 845, 1141, 1362], "NO": 968, "NOT": [134, 253, 293, 352, 583, 602, 677, 845, 915, 962, 1390], "No": [21, 256, 268, 352, 835, 889, 900, 962], "Not": [231, 256, 352, 506, 536, 537, 845, 866, 877, 879, 889, 904, 917, 962, 1127, 1362], "ON": 1390, "OR": [762, 763, 881, 962, 968, 1381], "ORs": [417, 845, 1027, 1362], "On": [752, 845, 893, 962], "One": [57, 220, 256, 272, 309, 314, 352, 365, 632, 764, 776, 792, 798, 801, 810, 812, 815, 816, 825, 845, 871, 889, 962, 968, 1058, 1362], "Or": [241, 242, 257, 284, 298, 322, 331, 352, 355, 499, 653, 687, 784, 785, 787, 788, 832, 833, 841, 845, 884, 885, 890, 910, 919, 938, 962, 1120, 1362], "That": [156, 895, 962], "The": [10, 21, 34, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 62, 63, 64, 65, 66, 71, 72, 74, 75, 76, 84, 88, 89, 96, 98, 99, 101, 130, 131, 133, 134, 135, 137, 138, 145, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 181, 182, 183, 185, 187, 195, 212, 220, 221, 223, 224, 225, 226, 229, 230, 233, 240, 241, 242, 243, 248, 254, 256, 257, 258, 261, 268, 274, 276, 280, 284, 285, 286, 287, 290, 291, 292, 299, 304, 309, 310, 315, 318, 322, 326, 327, 329, 330, 331, 338, 352, 363, 404, 405, 406, 407, 421, 422, 441, 442, 444, 447, 448, 449, 457, 461, 468, 472, 473, 477, 479, 482, 490, 491, 498, 500, 501, 502, 505, 508, 512, 513, 521, 554, 558, 591, 592, 606, 633, 640, 643, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 681, 684, 690, 694, 695, 699, 704, 705, 706, 707, 712, 713, 714, 715, 723, 724, 725, 726, 727, 728, 729, 739, 743, 749, 750, 751, 770, 773, 791, 795, 804, 805, 807, 821, 822, 823, 824, 827, 835, 837, 838, 840, 841, 845, 846, 847, 850, 852, 853, 854, 861, 866, 867, 871, 872, 874, 875, 877, 878, 881, 884, 885, 888, 889, 890, 891, 895, 900, 904, 907, 910, 912, 913, 914, 917, 920, 924, 926, 931, 932, 935, 936, 938, 945, 962, 966, 967, 968, 974, 977, 1014, 1015, 1016, 1017, 1031, 1044, 1056, 1057, 1058, 1061, 1062, 1063, 1071, 1075, 1086, 1090, 1091, 1095, 1097, 1100, 1108, 1109, 1117, 1119, 1121, 1122, 1125, 1126, 1129, 1133, 1141, 1176, 1180, 1213, 1232, 1234, 1236, 1240, 1241, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1270, 1273, 1278, 1282, 1283, 1292, 1293, 1294, 1295, 1300, 1301, 1302, 1303, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1337, 1343, 1345, 1347, 1354, 1356, 1358, 1362, 1363, 1368, 1369, 1370, 1371, 1376, 1390, 1391, 1393], "Then": 170, "There": 1390, "These": [1, 33, 41, 140, 147, 152, 153, 205, 316, 352, 490, 844, 845, 1095, 1108], "To": [40, 64, 231, 352, 431, 447, 448, 506, 507, 691, 698, 699, 700, 703, 714, 715, 724, 725, 726, 727, 736, 845, 879, 962, 1045, 1061, 1062, 1127, 1279, 1286, 1287, 1288, 1291, 1302, 1303, 1324, 1343, 1362, 1390], "Will": [63, 866, 877, 904, 917, 962, 1362], "With": [159, 252, 295, 352, 396, 576, 678, 845, 866, 916, 962, 1006, 1162, 1198, 1266, 1362], "_": [1, 57, 61, 205, 276, 307, 311, 352, 389, 426, 427, 562, 692, 700, 702, 704, 709, 710, 716, 719, 720, 1036, 1037, 1039, 1280, 1288, 1292, 1297, 1298, 1304, 1308, 1338, 1362], "__array_ufunc__": 970, "__call__": 841, "__enter__": 1390, "__exit__": 1390, "__getattr__": 841, "__getitem__": 739, "__init__": [1, 32, 33, 34, 35, 52, 53, 54, 55, 56, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 141, 142, 143, 144, 178, 190, 196, 197, 199, 200, 936, 937, 1390], "__name__": [255, 352], "_bar_": 794, "_btm_by_a": [422, 845], "_btm_by_b": [422, 845], "_by_ca": [422, 751, 845], "_by_cb": [422, 751, 845], "_check_ord": [917, 962], "_df": [1, 58], "_diff": [326, 352, 931, 962], "_eager": 583, "_expr": [1, 59], "_foo": 597, "_geventdataframeresult": [64, 867, 962], "_internal_cal": 55, "_is_not_nan": [537, 845], "_is_odd": [290, 352, 912, 962], "_isnan": [536, 845], "_isnul": [539, 845], "_kwarg": [866, 904, 962], "_ldf": 1, "_lf": 60, "_lower_boundari": [242, 352, 885, 962], "_mean_squar": [331, 938], "_not_nul": [538, 845], "_o": [426, 427, 709, 710, 1036, 1037, 1297, 1298], "_revers": [617, 621, 650, 845], "_right": [256, 257, 258, 352, 889, 890, 891, 962], "_storage_account": 34, "_suffix": 622, "_sum": [331, 938], "_top_by_a": [751, 845], "_top_by_b": [751, 845], "_train": [933, 962], "_type": [906, 962], "_type_check": [917, 962], "_upper_boundari": [242, 352, 885, 962], "_world": 794, "a1": [41, 58, 60, 352], "a101": 1393, "a123": [41, 352], "a2": [41, 58, 60, 352], "a_1": [720, 1308, 1338, 1362], "a_2": [1338, 1362], "a_3": [1338, 1362], "a_a": 825, "a_agg_list": [242, 352, 885, 962], "a_b_doubl": 790, "a_btm_by_a": [422, 845], "a_btm_by_b": [422, 845], "a_by_ca": [422, 751, 845], "a_by_cb": [422, 751, 845], "a_div_2": 1384, "a_div_5": 1384, "a_interpol": [528, 845], "a_is_even": [299, 352, 824, 920, 962], "a_isnul": [539, 845], "a_lag_": 773, "a_log2": 1384, "a_mod_2": 1384, "a_not_nul": [538, 845], "a_revers": [617, 621, 650, 845], "a_rol": 773, "a_suffix": 622, "a_times_2": [592, 845], "a_times_b": [591, 845], "a_top_by_a": [751, 845], "a_top_by_b": [751, 845], "a_txt": 825, "aa": [502, 691, 703, 791, 845, 968, 1058, 1279, 1291, 1362, 1385], "aaa": [1, 41, 352, 691, 703, 739, 741, 742, 968, 1279, 1291], "aaaa": [1016, 1017], "aabcdef": 725, "aad": [1016, 1017], "aag": 27, "aazz": 1385, "ab": [244, 260, 303, 326, 352, 715, 739, 741, 742, 845, 931, 962, 968, 1142, 1167, 1334, 1362, 1383, 1385], "ab12": 715, "ab12cd34ef": 715, "abc": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 361, 697, 700, 714, 724, 845, 968, 1285, 1288, 1302, 1303, 1385], "abc123": 1385, "abc456": [714, 1302, 1303, 1385], "abcabc": 715, "abcd": 1385, "abcdeff": 724, "abf": [154, 166, 167], "abl": [105, 152, 583], "about": [52, 53, 54, 105, 145, 147, 152, 684, 691, 699, 700, 703, 714, 715, 845, 1273, 1279, 1287, 1288, 1291, 1302, 1303, 1362, 1393], "abov": [41, 257, 276, 352, 355, 890, 962], "abs_a": 1384, "absolut": [147, 154, 166, 167, 174, 175, 176, 177, 360, 498, 500, 501, 845, 973, 1119, 1121, 1122, 1362, 1384], "acc": [779, 780, 793, 819], "accent": 968, "accept": [38, 43, 47, 48, 49, 50, 51, 54, 145, 147, 148, 150, 151, 154, 156, 158, 160, 162, 165, 168, 169, 170, 181, 195, 212, 222, 241, 290, 291, 295, 298, 315, 326, 327, 331, 352, 361, 422, 431, 502, 529, 633, 647, 648, 687, 716, 743, 751, 759, 761, 763, 768, 771, 772, 773, 774, 782, 791, 809, 811, 814, 823, 827, 829, 835, 841, 845, 861, 873, 884, 912, 913, 916, 919, 924, 931, 932, 938, 962, 967, 1045, 1148, 1232, 1241, 1242, 1266, 1304, 1362], "access": [38, 43, 47, 48, 49, 50, 51, 58, 59, 60, 61, 156, 160, 162, 165, 167, 168, 169, 170, 195, 209, 216, 254, 285, 286, 299, 352, 701, 739, 868, 920, 933, 962, 967, 1289, 1393], "accord": [285, 352, 640, 784, 785, 787, 788, 832, 833, 845, 1077, 1234, 1362], "accordingli": [145, 148, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164], "account": [41, 138, 153, 167, 352, 472, 498, 500, 501, 845, 1090, 1119, 1121, 1122, 1362], "accumul": [779, 780, 793, 819], "acg": 27, "achiev": [261, 276, 338, 352, 427, 592, 710, 845, 1037, 1213, 1298, 1362], "aco": 1383, "acosd": 1383, "across": [41, 57, 153, 155, 221, 243, 256, 263, 265, 270, 292, 302, 352, 444, 521, 606, 761, 763, 779, 780, 782, 809, 811, 814, 829, 845, 872, 889, 914, 962, 1141, 1362], "action": [40, 352], "activ": [7, 8, 19, 20, 22, 23, 24, 25, 29, 30, 555, 700, 1177, 1288], "actual": [41, 134, 181, 185, 287, 352, 1268, 1362, 1385, 1392], "ad": [39, 41, 134, 155, 242, 299, 309, 314, 316, 321, 326, 327, 352, 367, 482, 505, 599, 600, 743, 779, 780, 824, 845, 885, 920, 928, 931, 932, 962, 968, 1100, 1126, 1341, 1346, 1362], "adbc": [39, 152, 153, 352], "adbc_driver_manag": 173, "adbc_ingest": [39, 352], "add": [40, 41, 42, 47, 51, 151, 230, 242, 261, 326, 327, 328, 329, 352, 355, 442, 619, 620, 621, 622, 640, 743, 789, 793, 835, 845, 885, 889, 931, 932, 933, 934, 935, 962, 1125, 1362, 1367], "add_calendar_dai": 789, "add_calendar_month": 789, "add_calendar_year": 789, "add_chart": [41, 352], "add_dai": 789, "add_format": [41, 352], "add_hour": 789, "add_milli": 789, "add_second": 789, "add_seri": [41, 352], "add_week": 789, "add_worksheet": [41, 352], "addit": [30, 37, 39, 40, 41, 134, 149, 154, 155, 166, 167, 179, 181, 183, 185, 195, 225, 229, 241, 259, 274, 290, 291, 298, 311, 318, 326, 327, 331, 352, 361, 458, 502, 505, 633, 687, 691, 699, 700, 703, 714, 715, 739, 743, 768, 771, 772, 773, 774, 791, 823, 824, 827, 841, 845, 878, 884, 912, 913, 919, 926, 931, 932, 938, 962, 968, 1064, 1072, 1126, 1279, 1287, 1288, 1291, 1302, 1303, 1344, 1362, 1372, 1390], "addition": [65, 155, 285, 352, 968], "address": 700, "adjac": [41, 352], "adjust": [498, 500, 501, 684, 845, 1119, 1121, 1122, 1273, 1362], "adl": [154, 166, 167], "adlf": 167, "advanc": [41, 276, 352, 401, 583, 616, 619, 621, 623, 624, 1011, 1205, 1393], "advantag": [41, 205, 275, 352], "advis": [41, 56, 98, 352], "aedt": 786, "aeiuo": [703, 1291], "af1": 57, "af2": 57, "af3": 57, "affect": [39, 174, 175, 176, 177, 352], "afm": 167, "afoo": [933, 962], "after": [41, 134, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 212, 213, 230, 315, 318, 352, 421, 422, 423, 449, 502, 633, 643, 738, 750, 751, 770, 845, 861, 924, 926, 962, 1031, 1063, 1125, 1236, 1326, 1347, 1362, 1377], "afterward": [56, 835], "ag": [268, 352, 900, 962, 1391], "again": [592, 845], "against": [39, 107, 150, 152, 233, 280, 299, 352, 555, 703, 824, 881, 907, 920, 962, 1177, 1291, 1371, 1390, 1392, 1393], "agg": [241, 242, 276, 284, 352, 362, 412, 417, 420, 422, 508, 510, 515, 518, 591, 592, 633, 686, 687, 751, 758, 784, 787, 807, 845, 866, 867, 877, 884, 885, 904, 906, 910, 917, 962, 968], "agg_group": [796, 845], "agg_list": [591, 845], "aggreg": [147, 150, 151, 154, 162, 166, 235, 241, 242, 262, 264, 266, 269, 272, 276, 277, 278, 284, 300, 301, 320, 323, 331, 332, 334, 336, 352, 362, 412, 417, 420, 508, 524, 591, 592, 633, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 760, 761, 762, 763, 779, 780, 781, 782, 793, 798, 808, 809, 811, 813, 814, 819, 828, 829, 845, 885, 895, 896, 897, 898, 901, 902, 905, 910, 921, 922, 929, 938, 939, 941, 943, 962, 1022, 1027, 1030, 1144, 1248, 1249, 1250, 1252, 1255, 1256, 1257, 1362, 1378, 1380, 1383, 1389], "aggregate_funct": [276, 352, 968], "aho": [692, 702, 704, 716, 1280, 1290, 1292, 1304], "aiosqlit": 152, "alchemy_conn": 152, "algorithm": [211, 352, 368, 692, 702, 704, 716, 764, 845, 860, 962, 978, 1280, 1290, 1292, 1304, 1362], "alia": [1, 13, 57, 59, 61, 65, 95, 198, 202, 216, 242, 247, 260, 276, 284, 318, 326, 329, 352, 355, 361, 365, 404, 405, 406, 407, 408, 411, 421, 424, 426, 427, 428, 436, 437, 438, 439, 440, 442, 445, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 489, 490, 491, 492, 493, 496, 497, 510, 512, 513, 517, 519, 525, 526, 529, 532, 535, 543, 545, 567, 579, 585, 590, 592, 596, 599, 600, 602, 604, 609, 612, 614, 616, 627, 628, 632, 634, 638, 640, 643, 645, 674, 676, 691, 692, 693, 694, 696, 697, 699, 700, 702, 703, 704, 705, 709, 710, 716, 717, 718, 719, 720, 721, 722, 726, 727, 729, 739, 740, 741, 742, 744, 749, 750, 752, 758, 759, 765, 766, 767, 771, 772, 773, 774, 784, 787, 789, 790, 793, 794, 799, 802, 803, 806, 807, 819, 823, 827, 832, 835, 845, 885, 887, 894, 910, 926, 931, 935, 962, 1014, 1057, 1064, 1065, 1068, 1071, 1072, 1073, 1074, 1080, 1081, 1083, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1097, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1133, 1167, 1234, 1239, 1287, 1288, 1292, 1303, 1308, 1309, 1362], "alias": [299, 352, 599, 600, 920, 962], "alic": [150, 1391], "align": [11, 16, 17, 41, 57, 65, 352, 1391], "align_fram": 65, "align_ful": 65, "align_inn": 65, "align_left": 65, "align_right": 65, "all": [1, 4, 5, 8, 14, 18, 21, 26, 31, 38, 40, 41, 47, 48, 49, 50, 51, 57, 63, 70, 116, 118, 131, 132, 136, 146, 150, 151, 154, 155, 156, 158, 160, 161, 162, 165, 166, 168, 169, 178, 179, 182, 185, 205, 210, 211, 213, 220, 222, 224, 225, 232, 244, 249, 251, 253, 254, 255, 256, 258, 259, 260, 265, 267, 271, 272, 276, 279, 281, 285, 286, 287, 291, 297, 298, 302, 303, 307, 309, 310, 314, 317, 319, 320, 321, 322, 327, 329, 352, 355, 365, 367, 389, 422, 435, 441, 447, 448, 449, 450, 461, 482, 490, 502, 507, 520, 521, 524, 527, 531, 534, 538, 539, 544, 554, 555, 562, 580, 583, 591, 613, 616, 617, 619, 620, 621, 622, 623, 624, 631, 633, 643, 648, 650, 655, 679, 685, 687, 693, 697, 700, 701, 705, 708, 711, 715, 723, 724, 725, 729, 751, 761, 770, 772, 779, 780, 781, 782, 791, 793, 798, 799, 802, 811, 819, 827, 828, 829, 835, 841, 845, 851, 857, 860, 863, 866, 867, 871, 873, 874, 875, 877, 880, 889, 891, 895, 899, 904, 908, 913, 917, 918, 919, 925, 927, 928, 932, 933, 935, 962, 968, 999, 1056, 1058, 1061, 1062, 1063, 1064, 1075, 1100, 1108, 1142, 1149, 1161, 1167, 1176, 1177, 1184, 1202, 1205, 1236, 1242, 1248, 1274, 1281, 1285, 1288, 1289, 1292, 1293, 1296, 1303, 1311, 1312, 1313, 1317, 1334, 1343, 1362, 1366, 1367, 1372, 1374, 1379, 1380, 1385, 1389, 1390, 1392, 1393], "all_compat": 1374, "all_data": 1390, "all_horizont": [224, 225, 352, 760, 835, 874, 875, 962], "all_stat": 31, "alloc": [147, 150, 151, 228, 279, 352, 845, 937, 1118, 1362], "allow": [1, 8, 40, 41, 48, 49, 50, 51, 55, 56, 65, 98, 107, 132, 152, 155, 165, 167, 168, 169, 170, 171, 178, 181, 182, 185, 205, 209, 254, 257, 259, 285, 286, 288, 310, 311, 314, 317, 330, 352, 424, 428, 472, 479, 482, 571, 591, 592, 599, 600, 645, 675, 728, 730, 731, 845, 889, 890, 895, 899, 906, 925, 933, 962, 966, 968, 1090, 1097, 1100, 1193, 1213, 1238, 1260, 1316, 1318, 1319, 1343, 1344, 1362, 1385, 1393], "allow_alias": [599, 600], "allow_chunk": [181, 185], "allow_copi": [132, 209, 310, 352, 1343, 1362], "allow_dupl": [640, 845, 1234, 1362], "allow_exact_match": [257, 352, 890, 962], "allow_infin": [181, 185], "allow_masked_out": [181, 185], "allow_missing_column": [162, 170], "allow_nul": [178, 181, 185, 1393], "allow_object": 805, "allow_parallel": [257, 352, 889, 890, 962], "allow_pyarrow_filt": 171, "allow_time_zon": [181, 182, 185], "allowed_dtyp": [181, 182, 185, 1393], "almost": [64, 261, 338, 352, 728, 730, 731, 867, 962, 966, 1213, 1316, 1318, 1319, 1362], "along": [38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 352, 962], "alpha": [498, 500, 501, 845, 968, 1119, 1121, 1122, 1362], "alpha_i": [499, 845, 1120, 1362], "alphabet": [968, 1393], "alphanumer": [736, 968, 1324], "alreadi": [39, 40, 106, 309, 352, 441, 555, 607, 756, 845, 917, 962, 1056, 1177, 1351, 1362], "also": [28, 38, 41, 48, 49, 50, 51, 56, 63, 64, 134, 138, 152, 155, 156, 161, 162, 165, 170, 180, 181, 184, 185, 190, 199, 205, 226, 241, 242, 268, 272, 276, 284, 286, 290, 298, 309, 321, 326, 329, 352, 437, 440, 449, 461, 472, 476, 482, 508, 529, 592, 599, 600, 633, 643, 647, 648, 687, 714, 715, 716, 723, 724, 739, 770, 779, 780, 783, 786, 793, 795, 819, 835, 844, 845, 851, 866, 867, 877, 884, 885, 900, 904, 910, 912, 917, 919, 928, 931, 933, 935, 962, 968, 1063, 1075, 1094, 1148, 1236, 1241, 1242, 1281, 1302, 1303, 1304, 1311, 1362, 1366, 1372, 1374, 1377, 1381, 1385, 1388, 1390, 1391], "alt": [352, 355, 1362, 1367], "altair": [173, 352, 355, 1362, 1367], "altern": [41, 190, 352, 841, 1382], "although": [299, 352, 920, 962], "alwai": [14, 38, 40, 48, 54, 73, 79, 150, 156, 160, 162, 212, 241, 256, 257, 261, 315, 338, 352, 421, 422, 591, 603, 728, 750, 751, 835, 845, 861, 889, 890, 895, 924, 962, 968, 1031, 1213, 1316, 1347, 1362, 1371, 1372, 1390, 1393], "am": [717, 1305], "amarillo": 1385, "amaz": [352, 355, 1362, 1367], "amazonaw": 33, "ambigu": [475, 476, 477, 490, 728, 731, 786, 1093, 1094, 1095, 1108, 1316, 1319], "america": 787, "amount": [52, 56, 74, 98, 160, 165, 168, 169, 592, 789, 845, 1379], "amsterdam": [476, 1094], "an": [1, 31, 34, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 55, 58, 60, 61, 65, 73, 74, 75, 96, 103, 107, 110, 113, 120, 122, 131, 133, 134, 137, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 165, 166, 167, 168, 169, 170, 179, 181, 185, 195, 214, 215, 216, 222, 228, 231, 235, 237, 242, 253, 254, 255, 257, 258, 261, 272, 276, 281, 282, 284, 285, 289, 299, 304, 310, 314, 316, 320, 321, 326, 329, 338, 352, 355, 363, 385, 388, 400, 404, 406, 412, 415, 417, 418, 420, 437, 438, 439, 440, 441, 442, 449, 453, 454, 472, 476, 479, 493, 499, 507, 508, 513, 514, 515, 518, 552, 555, 558, 560, 582, 583, 591, 592, 604, 606, 616, 617, 638, 639, 640, 648, 649, 653, 655, 656, 658, 660, 662, 664, 667, 669, 671, 690, 691, 694, 700, 703, 707, 728, 730, 731, 733, 735, 749, 752, 760, 765, 769, 771, 775, 777, 784, 785, 787, 788, 790, 792, 795, 799, 800, 801, 802, 803, 804, 805, 817, 819, 820, 823, 827, 832, 833, 835, 836, 841, 845, 863, 864, 865, 867, 871, 873, 877, 881, 885, 890, 891, 895, 908, 910, 911, 920, 928, 931, 933, 935, 937, 945, 959, 962, 966, 967, 968, 995, 998, 1010, 1014, 1016, 1022, 1025, 1027, 1028, 1030, 1044, 1046, 1052, 1053, 1054, 1055, 1056, 1063, 1067, 1097, 1111, 1118, 1120, 1133, 1162, 1174, 1177, 1180, 1182, 1204, 1213, 1242, 1243, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1261, 1263, 1278, 1279, 1282, 1288, 1291, 1295, 1316, 1318, 1319, 1321, 1323, 1343, 1345, 1362, 1380, 1382, 1385, 1389, 1390, 1392], "ana": [717, 1305], "anan": [717, 1305], "ananab": 1385, "and_": 845, "ang": 1385, "angl": [766, 767], "ani": [4, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 72, 73, 79, 130, 131, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 205, 207, 210, 212, 218, 222, 224, 225, 230, 232, 233, 235, 237, 252, 254, 255, 256, 257, 258, 261, 265, 275, 280, 281, 285, 286, 287, 299, 302, 305, 306, 309, 310, 311, 314, 315, 317, 320, 321, 329, 352, 355, 356, 361, 364, 365, 389, 421, 422, 423, 441, 442, 449, 461, 478, 496, 497, 507, 508, 512, 515, 517, 519, 523, 533, 543, 550, 555, 562, 572, 573, 574, 575, 590, 591, 592, 599, 609, 612, 614, 616, 617, 619, 621, 623, 624, 627, 628, 632, 637, 640, 647, 648, 649, 654, 655, 657, 659, 661, 663, 665, 666, 668, 670, 672, 676, 680, 690, 692, 706, 724, 725, 726, 727, 728, 730, 731, 733, 735, 744, 750, 751, 752, 759, 760, 761, 763, 770, 772, 774, 775, 776, 803, 804, 805, 807, 811, 829, 835, 845, 861, 866, 867, 873, 874, 875, 877, 880, 881, 889, 890, 891, 903, 904, 907, 908, 920, 924, 925, 928, 935, 936, 937, 962, 966, 968, 970, 972, 975, 999, 1031, 1040, 1056, 1057, 1063, 1075, 1096, 1115, 1116, 1125, 1128, 1134, 1136, 1138, 1143, 1153, 1162, 1165, 1172, 1177, 1184, 1194, 1195, 1196, 1197, 1212, 1213, 1224, 1225, 1234, 1241, 1242, 1243, 1247, 1248, 1251, 1253, 1254, 1261, 1262, 1278, 1280, 1294, 1316, 1318, 1319, 1321, 1323, 1341, 1342, 1343, 1344, 1346, 1347, 1362, 1367, 1390, 1393], "anna": [268, 352, 900, 962], "annex": [711, 1299], "announc": [906, 962], "anoth": [100, 180, 213, 221, 227, 241, 257, 292, 352, 441, 444, 451, 528, 558, 596, 602, 606, 647, 657, 659, 661, 663, 665, 668, 670, 672, 703, 845, 863, 872, 884, 890, 914, 933, 962, 1056, 1065, 1117, 1125, 1147, 1180, 1241, 1242, 1291, 1362, 1384, 1385], "anti": [256, 352, 889, 945, 962, 1261, 1263, 1362, 1378], "antipattern": [150, 156, 160, 162], "any_horizont": [762, 835], "anyth": [40, 285, 352], "anywher": [408, 411, 728, 730, 731, 1316, 1318, 1319], "ap": 1385, "apach": [36, 43, 44, 47, 132, 148, 152, 153, 156, 158, 167, 208, 352, 971], "apaya": [729, 1317], "api": [0, 33, 38, 43, 47, 48, 49, 50, 51, 132, 160, 162, 165, 168, 169, 170, 171, 190, 195, 209, 261, 338, 352, 592, 807, 845, 945, 962, 1213, 1362, 1389], "apia": [450, 1064], "app": [428, 722, 1038, 1310], "appear": [41, 69, 134, 176, 177, 352, 715, 754, 845, 968, 1349, 1362, 1391], "append": [39, 40, 42, 181, 230, 256, 257, 258, 352, 644, 835, 845, 889, 890, 891, 962, 1125, 1362], "appl": [217, 246, 256, 281, 282, 305, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 352, 422, 424, 428, 650, 696, 722, 751, 845, 889, 908, 940, 941, 943, 944, 946, 947, 948, 949, 950, 951, 952, 962, 1033, 1038, 1284, 1310, 1378, 1385], "appli": [11, 21, 38, 41, 48, 63, 65, 130, 145, 152, 165, 178, 181, 185, 205, 220, 235, 258, 261, 275, 298, 299, 309, 338, 352, 377, 452, 455, 456, 457, 460, 462, 463, 464, 465, 466, 467, 468, 471, 473, 474, 478, 480, 491, 492, 494, 500, 501, 591, 592, 637, 656, 657, 658, 659, 662, 663, 669, 670, 687, 714, 715, 728, 730, 731, 735, 768, 779, 780, 793, 806, 807, 819, 824, 835, 845, 871, 891, 895, 903, 919, 920, 945, 962, 1045, 1066, 1069, 1070, 1071, 1074, 1076, 1077, 1081, 1082, 1083, 1085, 1086, 1089, 1091, 1092, 1096, 1098, 1109, 1110, 1112, 1121, 1122, 1213, 1249, 1250, 1252, 1256, 1302, 1303, 1316, 1318, 1319, 1323, 1362, 1371], "applic": [54, 310, 352, 592, 845], "apply_on_context_ent": 205, "appropri": [41, 171, 233, 280, 310, 352, 482, 643, 845, 881, 907, 962, 1100, 1236, 1362], "approx": [368, 845], "approx_n_uniqu": [352, 845, 962, 1362], "approxim": [47, 211, 352, 368, 499, 764, 845, 860, 962, 978, 1120, 1362, 1384, 1393], "april": [479, 1097, 1385, 1386], "ar": [1, 11, 12, 18, 21, 31, 33, 35, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 63, 64, 65, 96, 97, 98, 105, 111, 127, 131, 132, 133, 134, 135, 136, 137, 138, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 179, 181, 182, 183, 185, 195, 205, 209, 212, 213, 218, 220, 224, 225, 228, 231, 233, 234, 235, 240, 241, 242, 254, 256, 257, 258, 259, 261, 267, 268, 274, 276, 280, 284, 285, 286, 287, 290, 291, 295, 298, 305, 309, 310, 311, 314, 315, 319, 321, 322, 326, 327, 330, 331, 352, 364, 366, 380, 396, 401, 421, 422, 423, 431, 437, 439, 440, 449, 477, 482, 490, 495, 497, 498, 499, 500, 501, 506, 508, 523, 529, 531, 533, 534, 536, 537, 538, 539, 541, 546, 576, 583, 591, 628, 633, 640, 643, 646, 647, 648, 649, 653, 654, 657, 659, 661, 663, 665, 666, 668, 670, 672, 678, 681, 684, 686, 687, 692, 701, 705, 707, 708, 712, 713, 714, 715, 716, 718, 729, 731, 733, 738, 743, 745, 749, 750, 751, 760, 761, 763, 768, 771, 772, 773, 774, 775, 782, 784, 785, 787, 788, 803, 804, 809, 811, 814, 823, 827, 829, 832, 833, 835, 837, 838, 840, 844, 845, 846, 847, 850, 851, 852, 853, 854, 857, 861, 866, 867, 871, 874, 875, 879, 881, 884, 885, 889, 890, 891, 895, 899, 900, 904, 906, 907, 908, 910, 912, 913, 916, 917, 919, 924, 927, 928, 931, 932, 933, 938, 962, 966, 968, 975, 976, 990, 1006, 1011, 1031, 1035, 1045, 1054, 1055, 1063, 1095, 1100, 1108, 1114, 1116, 1118, 1119, 1120, 1121, 1122, 1127, 1129, 1131, 1143, 1148, 1151, 1153, 1154, 1156, 1157, 1158, 1159, 1163, 1168, 1198, 1205, 1225, 1234, 1236, 1240, 1241, 1242, 1243, 1247, 1254, 1266, 1270, 1273, 1280, 1289, 1293, 1295, 1300, 1301, 1302, 1303, 1306, 1317, 1319, 1321, 1326, 1333, 1341, 1343, 1344, 1345, 1347, 1354, 1356, 1358, 1362, 1363, 1366, 1368, 1369, 1370, 1372, 1374, 1377, 1382, 1390, 1393], "arbitrari": [52, 86, 237, 352, 444, 845, 872, 962, 968], "arbitrarili": [261, 352], "arcco": [845, 1362], "arccosh": [845, 1362], "arcsin": [845, 1362], "arcsinh": [845, 1362], "arctan": [766, 767, 845, 1362], "arctan2": 767, "arctanh": [845, 1362], "aren": [38, 48, 352, 962], "arg": [32, 56, 67, 68, 70, 71, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 147, 198, 202, 233, 275, 280, 352, 377, 637, 768, 794, 845, 881, 903, 907, 962, 1213, 1362, 1375], "arg_max": [845, 1362], "arg_min": [845, 1362], "arg_sort": [845, 1362], "arg_tru": [769, 845, 1362], "arg_uniqu": [845, 1362], "arg_wher": [378, 845], "argmax": [591, 845], "argument": [37, 40, 47, 96, 145, 147, 149, 150, 154, 162, 165, 166, 181, 183, 185, 195, 218, 222, 229, 241, 242, 257, 274, 275, 284, 290, 291, 298, 311, 318, 322, 326, 327, 331, 352, 449, 477, 490, 502, 508, 529, 591, 633, 637, 653, 687, 723, 724, 725, 732, 743, 760, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 791, 823, 827, 835, 841, 845, 873, 878, 884, 885, 890, 903, 910, 912, 913, 919, 926, 931, 932, 938, 959, 962, 968, 1063, 1095, 1108, 1148, 1311, 1312, 1313, 1320, 1344, 1362, 1384, 1385], "aris": 152, "arithmet": [235, 352], "arm": 173, "arm64": 173, "around": [38, 48, 352, 962], "arr": [310, 352, 837, 1343, 1354, 1362, 1385], "arr_bar": 1380, "arr_foo": 1380, "arrai": [131, 135, 150, 151, 154, 162, 166, 207, 228, 229, 304, 309, 310, 311, 352, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 437, 438, 439, 440, 550, 565, 566, 567, 568, 570, 579, 580, 582, 585, 587, 591, 649, 656, 658, 660, 662, 664, 667, 669, 671, 677, 749, 772, 790, 804, 824, 845, 878, 962, 967, 970, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1019, 1052, 1053, 1054, 1055, 1060, 1118, 1172, 1187, 1188, 1189, 1190, 1192, 1200, 1201, 1202, 1204, 1207, 1209, 1210, 1243, 1249, 1250, 1252, 1255, 1256, 1257, 1264, 1268, 1337, 1341, 1343, 1344, 1345, 1362, 1383, 1385, 1389, 1392], "array_agg": 1383, "array_contain": 1383, "array_get": 1383, "array_length": 1383, "array_low": 1383, "array_mean": 1383, "array_revers": 1383, "array_sum": 1383, "array_to_str": 1383, "array_uniqu": 1383, "array_upp": 1383, "arraylik": [1060, 1362], "arrow": [43, 44, 49, 131, 132, 152, 153, 156, 158, 168, 208, 254, 286, 287, 304, 306, 310, 352, 962, 971, 1337, 1343, 1362], "arrowarrayexport": [131, 132], "arrowinvaliderror": [40, 352], "arrowstreamexport": [131, 132], "as_": [1362, 1367], "as_arrai": 804, "as_dict": [151, 274, 352], "as_expr": 968, "as_seri": [213, 305, 352, 863, 962, 968], "asarrai": [207, 970], "ascend": [242, 268, 284, 352, 633, 653, 845, 885, 900, 910, 962], "ascii": [7, 21, 426, 427, 692, 702, 704, 705, 709, 710, 716, 718, 729, 738, 968, 1036, 1037, 1280, 1290, 1292, 1293, 1297, 1298, 1304, 1306, 1317, 1326], "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_case_insensit": [692, 702, 704, 716, 1280, 1290, 1292, 1304], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_horizontal_onli": 21, "ascii_lett": 1393, "ascii_markdown": 21, "ascii_no_bord": 21, "ascii_onli": 968, "ascii_t": 205, "ascii_uppercas": [320, 352], "asd": [693, 700, 1281, 1288], "asia": [138, 968, 1069, 1070, 1098], "asid": 482, "asin": 1383, "asind": 1383, "asof": [257, 352, 890, 962], "asofjoinstrategi": [257, 352, 890, 962], "assert": [174, 175, 176, 177, 181, 185, 284, 352, 857, 968], "assert_frame_equ": [175, 176, 227, 352, 1393], "assert_frame_not_equ": [174, 177], "assert_series_equ": [174, 177, 1117, 1362, 1393], "assert_series_not_equ": [175, 176], "assert_someth": 179, "assertionerror": [174, 175, 176, 177], "assign": [179, 242, 337, 352, 401, 583, 633, 643, 720, 721, 845, 885, 944, 962, 1011, 1205, 1236, 1308, 1309, 1362], "associ": [39, 41, 57, 153, 155, 180, 183, 287, 352, 967, 1373, 1375, 1379], "assum": [33, 287, 352, 895, 945, 962, 1385], "assume_rol": 33, "assumpt": [591, 845], "async": [63, 64, 152, 867, 962], "async_engin": 152, "asynchron": [64, 152, 867, 962], "asyncio": [64, 152, 867, 962], "asyncresult": [64, 867, 962], "asyncsurrealdb": 152, "ata": 27, "atan": 1383, "atan2": [766, 767, 1383], "atan2_ab": 1387, "atan2d": [767, 1383], "atan2d_ab": 1387, "atand": 1383, "atg": 27, "atgataaaggag": 27, "atol": [174, 175, 176, 177], "attain": [687, 845], "attempt": [1, 10, 48, 49, 50, 51, 63, 64, 444, 845, 866, 867, 872, 877, 904, 917, 962], "attr": [352, 355, 1362, 1367], "attribut": [66, 69, 72, 73, 74, 75, 76, 84, 88, 141, 142, 143, 144, 178, 196, 197, 199, 200, 352, 355, 837, 838, 840, 841, 846, 847, 850, 852, 853, 854, 936, 937, 962, 1354, 1356, 1358, 1362, 1363, 1367, 1368, 1369, 1370], "attributeerror": 1, "audi": [305, 352, 650, 845], "august": 482, "australia": 786, "auth": 35, "authent": [40, 154, 162, 165, 166, 167, 168, 170, 190, 352], "author": 1, "auto": [10, 38, 40, 43, 47, 48, 49, 50, 51, 63, 64, 65, 131, 133, 134, 135, 137, 154, 159, 160, 162, 165, 166, 168, 169, 170, 190, 195, 316, 352, 866, 867, 877, 904, 917, 962, 1393], "auto_structifi": [290, 326, 352, 912, 931, 962], "autofilt": [41, 352], "autofit": [41, 352], "autogener": [150, 151, 155, 161, 165], "automat": [8, 38, 48, 65, 131, 133, 134, 135, 137, 138, 147, 150, 151, 152, 153, 159, 160, 162, 165, 167, 168, 169, 181, 185, 187, 190, 290, 299, 326, 352, 591, 648, 723, 724, 725, 824, 845, 912, 920, 931, 962, 1241, 1242, 1311, 1312, 1313, 1346, 1362, 1372, 1374, 1377, 1390], "autumn": [714, 715], "avail": [41, 47, 51, 140, 152, 153, 154, 163, 166, 167, 179, 192, 193, 194, 205, 276, 299, 351, 352, 482, 643, 824, 837, 838, 840, 844, 845, 846, 847, 850, 851, 852, 853, 854, 857, 920, 960, 961, 962, 968, 1058, 1236, 1354, 1356, 1358, 1362, 1363, 1366, 1368, 1369, 1370, 1381], "available_timezon": [72, 968], "averag": [41, 352, 498, 499, 500, 501, 643, 845, 1119, 1120, 1121, 1122, 1236, 1362, 1379], "avg": 1383, "avocado": 1385, "avoid": [181, 185, 233, 280, 286, 352, 363, 845, 881, 907, 962], "avro": [36, 148, 198, 352, 857], "avrocompress": [36, 352], "aw": [33, 38, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 352, 962], "awai": 1384, "await": [64, 152, 867, 956, 962], "await_result": [906, 962], "awar": [11, 152, 254, 286, 287, 306, 352, 499, 692, 702, 704, 716, 731, 845, 962, 1120, 1280, 1290, 1292, 1304, 1319, 1362], "aws_access_key_id": [40, 154, 166, 170, 352], "aws_region": [40, 166, 170, 352], "aws_secret_access_kei": [40, 154, 166, 170, 352], "awsassumerolekwarg": 33, "axi": [267, 319, 352, 355, 766, 767, 899, 927, 962, 1362, 1367], "aya": [718, 1306, 1317], "az": [154, 166, 167], "azur": [34, 38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 167, 168, 169, 170, 195, 352, 962], "azure_storage_account_kei": [154, 166, 167], "azure_storage_account_nam": [154, 166, 167], "b": [1, 11, 36, 38, 40, 43, 44, 47, 52, 60, 65, 88, 96, 102, 105, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 152, 155, 209, 210, 211, 212, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 249, 251, 252, 253, 254, 255, 256, 259, 260, 262, 264, 266, 269, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 295, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 352, 355, 361, 363, 364, 366, 367, 377, 379, 384, 389, 405, 406, 407, 408, 409, 410, 411, 412, 417, 420, 422, 423, 435, 442, 446, 479, 482, 502, 504, 506, 507, 508, 510, 520, 521, 524, 527, 528, 529, 531, 534, 536, 537, 538, 539, 544, 550, 555, 562, 572, 573, 574, 575, 591, 592, 597, 613, 616, 617, 618, 619, 620, 621, 622, 630, 631, 633, 637, 640, 643, 647, 648, 650, 652, 679, 685, 687, 694, 698, 703, 707, 714, 715, 739, 740, 751, 754, 758, 760, 761, 762, 763, 764, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 791, 792, 793, 794, 797, 798, 799, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 821, 822, 824, 826, 827, 828, 829, 830, 834, 841, 845, 860, 861, 864, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 907, 908, 909, 911, 912, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 933, 934, 935, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 962, 968, 974, 977, 999, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1035, 1039, 1040, 1057, 1060, 1097, 1100, 1114, 1117, 1118, 1125, 1128, 1148, 1153, 1172, 1194, 1195, 1196, 1197, 1234, 1239, 1282, 1286, 1291, 1295, 1302, 1303, 1327, 1329, 1330, 1332, 1344, 1349, 1362, 1372, 1374, 1375, 1377, 1378, 1379, 1380, 1385, 1386, 1387, 1390], "b1": [58, 60], "b2": [58, 60], "b345": [41, 352], "b4": [41, 352], "b_b": [299, 352], "b_btm_by_a": [422, 845], "b_btm_by_b": [422, 845], "b_by_ca": [422, 751, 845], "b_by_cb": [422, 751, 845], "b_div_a": [247, 352], "b_is_not_nan": [537, 845], "b_isnan": [536, 845], "b_isnul": [539, 845], "b_not_nul": [538, 845], "b_revers": [617, 621, 650, 845], "b_suffix": 622, "b_sum": [331, 938], "b_top_by_a": [751, 845], "b_top_by_b": [751, 845], "ba": [444, 502, 606, 722, 791, 845, 968], "back": [4, 57, 170, 230, 242, 292, 310, 311, 352, 606, 633, 715, 845, 866, 877, 885, 904, 914, 917, 937, 962, 1125, 1344, 1362], "backend": [40, 152, 153, 154, 166, 167, 352, 355, 1362, 1367], "background": [63, 64, 352, 356, 866, 867, 961, 962], "backward": [47, 51, 232, 257, 352, 404, 449, 470, 507, 845, 880, 890, 962, 1014, 1063, 1088, 1128, 1362], "backward_fil": [507, 513, 845, 1128, 1133, 1362], "bad": [714, 715, 1302, 1303], "balanc": [184, 186, 1393], "ballon_dor": [699, 701, 1287, 1289], "banana": [217, 305, 334, 336, 339, 340, 341, 342, 343, 344, 345, 352, 422, 650, 696, 722, 751, 845, 941, 943, 946, 947, 948, 949, 950, 951, 952, 1385], "banded_column": [41, 352], "banded_row": [41, 352], "bar": [36, 38, 40, 43, 44, 45, 46, 47, 146, 159, 160, 213, 216, 217, 218, 222, 223, 224, 225, 226, 227, 230, 233, 235, 237, 238, 239, 244, 246, 247, 248, 250, 256, 260, 261, 262, 263, 264, 265, 266, 269, 270, 273, 276, 278, 280, 281, 282, 285, 288, 289, 290, 292, 297, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 317, 318, 323, 324, 325, 330, 352, 355, 425, 444, 526, 596, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 684, 693, 695, 698, 700, 701, 717, 719, 721, 726, 727, 764, 775, 776, 777, 792, 797, 798, 801, 802, 808, 810, 812, 813, 815, 816, 823, 826, 830, 834, 835, 841, 845, 863, 868, 869, 873, 874, 875, 876, 881, 887, 888, 889, 902, 907, 908, 911, 912, 925, 926, 930, 962, 967, 968, 1034, 1184, 1273, 1281, 1283, 1286, 1288, 1289, 1305, 1309, 1314, 1315, 1362, 1376, 1378, 1379, 1380, 1382, 1385, 1388], "bar2": 1385, "bar22": [235, 352], "bar_": 719, "bar_3": [307, 352], "bar_4": [307, 352], "bar_a": [276, 352], "bar_at_2": 1380, "bar_avg": 1379, "bar_b": [276, 352], "bar_color": [41, 352], "bar_max": 1379, "bar_median": 1379, "bar_min": 1379, "bar_negative_border_color_sam": [41, 352], "bar_negative_color_sam": [41, 352], "bar_std": 1379, "bar_sum": 1379, "bar_var": 1379, "bare": [599, 600, 968], "base": [32, 41, 52, 53, 54, 70, 116, 118, 155, 183, 225, 233, 242, 258, 280, 284, 352, 450, 458, 495, 498, 499, 500, 501, 508, 523, 528, 586, 587, 591, 592, 638, 640, 648, 653, 657, 659, 661, 663, 665, 668, 670, 672, 733, 793, 845, 881, 885, 891, 907, 910, 962, 968, 1064, 1072, 1114, 1119, 1120, 1121, 1122, 1143, 1147, 1208, 1209, 1213, 1232, 1234, 1241, 1242, 1321, 1353, 1362, 1378, 1384, 1393], "base64": [406, 407, 694, 695, 1016, 1017, 1282, 1283], "base_nam": [316, 352], "base_path": [52, 53, 54], "base_utc_offset": [458, 1072], "baseexcept": 1390, "basepartitioncontext": 53, "basi": [41, 155, 181, 352], "basic": [41, 207, 352, 598, 970, 1393], "basic_chart": [41, 352], "batch": [44, 96, 140, 145, 151, 152, 158, 160, 169, 171, 286, 314, 352, 866, 895, 962], "batch_siz": [38, 48, 145, 150, 151, 152, 160, 169, 171, 314, 352, 962], "batchedcsvread": 151, "baz": [237, 247, 248, 318, 352, 701, 719, 721, 792, 801, 816, 841, 888, 926, 962, 967, 968, 1289, 1309, 1376, 1382, 1385], "bb": [968, 1058, 1362, 1385, 1390], "bbb": [1, 41, 352, 739, 741, 742, 968], "bc": [703, 715, 828, 1291], "bcbc45": 1385, "bea": 13, "bear": 968, "bearer": 190, "bearer_token": 190, "beauti": 13, "becaus": [160, 169, 228, 242, 259, 261, 320, 338, 352, 512, 555, 583, 845, 885, 945, 962, 1118, 1177, 1213, 1362], "becom": [183, 351, 960, 961], "bed3": [41, 352], "been": [5, 31, 41, 55, 188, 209, 333, 352, 514, 592, 610, 643, 845, 940, 1236, 1362], "beetl": [305, 352, 650, 845], "befor": [41, 48, 49, 50, 51, 52, 71, 72, 145, 147, 150, 152, 155, 165, 171, 174, 175, 176, 177, 187, 205, 230, 242, 257, 299, 309, 314, 318, 352, 415, 416, 418, 419, 439, 440, 441, 591, 633, 634, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 698, 738, 745, 773, 821, 822, 845, 885, 887, 890, 926, 962, 1025, 1026, 1028, 1029, 1054, 1055, 1056, 1125, 1229, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1286, 1326, 1333, 1362, 1378], "beforehand": [728, 730, 731, 1316, 1318, 1319], "begin": [13, 41, 248, 352, 498, 500, 501, 527, 528, 699, 729, 845, 888, 962, 1119, 1121, 1122, 1146, 1147, 1287, 1317, 1362], "behav": [233, 280, 352, 508, 592, 724, 725, 835, 845, 881, 907, 962], "behavior": [47, 51, 55, 162, 170, 224, 225, 233, 256, 257, 352, 388, 514, 558, 560, 698, 792, 801, 845, 874, 875, 889, 890, 959, 962, 998, 1180, 1182, 1286], "behaviour": [11, 57, 224, 225, 233, 280, 299, 352, 691, 699, 700, 703, 714, 715, 752, 824, 845, 874, 875, 881, 907, 920, 962, 1279, 1287, 1288, 1291, 1302, 1303], "behind": 187, "being": [14, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 79, 130, 141, 142, 143, 144, 145, 146, 150, 151, 152, 154, 155, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 213, 229, 258, 299, 307, 309, 314, 321, 352, 355, 356, 441, 442, 449, 461, 523, 592, 640, 654, 655, 657, 659, 661, 663, 665, 666, 668, 670, 672, 698, 770, 772, 790, 803, 804, 835, 845, 863, 866, 867, 877, 878, 891, 904, 920, 928, 936, 962, 1040, 1056, 1057, 1063, 1075, 1143, 1234, 1247, 1248, 1251, 1253, 1254, 1286, 1338, 1341, 1346, 1362, 1367, 1393], "belong": [1, 242, 352, 885, 962], "below": [20, 40, 154, 155, 166, 167, 225, 233, 276, 280, 352, 482, 507, 705, 714, 715, 729, 784, 785, 787, 788, 832, 833, 835, 841, 845, 881, 907, 962, 1100, 1293, 1302, 1303, 1317], "best": [167, 261, 338, 352, 592, 845, 1213, 1362], "better": [261, 309, 310, 338, 352, 427, 592, 710, 845, 862, 945, 962, 1037, 1261, 1263, 1298, 1362], "between": [25, 65, 101, 178, 179, 181, 185, 210, 218, 256, 268, 278, 286, 344, 352, 389, 423, 445, 446, 482, 529, 553, 562, 572, 573, 574, 575, 634, 640, 641, 664, 665, 690, 706, 766, 767, 770, 775, 777, 804, 818, 821, 822, 845, 889, 900, 905, 951, 962, 999, 1032, 1039, 1059, 1060, 1100, 1148, 1175, 1184, 1194, 1195, 1196, 1197, 1229, 1234, 1235, 1253, 1278, 1294, 1362, 1379, 1387], "between_ab": [529, 845], "beyond": [52, 736, 1324], "bia": [500, 501, 541, 654, 666, 684, 845, 1121, 1122, 1163, 1247, 1254, 1273, 1362], "bias": [541, 684, 845, 1163, 1273, 1362], "big": [151, 409, 1019], "big_fil": 151, "bigidx": 139, "bigqueri": 153, "bigquery_format": 198, "bin": [442, 523, 640, 733, 759, 838, 845, 1057, 1143, 1234, 1321, 1356, 1362, 1367], "bin2int": 409, "bin_count": [523, 845, 1143, 1362], "bin_i": [759, 845], "bin_x": [759, 845], "bin_xor_xi": [759, 845], "binari": [41, 43, 146, 152, 221, 292, 352, 405, 406, 407, 408, 409, 410, 411, 444, 606, 694, 845, 872, 914, 962, 968, 1015, 1016, 1018, 1019, 1020, 1021, 1282, 1381], "binary_str": [759, 845], "bind": 155, "birthdai": 150, "bit": [71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 413, 414, 415, 416, 418, 419, 645, 691, 845, 1023, 1025, 1026, 1028, 1029, 1238, 1279, 1362, 1381, 1385], "bit_and": 1383, "bit_count": 1383, "bit_length": 1383, "bit_or": 1383, "bit_xor": 1383, "bitmap": [228, 352, 1118, 1362], "bitwis": [365, 412, 417, 420, 632, 759, 760, 761, 762, 763, 845, 1022, 1027, 1030, 1362, 1383, 1389], "bitwise_and": [845, 1362], "bitwise_count_on": [845, 1362], "bitwise_count_zero": [845, 1362], "bitwise_leading_on": [845, 1362], "bitwise_leading_zero": [845, 1362], "bitwise_or": [845, 1362], "bitwise_trailing_on": [845, 1362], "bitwise_trailing_zero": [845, 1362], "bitwise_xor": [845, 1362], "bla": [693, 700, 1281, 1288], "black": [261, 352, 405, 406, 407, 408, 411], "blindli": [555, 1177], "block": [21, 64, 241, 317, 352, 867, 884, 908, 925, 934, 935, 945, 962, 1261, 1263, 1362], "blue": [56, 97, 98, 405, 406, 407, 408, 411, 756, 845, 1351, 1362], "bob": [150, 268, 352, 900, 962, 1391], "bodi": [41, 352, 356], "bold": [41, 352], "bom": [38, 48, 352, 962], "bool": [5, 7, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 40, 41, 47, 48, 49, 50, 51, 52, 54, 55, 57, 63, 64, 65, 96, 97, 131, 132, 133, 134, 136, 137, 138, 145, 146, 147, 150, 151, 152, 154, 155, 156, 158, 160, 161, 162, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 207, 209, 212, 213, 214, 215, 220, 222, 227, 232, 233, 234, 235, 239, 240, 241, 242, 246, 249, 250, 251, 254, 256, 257, 265, 274, 276, 280, 281, 285, 286, 287, 288, 293, 296, 298, 299, 302, 305, 307, 310, 311, 315, 316, 317, 318, 321, 322, 324, 326, 334, 336, 339, 342, 352, 363, 364, 365, 366, 367, 377, 380, 381, 384, 388, 389, 397, 402, 405, 406, 408, 411, 422, 423, 424, 428, 436, 437, 438, 439, 440, 441, 442, 449, 461, 462, 478, 495, 496, 497, 498, 500, 501, 517, 519, 520, 523, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 546, 547, 551, 555, 558, 560, 562, 571, 578, 583, 584, 590, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 627, 628, 630, 632, 633, 635, 636, 640, 643, 645, 654, 655, 656, 658, 660, 662, 664, 666, 667, 669, 671, 675, 677, 679, 684, 686, 687, 690, 691, 692, 693, 694, 696, 702, 703, 704, 706, 714, 715, 716, 719, 720, 722, 728, 730, 731, 733, 735, 739, 741, 742, 751, 753, 756, 759, 760, 761, 762, 763, 765, 768, 769, 770, 771, 774, 775, 777, 778, 779, 784, 785, 787, 788, 793, 799, 800, 803, 804, 805, 807, 811, 817, 820, 823, 824, 827, 829, 832, 833, 835, 836, 845, 861, 863, 864, 866, 867, 871, 873, 877, 880, 881, 884, 885, 889, 890, 895, 899, 904, 907, 908, 915, 917, 919, 920, 924, 925, 926, 927, 928, 931, 936, 937, 941, 943, 946, 949, 962, 967, 968, 970, 975, 976, 987, 990, 991, 994, 998, 999, 1007, 1012, 1015, 1016, 1018, 1021, 1032, 1033, 1035, 1038, 1040, 1044, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1063, 1075, 1076, 1096, 1114, 1116, 1117, 1119, 1121, 1122, 1129, 1131, 1139, 1140, 1143, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1168, 1169, 1173, 1177, 1180, 1182, 1184, 1193, 1200, 1206, 1213, 1225, 1227, 1230, 1231, 1234, 1236, 1237, 1238, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1263, 1264, 1268, 1273, 1275, 1278, 1279, 1280, 1281, 1282, 1284, 1290, 1291, 1292, 1294, 1302, 1303, 1304, 1307, 1308, 1310, 1316, 1318, 1319, 1321, 1323, 1338, 1343, 1344, 1348, 1351, 1362, 1371, 1372, 1374, 1380, 1385, 1390], "boolean": [57, 96, 181, 212, 233, 235, 280, 298, 315, 352, 364, 365, 366, 380, 381, 384, 405, 408, 411, 422, 461, 462, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 546, 547, 551, 630, 632, 635, 636, 687, 707, 751, 758, 759, 768, 769, 827, 835, 845, 861, 881, 907, 919, 924, 962, 968, 975, 976, 988, 990, 991, 994, 1015, 1075, 1076, 1129, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1168, 1169, 1173, 1227, 1230, 1231, 1263, 1279, 1353, 1362, 1382], "border": 21, "both": [11, 26, 38, 48, 56, 97, 98, 152, 155, 170, 216, 242, 256, 257, 258, 268, 284, 285, 311, 321, 352, 367, 431, 442, 482, 502, 529, 640, 653, 657, 659, 661, 663, 665, 668, 670, 672, 718, 784, 785, 787, 788, 803, 804, 832, 833, 835, 841, 845, 856, 885, 889, 890, 891, 900, 910, 917, 928, 962, 968, 1045, 1100, 1148, 1306, 1344, 1362, 1390, 1391], "boto3": 33, "bottom": [212, 352, 422, 845, 861, 962], "bottom_k": [315, 352, 422, 750, 751, 845, 924, 962, 1347, 1362], "bottom_k_bi": [421, 750, 751, 845], "bound": [112, 150, 151, 228, 242, 352, 388, 431, 529, 558, 560, 583, 589, 755, 765, 784, 785, 787, 788, 803, 804, 832, 833, 845, 885, 962, 998, 1045, 1118, 1148, 1180, 1182, 1211, 1350, 1362, 1380], "boundari": [242, 352, 431, 736, 845, 885, 962, 1045, 1324, 1362], "box": [21, 261, 352], "box_draw": 21, "branch": [63, 835, 866, 877, 904, 917, 962], "break": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 79, 130, 141, 142, 143, 144, 145, 146, 154, 160, 162, 163, 165, 166, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 256, 258, 299, 309, 314, 321, 352, 355, 356, 441, 442, 449, 461, 523, 592, 640, 654, 655, 657, 659, 661, 663, 665, 666, 668, 670, 672, 770, 772, 803, 804, 845, 866, 867, 877, 889, 891, 904, 920, 928, 936, 962, 1040, 1056, 1057, 1063, 1075, 1143, 1234, 1247, 1248, 1251, 1253, 1254, 1341, 1346, 1362, 1367], "breakpoint": [442, 523, 640, 845, 1057, 1143, 1234, 1362], "breezah": 165, "breviti": 205, "broadcast": [716, 772, 968, 1304], "broader": 968, "brotli": [47, 51, 352, 962], "brussel": [476, 1094], "bst": [454, 458, 476, 1068, 1072, 1094], "bucket": [40, 154, 166, 167, 170, 352, 477, 490, 523, 845, 1095, 1108, 1143, 1362], "bud": [714, 715, 1302, 1303], "budget": 1371, "buffer": [52, 150, 151, 152, 228, 254, 352, 409, 1019, 1118, 1362], "buffer_s": [254, 352], "bug": [96, 145, 591, 592, 845, 895, 945, 962, 1213, 1362], "build": [62, 132, 968, 1393], "built": 101, "builtin": [148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 221, 352, 444, 845, 872, 962], "bundl": 205, "busi": [449, 461, 770, 1063, 1075], "by_alternate_row": 1, "by_dtyp": 968, "by_first_letter_of_column_nam": 58, "by_first_letter_of_column_valu": 58, "by_index": 968, "by_left": [257, 352, 890, 962], "by_nam": 968, "by_pred": [285, 352], "by_right": [257, 352, 890, 962], "bye": 1, "byi": 1385, "bys": [242, 352, 885, 962], "byte": [36, 38, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 146, 148, 149, 150, 151, 156, 157, 158, 159, 160, 163, 164, 165, 168, 169, 221, 228, 292, 352, 409, 426, 427, 444, 606, 703, 704, 705, 709, 710, 718, 729, 845, 872, 914, 962, 1019, 1036, 1037, 1118, 1291, 1292, 1293, 1297, 1298, 1306, 1317, 1362, 1385], "bytesio": [41, 43, 44, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 221, 292, 352, 444, 606, 845, 872, 914, 962], "c": [1, 11, 36, 38, 40, 43, 44, 47, 52, 58, 60, 65, 105, 132, 134, 136, 138, 141, 147, 155, 165, 209, 210, 212, 213, 214, 215, 216, 217, 219, 222, 223, 224, 225, 226, 227, 229, 233, 235, 238, 239, 240, 241, 242, 244, 246, 247, 255, 256, 259, 260, 262, 264, 266, 269, 271, 272, 273, 274, 276, 277, 278, 280, 281, 282, 283, 285, 288, 289, 290, 297, 298, 299, 300, 301, 303, 304, 307, 308, 309, 310, 311, 312, 315, 319, 320, 321, 323, 324, 326, 331, 334, 335, 336, 339, 340, 342, 345, 346, 352, 356, 361, 363, 364, 366, 384, 422, 442, 482, 520, 529, 550, 562, 592, 599, 616, 617, 631, 633, 637, 640, 679, 720, 728, 751, 754, 761, 763, 764, 766, 767, 768, 771, 772, 774, 775, 776, 777, 779, 780, 782, 792, 793, 794, 797, 798, 801, 802, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 824, 826, 828, 829, 830, 834, 841, 845, 861, 863, 864, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 881, 884, 885, 889, 893, 902, 904, 907, 908, 909, 911, 912, 917, 918, 919, 920, 924, 927, 928, 931, 933, 938, 941, 942, 943, 946, 947, 949, 952, 953, 962, 968, 1039, 1057, 1148, 1172, 1234, 1308, 1316, 1330, 1349, 1362, 1372, 1374, 1375, 1377, 1378, 1379, 1380, 1385, 1390], "c00": 968, "c01": 968, "c02": 968, "c03": 968, "c05": 968, "c1": 401, "c123": 1385, "c2": 401, "c20": 968, "c25": 968, "c3": 401, "c40": 968, "c45": 1385, "c4d79b": [41, 352], "c50": 968, "c567": [41, 352], "c60": 968, "c75": 968, "c80": 968, "c8ae6d2b276": [41, 352], "c93": 968, "c95": 968, "c96": 968, "c97": 968, "c98": 968, "c99": 968, "c_btm_by_a": [422, 845], "c_btm_by_b": [422, 845], "c_by_ca": [422, 751, 845], "c_by_cb": [422, 751, 845], "c_c_c": [824, 920, 962], "c_contigu": [310, 352], "c_max": [633, 845], "c_mean_squar": [331, 938], "c_min": [633, 845], "c_top_by_a": [751, 845], "c_top_by_b": [751, 845], "c_total": 1390, "cach": [56, 63, 97, 98, 125, 156, 165, 168, 170, 174, 175, 176, 177, 189, 647, 648, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 728, 730, 731, 735, 845, 856, 866, 877, 904, 917, 962, 1035, 1241, 1242, 1316, 1318, 1319, 1323, 1362], "cadi": [276, 352], "cafe": [733, 1321], "caf\u00e9": [426, 427, 709, 710, 968, 1036, 1037, 1297, 1298], "calamin": 155, "calcul": [41, 47, 51, 57, 220, 242, 300, 323, 352, 445, 498, 499, 500, 501, 541, 553, 572, 579, 585, 589, 654, 666, 684, 689, 755, 757, 777, 821, 822, 826, 834, 845, 871, 885, 921, 929, 962, 1058, 1059, 1119, 1120, 1121, 1122, 1163, 1175, 1194, 1247, 1254, 1273, 1277, 1352, 1362], "calendar": [71, 72, 242, 257, 284, 322, 352, 452, 463, 465, 472, 477, 490, 494, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 789, 832, 833, 845, 885, 890, 910, 962, 1066, 1077, 1082, 1090, 1095, 1108, 1112, 1120, 1362], "calendar_year": [463, 494], "call": [10, 38, 40, 41, 43, 47, 48, 49, 50, 51, 56, 63, 136, 145, 147, 150, 151, 152, 154, 155, 156, 160, 162, 165, 166, 168, 169, 170, 174, 175, 176, 177, 181, 185, 195, 205, 212, 241, 242, 259, 261, 284, 299, 310, 315, 351, 352, 421, 422, 437, 440, 449, 461, 591, 592, 616, 617, 619, 621, 623, 624, 647, 648, 680, 750, 751, 770, 776, 841, 845, 861, 866, 877, 884, 885, 904, 910, 917, 920, 924, 959, 960, 961, 962, 968, 1031, 1063, 1075, 1213, 1242, 1269, 1343, 1347, 1362, 1372, 1376, 1390], "callabl": [52, 53, 54, 58, 59, 60, 61, 96, 145, 165, 235, 261, 275, 281, 338, 352, 401, 583, 591, 592, 617, 618, 637, 655, 779, 780, 793, 806, 807, 819, 845, 895, 903, 908, 945, 962, 1011, 1205, 1213, 1248, 1362], "callback": [47, 51, 52, 53, 54, 142, 144, 352, 962], "caller": [96, 153, 268, 352, 583, 895, 900, 945, 962], "cam": [281, 352, 908, 962], "can": [1, 15, 28, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 55, 56, 57, 63, 71, 72, 74, 88, 96, 97, 98, 134, 145, 150, 151, 152, 154, 155, 156, 160, 161, 162, 165, 166, 168, 169, 170, 171, 179, 180, 181, 185, 187, 190, 195, 205, 207, 212, 214, 224, 225, 226, 235, 237, 241, 242, 249, 251, 253, 256, 257, 261, 272, 276, 284, 286, 287, 290, 292, 293, 298, 309, 310, 314, 315, 316, 320, 326, 329, 338, 352, 355, 364, 401, 422, 437, 440, 441, 444, 449, 461, 469, 470, 472, 476, 479, 482, 490, 499, 505, 508, 529, 555, 583, 591, 592, 599, 603, 606, 607, 613, 616, 617, 619, 621, 623, 624, 633, 638, 640, 645, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 677, 679, 684, 687, 692, 701, 708, 714, 715, 716, 723, 724, 725, 728, 739, 751, 768, 770, 783, 786, 793, 795, 799, 800, 803, 807, 824, 835, 841, 844, 845, 856, 861, 862, 866, 867, 872, 874, 875, 877, 885, 889, 890, 910, 912, 914, 915, 917, 919, 920, 924, 931, 934, 935, 962, 968, 970, 1011, 1056, 1063, 1075, 1087, 1088, 1090, 1094, 1095, 1097, 1100, 1108, 1120, 1126, 1148, 1177, 1205, 1213, 1218, 1232, 1234, 1238, 1242, 1261, 1263, 1264, 1267, 1273, 1280, 1281, 1289, 1296, 1302, 1303, 1304, 1311, 1312, 1313, 1316, 1341, 1343, 1362, 1367, 1377, 1390], "cancel": [866, 962], "candid": [699, 701, 1287, 1289], "cannot": [1, 47, 48, 49, 50, 51, 63, 64, 107, 110, 150, 151, 155, 156, 158, 160, 161, 162, 170, 187, 205, 257, 261, 287, 288, 310, 329, 338, 352, 406, 482, 502, 571, 592, 607, 675, 694, 720, 741, 807, 845, 866, 867, 877, 890, 904, 917, 935, 937, 945, 962, 968, 1016, 1100, 1193, 1213, 1260, 1282, 1308, 1343, 1362], "capabl": [1, 41, 352], "capac": [228, 296, 352, 1118, 1268, 1362], "capit": [736, 1324], "captur": [699, 701, 714, 715, 1287, 1289, 1302, 1303], "car": [281, 305, 352, 650, 845, 908, 962], "cardin": [211, 352, 368, 764, 845, 860, 962, 978, 1362], "care": [41, 293, 352, 592, 633, 677, 845, 915, 962, 1264, 1362], "cars_revers": [650, 845], "cartesian": [256, 352, 889, 962], "case": [41, 56, 57, 64, 96, 105, 131, 133, 134, 135, 137, 145, 147, 152, 159, 160, 169, 170, 187, 230, 242, 254, 261, 276, 284, 286, 287, 306, 309, 310, 352, 450, 499, 591, 603, 604, 617, 633, 653, 691, 692, 700, 702, 703, 704, 714, 715, 716, 736, 835, 845, 867, 885, 907, 910, 962, 968, 1064, 1120, 1125, 1279, 1280, 1288, 1290, 1291, 1292, 1302, 1303, 1304, 1324, 1341, 1362], "cast": [1, 40, 55, 59, 60, 131, 133, 134, 137, 147, 170, 174, 175, 176, 177, 235, 242, 275, 284, 309, 310, 314, 326, 352, 367, 439, 440, 451, 479, 482, 493, 632, 637, 638, 645, 647, 653, 707, 708, 738, 745, 749, 773, 774, 825, 845, 857, 885, 903, 910, 931, 962, 968, 1040, 1054, 1055, 1065, 1097, 1100, 1111, 1232, 1238, 1295, 1296, 1326, 1333, 1339, 1343, 1345, 1346, 1362, 1383], "cast_opt": [55, 170], "cast_str_to_int": [275, 352, 903, 962], "cast_to_supertyp": [147, 845], "cat": [27, 56, 97, 98, 442, 640, 691, 693, 734, 737, 749, 774, 840, 845, 968, 1057, 1143, 1234, 1279, 1281, 1322, 1325, 1358, 1362], "catalog": [0, 857], "catalog_nam": [191, 193, 194, 195], "cataloginfo": [192, 203], "categor": [40, 56, 75, 97, 98, 100, 174, 175, 176, 177, 256, 307, 352, 424, 425, 426, 427, 428, 442, 640, 647, 648, 749, 845, 968, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1057, 1234, 1241, 1242, 1345, 1362], "categori": [41, 56, 75, 98, 307, 352, 425, 442, 523, 640, 845, 1034, 1057, 1143, 1234, 1338, 1362], "categorical_as_str": [174, 175, 176, 177], "categoricalord": 69, "categoricaltyp": [304, 352], "caus": [113, 122, 132, 150, 151, 152, 165, 209, 230, 310, 352, 591, 845, 1125, 1343, 1362], "cba": 725, "cbrt": [845, 1362, 1383], "cbrt_a": 1384, "cc": [502, 791, 845, 968, 1058, 1362, 1385], "ccc": [1, 41, 352, 739, 741, 742, 968, 1385], "ccy": 1393, "cd": [715, 739, 741, 742, 968], "cd34": 715, "cdatainterfac": [132, 208, 971], "cde": [968, 1385], "cdt": [477, 490, 1095, 1108], "ceil": [59, 845, 1362, 1383], "ceil_a": 1384, "cell": [16, 17, 41, 276, 352], "cent": [452, 1302], "center": [16, 17, 41, 352, 498, 500, 501, 654, 655, 656, 658, 660, 662, 664, 666, 667, 669, 671, 845, 1119, 1121, 1122, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1362], "central": [166, 167, 205, 541, 684, 845, 1163, 1273, 1362], "centuri": 1386, "certain": [52, 247, 322, 352, 724, 725, 841, 866, 904, 962, 1362], "certainli": [728, 730, 731, 1316, 1318, 1319], "cest": [476, 1094], "cet": [476, 1094], "cfg": [2, 4, 18, 205], "cfg_ascii_fram": 205, "cfg_markdown": 205, "cfg_verbos": 205, "cfoo": [933, 962], "chain": [616, 617, 619, 621, 623, 624, 835], "chanc": [178, 181, 185, 1393], "chang": [31, 32, 33, 34, 35, 38, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 63, 64, 73, 79, 130, 132, 138, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 154, 155, 156, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 212, 242, 256, 258, 276, 284, 299, 304, 309, 314, 315, 321, 322, 328, 352, 355, 356, 422, 441, 442, 445, 449, 461, 482, 498, 500, 501, 523, 592, 633, 634, 640, 647, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 732, 751, 770, 772, 803, 804, 821, 822, 835, 845, 861, 866, 867, 877, 885, 889, 891, 904, 910, 920, 924, 928, 934, 936, 962, 968, 1039, 1040, 1056, 1057, 1063, 1075, 1100, 1117, 1119, 1121, 1122, 1143, 1229, 1234, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1268, 1320, 1337, 1341, 1346, 1362, 1367, 1390], "changes_length": [147, 845], "char": [28, 150, 165, 700, 1288], "char_length": 1385, "charact": [7, 9, 13, 21, 27, 28, 29, 38, 39, 48, 99, 149, 150, 151, 153, 165, 352, 426, 427, 472, 697, 698, 700, 705, 709, 710, 712, 713, 714, 715, 718, 719, 720, 723, 724, 725, 726, 727, 729, 736, 738, 904, 962, 968, 1036, 1037, 1090, 1285, 1286, 1288, 1293, 1297, 1298, 1300, 1301, 1302, 1303, 1306, 1307, 1308, 1311, 1312, 1313, 1317, 1324, 1326, 1385], "character_length": 1385, "characterist": [181, 185], "charli": [150, 1391], "chart": [41, 352, 355, 904, 962, 1362, 1367], "cheap": [214, 215, 291, 327, 352, 864, 865, 913, 932, 962, 1044, 1046, 1362], "cheaper": [558, 1180], "check": [40, 72, 107, 150, 151, 165, 174, 175, 176, 177, 189, 227, 252, 256, 257, 352, 384, 405, 408, 411, 424, 428, 520, 529, 533, 551, 691, 696, 703, 722, 845, 889, 890, 895, 962, 994, 1015, 1018, 1021, 1033, 1038, 1117, 1139, 1140, 1150, 1153, 1160, 1162, 1173, 1279, 1284, 1291, 1310, 1362], "check_column_ord": [174, 175], "check_dtyp": [174, 175, 176, 177, 967, 1117, 1362], "check_exact": [174, 175, 176, 177], "check_nam": [176, 177, 1117, 1362], "check_ord": [176, 177], "check_order_observ": 936, "check_row_ord": [174, 175], "check_sorted": [257, 352, 890, 962], "children": 141, "choos": [47, 49, 51, 242, 276, 352, 482, 885, 962, 1100], "chrono": [38, 48, 101, 352, 479, 482, 728, 730, 731, 735, 962, 1097, 1100, 1316, 1318, 1319, 1323, 1385, 1386], "chunk": [15, 51, 140, 150, 151, 154, 160, 162, 165, 166, 168, 169, 170, 181, 185, 230, 255, 271, 310, 352, 367, 644, 845, 962, 977, 1043, 1125, 1137, 1219, 1237, 1337, 1343, 1362], "chunk_length": 1362, "chunkedarrai": [131, 271, 352], "citi": [714, 715], "clang": 173, "clariti": [285, 352], "class": [1, 18, 32, 33, 34, 35, 52, 53, 54, 55, 56, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 116, 118, 141, 142, 143, 144, 178, 179, 190, 196, 197, 199, 200, 287, 292, 352, 606, 803, 832, 841, 845, 851, 857, 869, 876, 911, 930, 936, 937, 962, 967, 1342, 1362, 1366, 1374, 1390], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 221, 352, 444, 514, 845, 872, 962, 1372, 1390], "claus": [857, 1380, 1389], "clean": [728, 730, 731, 1316, 1318, 1319], "cleaner": 205, "cleanli": [11, 240, 352, 1390], "clear": [56, 97, 215, 352, 865, 962, 1046, 1362], "clearer": 134, "clickhous": 153, "client": [33, 152, 190], "clip": [845, 1362], "clipboard": [37, 149, 352, 857], "clone": [133, 134, 135, 136, 137, 214, 310, 352, 864, 962, 1044, 1362], "close": [41, 48, 49, 50, 51, 53, 152, 242, 284, 299, 352, 442, 529, 588, 640, 653, 657, 659, 661, 663, 665, 668, 670, 672, 684, 784, 785, 787, 788, 803, 804, 832, 833, 845, 885, 910, 920, 962, 1057, 1148, 1234, 1273, 1362], "closedinterv": [242, 284, 352, 529, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 803, 804, 832, 833, 845, 885, 910, 962, 1148, 1362], "closest": [131, 257, 352, 890, 962, 1379, 1384], "closur": [657, 659, 668, 670, 672, 845], "cloud": [35, 38, 40, 43, 47, 48, 49, 50, 51, 96, 152, 154, 160, 162, 165, 166, 167, 168, 169, 170, 171, 195, 352, 857, 906, 962], "cloudi": [714, 715], "cloudpickl": 173, "cluster": 170, "cluster_with_column": [63, 866, 877, 904, 917, 936, 962], "co": [700, 845, 1288, 1362, 1383], "coalesc": [65, 256, 257, 321, 352, 527, 702, 704, 728, 835, 845, 889, 890, 928, 962, 1292, 1316, 1378, 1383], "code": [205, 216, 256, 352, 405, 406, 407, 408, 411, 444, 592, 677, 845, 872, 889, 893, 962, 1264, 1362, 1372], "codebas": 205, "coeffici": [218, 352, 684, 845, 1273, 1362], "coerc": [65, 646, 845, 1240, 1362], "coerce_int96_timestamp_unit": 55, "coercion": [63, 646, 845, 866, 877, 904, 917, 962, 1240, 1362], "col": [1, 13, 38, 41, 48, 52, 57, 58, 59, 60, 135, 137, 165, 179, 181, 233, 241, 242, 247, 250, 252, 256, 257, 258, 261, 272, 275, 276, 280, 284, 285, 290, 298, 309, 314, 318, 320, 326, 331, 352, 356, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 417, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 535, 536, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 618, 620, 622, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 764, 768, 769, 771, 772, 773, 774, 776, 778, 781, 783, 784, 786, 787, 789, 793, 794, 795, 796, 797, 798, 808, 810, 812, 813, 815, 818, 819, 823, 824, 826, 828, 830, 831, 834, 835, 845, 881, 884, 885, 887, 889, 890, 891, 903, 907, 910, 912, 919, 920, 926, 931, 933, 938, 962, 968, 1090, 1094, 1177, 1261, 1263, 1292, 1296, 1316, 1362, 1393], "col0": [181, 1393], "col1": [181, 276, 352, 962, 1393], "col2": [181, 276, 352, 962, 1393], "col3": [276, 352, 1393], "col4": 1393, "col_nam": [275, 352, 592, 835, 845, 903, 962], "cole": 146, "coli": [41, 352, 623, 624, 968, 1393], "collaps": [63, 866, 877, 904, 917, 962], "collapse_join": [63, 866, 877, 904, 917, 936, 962], "collect": [10, 48, 49, 50, 51, 55, 60, 63, 64, 96, 130, 165, 166, 167, 171, 181, 182, 185, 224, 225, 259, 276, 299, 304, 317, 318, 352, 502, 533, 572, 573, 574, 575, 592, 773, 791, 795, 823, 824, 827, 845, 860, 861, 863, 864, 867, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 912, 914, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 933, 934, 935, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 959, 961, 962, 968, 1153, 1194, 1195, 1196, 1197, 1362, 1372, 1373, 1374, 1377, 1378, 1390, 1391, 1393], "collect_al": [60, 64, 130, 866, 867, 962], "collect_all_async": [867, 962], "collect_async": [64, 962], "collect_schema": [60, 259, 352, 869, 876, 903, 911, 930, 962], "collis": 65, "colnam": [25, 41, 165, 352], "color": [56, 97, 98, 338, 352, 355, 405, 406, 407, 408, 411, 694, 756, 845, 945, 1015, 1016, 1017, 1018, 1021, 1282, 1351, 1362, 1385], "column": [11, 17, 18, 19, 22, 23, 25, 40, 41, 47, 51, 52, 54, 55, 56, 57, 58, 65, 72, 88, 98, 102, 106, 131, 133, 134, 135, 136, 137, 138, 145, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 181, 197, 200, 210, 212, 213, 216, 218, 219, 222, 223, 224, 225, 226, 229, 233, 234, 237, 238, 240, 241, 242, 246, 247, 252, 253, 254, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 289, 290, 291, 293, 298, 300, 301, 302, 305, 307, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 331, 337, 352, 355, 356, 363, 364, 366, 377, 386, 395, 397, 400, 409, 422, 431, 435, 436, 442, 452, 453, 455, 456, 457, 460, 462, 463, 464, 465, 466, 467, 468, 471, 473, 474, 475, 478, 479, 480, 482, 491, 492, 494, 502, 504, 508, 510, 523, 528, 529, 544, 550, 556, 558, 578, 582, 583, 592, 598, 599, 601, 603, 605, 616, 618, 619, 620, 621, 622, 623, 624, 633, 640, 644, 646, 647, 648, 649, 651, 652, 653, 657, 659, 661, 663, 665, 668, 670, 672, 679, 680, 686, 687, 690, 698, 703, 705, 706, 716, 720, 721, 728, 729, 730, 731, 732, 733, 735, 740, 743, 751, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 841, 845, 861, 863, 870, 873, 874, 875, 876, 878, 881, 884, 885, 889, 890, 891, 895, 896, 897, 898, 899, 901, 902, 905, 907, 908, 910, 911, 912, 913, 915, 919, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 944, 945, 962, 967, 968, 975, 976, 996, 1005, 1007, 1010, 1019, 1035, 1039, 1045, 1050, 1051, 1057, 1066, 1069, 1070, 1071, 1074, 1076, 1077, 1081, 1082, 1083, 1085, 1086, 1089, 1091, 1092, 1096, 1097, 1098, 1100, 1109, 1110, 1112, 1124, 1143, 1147, 1172, 1178, 1180, 1200, 1204, 1234, 1240, 1242, 1243, 1246, 1267, 1278, 1286, 1291, 1294, 1308, 1309, 1316, 1318, 1319, 1320, 1321, 1323, 1329, 1332, 1338, 1339, 1351, 1362, 1378, 1380, 1382, 1384, 1385, 1387, 1388, 1391, 1392, 1393], "column_0": [1, 261, 316, 352, 906, 962], "column_1": [261, 316, 352, 1387], "column_2": [316, 352, 1387], "column_abc": 16, "column_format": [41, 352], "column_nam": [281, 316, 352, 908, 962], "column_tot": [41, 352], "column_width": [41, 352], "column_x": [150, 151, 155, 161, 165], "column_xyz": 16, "columnar": [135, 137, 254, 286, 352], "columnformatdict": [41, 352], "columninfo": [200, 203], "columnnameorselector": [213, 222, 224, 225, 267, 274, 276, 287, 307, 317, 318, 319, 320, 352, 863, 873, 874, 875, 899, 925, 926, 927, 962], "columnnotfounderror": [237, 238, 352], "columntotalsdefinit": [41, 352], "columnwidthsdefinit": [41, 352], "colx": [41, 352, 623, 624, 968, 1377, 1393], "colz": [968, 1393], "com": [33, 41, 153, 352, 498, 500, 501, 699, 700, 701, 845, 1119, 1121, 1122, 1287, 1288, 1289, 1362], "combin": [47, 51, 63, 65, 130, 233, 242, 243, 257, 276, 280, 284, 322, 352, 365, 378, 490, 499, 512, 607, 632, 648, 653, 723, 724, 725, 784, 785, 787, 788, 832, 833, 835, 845, 866, 877, 885, 890, 904, 907, 910, 917, 962, 1095, 1108, 1120, 1242, 1311, 1312, 1313, 1362, 1378, 1391], "come": [125, 153, 242, 317, 319, 352, 449, 461, 469, 470, 541, 583, 770, 835, 845, 885, 925, 927, 962, 1063, 1075, 1087, 1088, 1163, 1362], "comm_subexpr_elim": [63, 866, 877, 904, 917, 936, 962], "comm_subplan_elim": [63, 866, 877, 904, 917, 936, 962], "comma": [37, 38, 150, 151, 165, 352], "comment": [150, 151, 165, 196, 197, 199, 200], "comment_prefix": [150, 151, 165], "common": [57, 63, 65, 105, 130, 150, 151, 165, 321, 352, 617, 851, 866, 877, 904, 917, 928, 962, 1366], "commonli": 835, "compact": 1388, "compani": 153, "compar": [170, 174, 175, 176, 177, 227, 233, 280, 352, 496, 497, 517, 519, 529, 543, 590, 627, 628, 845, 881, 907, 962, 1039, 1116, 1117, 1225, 1362], "comparison": [171, 233, 280, 352, 881, 907, 962], "compat": [21, 41, 43, 44, 47, 49, 51, 100, 138, 304, 352, 691, 693, 699, 700, 701, 703, 714, 715, 962, 968, 1100, 1279, 1281, 1287, 1288, 1289, 1291, 1302, 1303, 1337, 1362, 1372, 1385, 1386, 1390], "compat_level": [43, 44, 49, 304, 352, 962, 1337, 1362], "compatibleframetyp": [1373, 1375, 1390], "compatlevel": [43, 44, 49, 304, 352, 962, 1337, 1362], "competit": [643, 845, 1236, 1362], "compil": [62, 382, 383, 548, 549, 966, 992, 993, 1170, 1171], "complement": 968, "complet": [150, 152, 165, 1391], "complex": [182, 421, 422, 441, 750, 751, 845, 1031, 1056, 1347, 1362], "compliant": [41, 352, 482, 1100], "compon": [453, 478, 482, 728, 731, 789, 1067, 1096, 1100, 1316, 1319], "compos": 1391, "composit": [88, 1393], "compound": [138, 287, 352, 968], "comprehens": 179, "compress": [36, 40, 43, 44, 47, 49, 51, 352, 651, 845, 962, 1245, 1362], "compression_level": [47, 51, 352, 962], "comput": [63, 65, 103, 228, 241, 257, 276, 311, 317, 331, 344, 352, 360, 369, 370, 371, 372, 373, 374, 391, 392, 393, 398, 399, 403, 429, 432, 433, 434, 437, 438, 439, 440, 446, 495, 498, 499, 500, 501, 503, 541, 565, 566, 567, 568, 572, 573, 574, 575, 579, 585, 586, 587, 588, 613, 633, 634, 639, 643, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 681, 682, 683, 684, 688, 747, 748, 756, 761, 763, 766, 767, 768, 775, 777, 790, 811, 821, 822, 835, 845, 866, 884, 887, 889, 890, 906, 925, 933, 938, 951, 962, 973, 979, 980, 981, 982, 983, 984, 1001, 1002, 1003, 1008, 1009, 1013, 1041, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1060, 1114, 1118, 1119, 1120, 1121, 1122, 1123, 1163, 1187, 1188, 1189, 1190, 1194, 1195, 1196, 1197, 1201, 1207, 1208, 1209, 1210, 1218, 1229, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1270, 1271, 1272, 1273, 1276, 1335, 1336, 1344, 1351, 1362, 1384, 1387], "computecontext": [906, 962], "computeerror": [603, 733, 835, 1321], "concat": [56, 97, 98, 106, 151, 257, 352, 890, 933, 962, 1043, 1137, 1219, 1237, 1362, 1383], "concat_list": [555, 790], "concat_w": [299, 352, 824, 920, 962, 1383, 1390], "concaten": [56, 65, 97, 98, 235, 275, 352, 637, 690, 706, 772, 773, 774, 845, 903, 962, 1043, 1219, 1278, 1294, 1362, 1385], "concatmethod": 65, "conclus": [135, 137, 352, 962], "concret": [181, 185], "condit": [41, 225, 233, 258, 280, 285, 352, 424, 428, 508, 529, 696, 722, 769, 793, 835, 845, 881, 891, 907, 962, 1148, 1362, 1378, 1383, 1389], "conditional_format": [41, 352], "conditionalformatdict": [41, 352], "config": [0, 57, 220, 290, 309, 326, 352, 692, 702, 704, 716, 784, 785, 787, 788, 789, 857, 866, 871, 912, 931, 962, 1280, 1292, 1304], "configur": [5, 33, 40, 55, 154, 166, 167, 170, 205, 352, 355, 858, 866, 877, 904, 917, 937, 962, 1362, 1367], "configure_axisx": [352, 355, 1362, 1367], "configure_point": [352, 355, 1362, 1367], "conflat": [529, 845], "conform": 1393, "confus": [105, 364, 536, 537, 716, 845], "conjunct": [41, 97, 152, 155, 161, 179, 352, 799, 802, 962], "conn": 152, "connect": [38, 39, 43, 47, 48, 49, 50, 51, 75, 150, 152, 153, 156, 158, 160, 162, 165, 168, 169, 170, 171, 195, 352, 858, 962], "connectionorcursor": [39, 152, 352], "connector": 153, "connectorx": [152, 153, 173], "consecut": [232, 352, 404, 507, 513, 690, 706, 714, 845, 880, 962, 1014, 1128, 1133, 1278, 1294, 1303, 1362], "consid": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 79, 97, 98, 130, 141, 142, 143, 144, 145, 146, 150, 151, 152, 154, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 212, 224, 225, 227, 253, 258, 261, 267, 286, 299, 309, 314, 315, 317, 319, 321, 352, 355, 356, 422, 431, 441, 442, 449, 461, 512, 523, 591, 592, 599, 615, 616, 619, 621, 623, 624, 640, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 751, 770, 772, 779, 793, 803, 804, 841, 845, 861, 866, 867, 874, 875, 877, 891, 899, 904, 917, 920, 924, 925, 927, 928, 936, 945, 962, 968, 1035, 1040, 1045, 1056, 1057, 1063, 1075, 1117, 1143, 1213, 1234, 1247, 1248, 1251, 1253, 1254, 1261, 1263, 1341, 1346, 1362, 1367, 1372], "consider": 146, "consist": [241, 274, 310, 352, 728, 784, 785, 803, 835, 884, 962, 968, 977, 1125, 1316, 1343, 1362], "consola": [41, 352], "const": 11, "constant": [228, 284, 352, 450, 499, 505, 804, 845, 910, 962, 1064, 1118, 1120, 1126, 1362], "constrain": [57, 165, 224, 225, 352, 874, 875, 962, 968], "constraint": [233, 280, 352, 508, 616, 617, 619, 621, 623, 624, 835, 845, 881, 907, 962, 968, 1392], "construct": [56, 97, 98, 105, 131, 133, 134, 135, 136, 137, 138, 146, 152, 352, 514, 817, 820, 836, 841, 845, 872, 962, 1035, 1362, 1377], "construct_categor": 56, "constructor": [146, 155, 185], "contain": [5, 38, 39, 40, 41, 48, 52, 53, 54, 57, 62, 101, 133, 136, 138, 147, 152, 153, 154, 162, 166, 167, 170, 180, 181, 183, 185, 212, 217, 224, 225, 226, 242, 250, 255, 272, 309, 310, 314, 315, 321, 333, 352, 364, 366, 389, 408, 411, 424, 428, 444, 520, 533, 562, 592, 690, 692, 696, 699, 701, 703, 706, 708, 721, 722, 738, 760, 761, 762, 763, 774, 807, 835, 845, 861, 869, 872, 874, 875, 876, 885, 904, 924, 928, 940, 962, 968, 975, 976, 999, 1033, 1038, 1139, 1140, 1184, 1219, 1278, 1280, 1284, 1287, 1289, 1291, 1294, 1296, 1309, 1310, 1326, 1337, 1343, 1362, 1380], "contains_with_expr": 405, "contains_with_lit": 405, "content": [14, 48, 49, 50, 51, 680, 845, 962, 966, 1269, 1362], "context": [56, 97, 98, 142, 144, 187, 272, 299, 352, 362, 508, 555, 591, 592, 603, 686, 687, 756, 776, 792, 795, 801, 802, 807, 816, 820, 823, 844, 845, 856, 857, 906, 920, 933, 962, 1177, 1351, 1362, 1377, 1390, 1392], "contigu": [65, 131, 132, 136, 150, 151, 154, 156, 158, 160, 162, 165, 166, 168, 169, 170, 279, 310, 352], "continu": [442, 640, 684, 845, 1057, 1234, 1273, 1362, 1379], "contrast": 789, "control": [11, 12, 41, 51, 64, 65, 155, 179, 181, 298, 299, 309, 352, 648, 687, 824, 845, 866, 867, 877, 904, 917, 919, 920, 937, 959, 962, 1242, 1341, 1362, 1374, 1377, 1390], "conveni": [230, 314, 352, 954, 977, 1125, 1362, 1372], "convers": [132, 209, 254, 255, 286, 287, 306, 310, 311, 352, 454, 728, 730, 731, 735, 857, 1068, 1316, 1318, 1319, 1323, 1343, 1344, 1362, 1388, 1390], "convert": [40, 55, 101, 132, 136, 147, 154, 155, 161, 166, 209, 287, 305, 306, 307, 308, 309, 310, 311, 313, 314, 352, 400, 401, 443, 454, 479, 482, 582, 583, 591, 617, 642, 701, 728, 730, 731, 732, 733, 735, 740, 845, 962, 1010, 1011, 1039, 1068, 1097, 1100, 1204, 1205, 1289, 1316, 1318, 1319, 1320, 1321, 1323, 1329, 1332, 1340, 1341, 1342, 1343, 1344, 1346, 1362, 1385, 1387, 1388, 1390], "convert_time_zon": [476, 1094], "coo": [281, 352, 908, 962], "coord": 743, "coordin": [41, 352, 1147, 1362], "copi": [37, 131, 132, 149, 207, 209, 214, 215, 255, 304, 310, 311, 326, 352, 505, 845, 864, 865, 931, 962, 970, 1044, 1046, 1126, 1337, 1342, 1343, 1344, 1362, 1390], "corasick": [692, 702, 704, 716, 1280, 1290, 1292, 1304], "core": [1, 258, 352, 891, 962, 1390, 1393], "cores_right": [258, 352, 891, 962], "corner": [21, 41, 138, 352], "corr": 352, "corrcoef": [218, 352], "correct": [96, 147, 155, 161, 500, 501, 541, 583, 654, 666, 684, 845, 895, 962, 1121, 1122, 1163, 1247, 1254, 1273, 1362], "correctli": [41, 352, 591, 793, 845], "correl": [218, 352, 775, 821], "correlationmethod": 775, "correspond": [242, 257, 284, 310, 322, 352, 422, 463, 472, 477, 490, 592, 643, 653, 657, 659, 661, 663, 665, 668, 670, 672, 751, 784, 785, 787, 788, 832, 833, 845, 866, 885, 890, 910, 962, 1077, 1090, 1095, 1108, 1236, 1362, 1379], "cosd": 1383, "cosh": [845, 1362], "cosin": [369, 370, 432, 433, 591, 845, 979, 980, 1047, 1048, 1362, 1387], "cost": [258, 287, 352, 714, 891, 962, 1303], "cost_usd": [714, 1303], "cot": [845, 1362, 1383], "cotang": [434, 845, 1049, 1362, 1387], "cotd": 1383, "could": [40, 94, 103, 352, 681, 779, 789, 793, 835, 845, 863, 871, 962, 1270, 1362], "count": [41, 171, 211, 220, 242, 272, 273, 284, 316, 322, 328, 343, 352, 368, 385, 394, 436, 449, 461, 499, 523, 544, 552, 564, 569, 592, 615, 631, 643, 653, 657, 659, 661, 663, 665, 668, 670, 672, 693, 754, 756, 764, 770, 778, 802, 815, 845, 860, 871, 885, 902, 910, 934, 950, 962, 968, 978, 995, 1004, 1051, 1058, 1063, 1075, 1120, 1143, 1166, 1174, 1186, 1191, 1220, 1228, 1281, 1349, 1351, 1362, 1367, 1371, 1383], "count_digit": 693, "count_num": [41, 352], "counterpart": 146, "countri": [257, 352, 450, 890, 962, 1064], "country_holidai": [449, 461, 770, 1063, 1075], "covari": [147, 777, 822, 845], "cover": 11, "cow": [712, 713, 1300, 1301], "cpu": [150, 151, 173, 309, 352, 937, 1341, 1362], "crab": [691, 703, 1279, 1291], "crate": [38, 48, 101, 352, 691, 693, 699, 700, 701, 703, 714, 715, 728, 730, 731, 735, 962, 968, 1279, 1281, 1287, 1288, 1289, 1291, 1302, 1303, 1316, 1318, 1319, 1323], "creat": [39, 41, 48, 49, 50, 51, 52, 54, 56, 98, 131, 135, 137, 150, 151, 152, 153, 156, 158, 162, 166, 167, 179, 180, 181, 182, 183, 184, 185, 186, 205, 214, 215, 242, 273, 276, 284, 309, 310, 322, 326, 329, 352, 355, 356, 453, 477, 490, 499, 523, 583, 591, 644, 653, 657, 659, 661, 663, 665, 668, 670, 672, 773, 783, 784, 785, 786, 787, 788, 789, 803, 831, 832, 833, 835, 841, 845, 864, 865, 871, 877, 885, 910, 931, 935, 962, 966, 967, 1044, 1046, 1057, 1067, 1095, 1108, 1120, 1143, 1226, 1234, 1237, 1341, 1343, 1362, 1367, 1389, 1390, 1393], "create_async_engin": 152, "create_engin": [39, 352], "created_at": [196, 199, 200], "created_bi": [196, 199, 200], "creation": [142, 144, 151], "credenti": [32, 33, 34, 35, 38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 352, 857, 962], "credential_provid": [38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 352, 962], "credentialproviderfunct": [38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 352, 962], "cross": [256, 352, 889, 962, 1378], "crustacean": [703, 1291], "cst": [477, 490, 1095, 1108], "csv": [37, 38, 48, 49, 50, 51, 52, 53, 54, 149, 150, 151, 155, 156, 165, 198, 352, 857, 962], "csvencod": [150, 151, 165], "csvquotestyl": [38, 48, 352, 962], "ctx": [52, 53, 54, 1371, 1373, 1374, 1375, 1376, 1377, 1390], "cube": [1, 61, 429, 638, 845, 1041, 1362, 1384], "cuda": 937, "cum_count": [845, 1362], "cum_count_revers": [436, 845], "cum_max": [845, 1362], "cum_max_all_fil": [437, 845], "cum_max_revers": [437, 845], "cum_min": [845, 1362], "cum_min_revers": [438, 845], "cum_prod": [361, 845, 1362], "cum_prod_revers": [439, 845], "cum_reduc": 779, "cum_sum": [526, 633, 744, 782, 845, 887, 962, 1162, 1362], "cum_sum_revers": [440, 845], "cumsum_horizont": 781, "cumul": [436, 437, 438, 439, 440, 778, 779, 780, 781, 782, 845, 1051, 1052, 1053, 1054, 1055, 1362], "cumulative_ev": [845, 1362], "cumulative_sal": [633, 845], "current": [2, 3, 5, 6, 31, 38, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 138, 142, 143, 144, 152, 153, 160, 162, 165, 168, 169, 170, 178, 179, 181, 182, 183, 184, 185, 186, 195, 214, 215, 222, 256, 257, 281, 299, 309, 314, 352, 355, 356, 458, 583, 634, 845, 864, 865, 873, 889, 890, 908, 917, 920, 937, 962, 968, 1044, 1046, 1064, 1072, 1229, 1341, 1346, 1362, 1367, 1374, 1390], "cursor": [39, 152, 352], "custom": [1, 28, 40, 41, 58, 59, 60, 61, 104, 146, 163, 184, 186, 220, 261, 276, 338, 352, 401, 449, 461, 479, 482, 583, 591, 592, 655, 756, 770, 806, 807, 845, 871, 895, 945, 962, 1011, 1063, 1075, 1097, 1100, 1205, 1213, 1248, 1351, 1362, 1393], "customis": [41, 352], "cut": [640, 845, 1234, 1362], "cxx": 1385, "cypher": 152, "d": [29, 36, 38, 40, 41, 43, 44, 47, 134, 171, 210, 233, 240, 242, 243, 244, 256, 260, 280, 303, 304, 314, 320, 324, 334, 336, 339, 340, 341, 342, 343, 344, 345, 352, 361, 363, 436, 459, 479, 482, 529, 598, 637, 679, 693, 700, 714, 715, 720, 728, 730, 731, 771, 772, 789, 795, 824, 845, 881, 885, 889, 907, 920, 941, 943, 946, 947, 948, 949, 950, 951, 952, 962, 968, 1039, 1051, 1073, 1097, 1100, 1148, 1172, 1281, 1288, 1302, 1303, 1308, 1316, 1318, 1319, 1330, 1362, 1378, 1380, 1382, 1385, 1386], "d1": [41, 352, 453], "d2": 453, "d3": 453, "d789": [41, 352], "d_4": [720, 1308], "dai": [71, 72, 89, 242, 255, 257, 284, 322, 352, 355, 449, 461, 469, 470, 472, 473, 475, 477, 479, 482, 483, 490, 492, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 770, 783, 784, 785, 786, 787, 788, 789, 832, 833, 845, 885, 890, 910, 962, 968, 1063, 1075, 1087, 1088, 1090, 1091, 1093, 1095, 1097, 1100, 1101, 1108, 1110, 1120, 1362, 1386], "dark": 1371, "data": [0, 1, 11, 19, 20, 22, 25, 29, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 65, 70, 71, 72, 74, 85, 86, 88, 89, 98, 101, 105, 107, 110, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 203, 207, 209, 215, 216, 226, 228, 229, 230, 240, 241, 242, 254, 255, 256, 259, 261, 274, 275, 279, 285, 286, 287, 289, 293, 296, 304, 309, 310, 311, 314, 316, 326, 330, 350, 352, 356, 364, 365, 366, 369, 370, 371, 372, 373, 374, 377, 380, 381, 382, 383, 384, 386, 389, 391, 392, 393, 398, 399, 400, 402, 403, 405, 406, 407, 408, 409, 410, 411, 423, 425, 426, 427, 431, 432, 433, 434, 435, 442, 443, 444, 449, 450, 451, 452, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 504, 515, 517, 518, 519, 523, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 543, 544, 548, 549, 551, 556, 562, 564, 571, 582, 584, 590, 592, 627, 628, 632, 633, 640, 642, 643, 646, 647, 648, 649, 651, 652, 657, 659, 661, 663, 665, 668, 670, 672, 673, 675, 677, 682, 683, 684, 690, 693, 694, 695, 698, 699, 700, 701, 705, 706, 707, 708, 709, 710, 718, 719, 720, 721, 728, 729, 730, 731, 733, 735, 738, 747, 748, 749, 752, 753, 756, 759, 765, 773, 776, 783, 784, 785, 786, 787, 788, 789, 799, 800, 802, 803, 804, 805, 806, 807, 817, 820, 831, 832, 833, 836, 841, 845, 857, 864, 865, 872, 876, 878, 884, 885, 911, 915, 931, 962, 967, 970, 975, 976, 988, 990, 991, 992, 993, 994, 996, 998, 999, 1010, 1012, 1015, 1016, 1017, 1019, 1020, 1032, 1034, 1036, 1037, 1044, 1045, 1046, 1057, 1058, 1063, 1064, 1065, 1066, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1081, 1082, 1083, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1117, 1118, 1120, 1124, 1125, 1143, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1168, 1169, 1170, 1171, 1173, 1178, 1184, 1186, 1193, 1204, 1206, 1213, 1227, 1234, 1236, 1240, 1241, 1242, 1243, 1245, 1246, 1258, 1260, 1268, 1273, 1278, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1289, 1293, 1294, 1295, 1296, 1297, 1298, 1306, 1307, 1308, 1309, 1316, 1317, 1318, 1319, 1321, 1323, 1326, 1337, 1342, 1343, 1344, 1345, 1348, 1361, 1362, 1371, 1378, 1385, 1390, 1392], "data_bar": [41, 352], "data_bar_2010": [41, 352], "data_label": [41, 352], "data_page_s": [47, 51, 352, 962], "data_source_format": 200, "databas": [39, 129, 152, 153, 352, 857], "databrick": 190, "databricks_format": 198, "datafram": [0, 1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 48, 49, 50, 51, 52, 54, 57, 58, 59, 60, 61, 63, 64, 65, 84, 96, 102, 105, 106, 131, 132, 133, 134, 135, 136, 137, 138, 140, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 174, 175, 178, 179, 205, 350, 351, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 417, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 841, 845, 857, 866, 867, 869, 871, 873, 876, 878, 882, 885, 889, 890, 891, 892, 893, 895, 899, 900, 904, 909, 911, 918, 920, 925, 926, 927, 928, 930, 933, 938, 939, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 962, 967, 968, 1057, 1058, 1094, 1120, 1143, 1213, 1234, 1292, 1296, 1308, 1309, 1332, 1338, 1339, 1351, 1362, 1371, 1372, 1373, 1374, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1390, 1393], "dataframeplot": [352, 355], "dataload": [314, 352], "datapoint": [242, 352, 885, 962], "dataset": [15, 47, 55, 75, 150, 151, 154, 155, 161, 165, 166, 170, 171, 256, 314, 352, 541, 845, 857, 889, 895, 962, 1163, 1362, 1391], "datasourceformat": [200, 203], "datat": [41, 352], "datatyp": [38, 48, 131, 133, 134, 135, 137, 139, 157, 159, 160, 162, 164, 169, 170, 182, 183, 185, 226, 235, 352, 423, 502, 679, 749, 772, 791, 793, 805, 841, 845, 857, 876, 962, 967, 968, 1032, 1058, 1113, 1213, 1267, 1345, 1362, 1388], "date": [17, 41, 57, 72, 150, 151, 153, 155, 161, 162, 165, 168, 170, 171, 213, 220, 240, 242, 255, 257, 284, 299, 352, 355, 384, 449, 451, 452, 453, 454, 457, 459, 461, 462, 463, 465, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 551, 633, 653, 657, 659, 661, 663, 665, 668, 670, 672, 728, 730, 749, 770, 784, 785, 787, 788, 795, 803, 805, 831, 845, 863, 871, 885, 890, 910, 962, 968, 994, 1063, 1065, 1066, 1067, 1068, 1071, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1120, 1173, 1222, 1223, 1316, 1318, 1345, 1362, 1383, 1386, 1388], "date32": [255, 352], "date_format": [38, 48, 352, 962], "date_min": 472, "date_minus_1y_2mon": 1090, "date_part": 1383, "date_plus_1i": [472, 1090], "date_rang": [257, 322, 352, 457, 459, 473, 481, 492, 787, 788, 890, 962, 1071, 1086, 1091, 1092, 1109, 1110], "date_right": [257, 352, 890, 962], "datetim": [17, 38, 41, 48, 55, 57, 101, 138, 154, 162, 166, 168, 170, 181, 182, 183, 185, 195, 196, 199, 200, 213, 220, 240, 242, 255, 257, 284, 299, 322, 352, 355, 384, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 551, 600, 633, 653, 657, 659, 661, 663, 665, 668, 670, 672, 728, 731, 749, 770, 783, 784, 785, 787, 788, 789, 795, 803, 805, 832, 833, 845, 863, 871, 885, 890, 910, 962, 967, 968, 994, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1120, 1173, 1222, 1223, 1316, 1319, 1343, 1345, 1362, 1385, 1386], "datetime_cast": 55, "datetime_format": [38, 48, 352, 962], "datetime_rang": [242, 352, 451, 454, 469, 470, 472, 476, 477, 483, 484, 485, 486, 487, 488, 489, 490, 493, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 845, 885, 962, 1064, 1065, 1068, 1072, 1073, 1074, 1080, 1081, 1083, 1085, 1087, 1088, 1089, 1090, 1094, 1095, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108], "datetime_str": 479, "datetimecastopt": 55, "datetimeindex": 136, "david": 1391, "day_nam": [479, 482], "day_of_month": [457, 473, 492], "day_of_year": [457, 473, 492], "daylight": [242, 257, 284, 322, 352, 450, 458, 472, 477, 490, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 789, 832, 833, 845, 885, 890, 910, 962, 1072, 1090, 1095, 1108], "dayofweek": 1386, "dayofyear": 1386, "days_diff": 483, "db": [39, 152, 153, 352], "dbapi2": 152, "dbc": [693, 1281], "dbreadengin": 153, "dbwriteengin": [39, 352], "dbwritemod": [39, 352], "dd": [41, 352, 1385], "ddd": [1, 41, 352, 739, 741, 742], "dddd": 1385, "ddof": [300, 323, 352, 398, 403, 579, 585, 667, 668, 671, 672, 689, 757, 775, 777, 821, 822, 826, 834, 845, 921, 929, 962, 1008, 1013, 1201, 1207, 1255, 1257, 1277, 1352, 1362], "ddww": 1385, "de": 1385, "deal": [47, 51, 254, 352, 364, 366, 475, 476, 643, 728, 731, 760, 761, 762, 763, 786, 845, 962, 975, 976, 1093, 1094, 1236, 1316, 1319, 1362], "debug": [30, 895, 962, 1393], "decad": [1371, 1386], "decai": [498, 499, 500, 501, 845, 1119, 1120, 1121, 1122, 1362], "decemb": [482, 1100], "decim": [9, 11, 12, 28, 29, 38, 41, 48, 150, 151, 165, 352, 356, 673, 732, 845, 962, 968, 1258, 1320, 1362, 1384], "decimal_comma": [150, 151, 165], "decimal_separ": [9, 28], "declar": [131, 133, 134, 135, 137, 152, 159, 160, 169, 309, 314, 352, 835, 962, 968, 1371], "decod": [150, 151, 707], "decompos": [318, 352, 926, 962], "decompress": [47, 49, 51, 352, 962], "decor": [56, 58, 59, 60, 61, 181, 185, 261, 352, 592, 845, 856, 857, 1213, 1362], "dedic": [1, 132, 254, 286, 352, 968, 1390], "deem": [220, 352, 871, 962], "deepcopi": [214, 352, 864, 962, 1044, 1362], "def": [1, 56, 58, 59, 60, 61, 152, 179, 181, 185, 205, 275, 316, 352, 361, 637, 697, 700, 725, 759, 806, 845, 867, 903, 962, 968, 1285, 1288, 1393], "default": [4, 5, 9, 10, 11, 15, 28, 31, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 63, 64, 65, 69, 72, 73, 74, 131, 132, 133, 134, 135, 136, 137, 138, 147, 150, 151, 153, 155, 156, 158, 159, 160, 161, 162, 165, 167, 168, 169, 170, 174, 176, 178, 179, 180, 181, 182, 183, 184, 185, 205, 220, 221, 224, 225, 228, 237, 241, 242, 243, 254, 256, 257, 265, 267, 274, 276, 284, 285, 286, 287, 288, 292, 295, 299, 300, 302, 307, 309, 310, 314, 317, 319, 320, 321, 323, 328, 337, 352, 363, 364, 366, 389, 396, 401, 409, 442, 444, 449, 461, 475, 476, 482, 495, 497, 498, 500, 501, 521, 533, 558, 562, 571, 576, 577, 579, 583, 585, 586, 591, 599, 600, 603, 606, 625, 626, 628, 633, 634, 640, 643, 647, 648, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 678, 680, 689, 690, 699, 706, 718, 723, 724, 725, 728, 730, 731, 733, 735, 756, 757, 760, 762, 765, 769, 770, 771, 774, 775, 777, 784, 785, 786, 787, 788, 789, 792, 795, 799, 800, 801, 803, 804, 805, 811, 817, 820, 823, 826, 827, 829, 832, 833, 834, 835, 836, 845, 866, 867, 871, 872, 874, 875, 877, 884, 885, 889, 890, 899, 904, 906, 910, 914, 916, 917, 920, 921, 925, 927, 928, 929, 934, 937, 944, 962, 966, 968, 975, 976, 999, 1006, 1011, 1019, 1045, 1057, 1058, 1063, 1075, 1093, 1094, 1100, 1114, 1118, 1119, 1121, 1122, 1141, 1153, 1180, 1184, 1193, 1198, 1199, 1205, 1222, 1223, 1229, 1234, 1236, 1241, 1242, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1266, 1269, 1277, 1278, 1279, 1287, 1291, 1294, 1306, 1311, 1312, 1313, 1316, 1318, 1319, 1321, 1323, 1341, 1343, 1351, 1352, 1362, 1384, 1385, 1393], "default_match": [691, 703], "default_scop": 35, "defaultazurecredenti": 34, "defaultdict": [287, 352], "defer": [205, 352, 355, 356, 1362, 1367], "defin": [38, 41, 48, 55, 72, 75, 152, 159, 178, 179, 181, 213, 224, 225, 229, 242, 261, 272, 275, 284, 321, 338, 352, 427, 529, 558, 592, 637, 640, 652, 653, 657, 659, 661, 663, 665, 668, 670, 672, 705, 710, 718, 729, 736, 784, 785, 787, 788, 803, 804, 807, 827, 832, 833, 845, 863, 874, 875, 878, 885, 903, 910, 928, 945, 962, 966, 967, 968, 1037, 1148, 1180, 1213, 1234, 1246, 1293, 1298, 1306, 1317, 1324, 1362], "definit": [41, 76, 352, 541, 654, 845, 967, 968, 1163, 1247, 1362], "deflat": [36, 352], "deg": 1387, "degre": [300, 323, 352, 579, 585, 642, 667, 668, 671, 672, 689, 757, 767, 777, 821, 822, 826, 834, 845, 921, 929, 962, 1255, 1257, 1277, 1352, 1362, 1383], "delai": 96, "delet": [75, 1378, 1389], "delimit": [46, 48, 160, 169, 276, 307, 352, 690, 706, 962, 1278, 1294, 1338, 1362, 1385], "delta": [40, 154, 166, 198, 300, 323, 352, 579, 585, 667, 668, 671, 672, 689, 757, 777, 821, 822, 826, 834, 845, 857, 921, 929, 962, 1255, 1257, 1277, 1352, 1362], "delta_merge_opt": [40, 352], "delta_table_opt": [154, 166, 195], "delta_table_vers": 195, "delta_write_opt": [40, 352], "deltalak": [40, 154, 166, 173, 195, 352], "deltashar": 198, "deltat": [40, 154, 166, 352], "demo": [41, 352], "demonstr": [150, 512, 845, 968], "dens": [21, 240, 352, 643, 845, 1236, 1362], "densiti": [1362, 1367], "depend": [47, 52, 56, 62, 98, 152, 155, 161, 173, 210, 352, 382, 383, 548, 549, 592, 603, 640, 643, 789, 792, 795, 801, 845, 972, 992, 993, 1170, 1171, 1234, 1236, 1362, 1393], "deploi": [181, 185], "deprec": [40, 63, 66, 150, 151, 178, 179, 180, 181, 185, 188, 211, 267, 310, 328, 333, 352, 456, 493, 514, 610, 647, 690, 698, 758, 767, 775, 776, 845, 860, 866, 877, 899, 904, 914, 917, 927, 933, 934, 940, 962, 1070, 1079, 1080, 1111, 1140, 1241, 1278, 1286, 1343, 1362], "depth": 146, "desc": [968, 1371, 1374, 1378, 1380], "descend": [57, 212, 293, 298, 315, 352, 377, 397, 422, 578, 633, 643, 677, 686, 687, 751, 756, 768, 845, 861, 915, 919, 924, 962, 987, 1007, 1160, 1200, 1236, 1264, 1275, 1351, 1362], "describ": [181, 240, 352, 711, 962, 1299, 1362], "descript": [242, 352, 885, 962, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1388, 1391, 1392], "deseri": [146, 292, 352, 514, 606, 845, 914, 962], "deserializ": [221, 292, 352, 444, 606, 845, 872, 914, 962], "design": [309, 314, 352], "desir": [181, 256, 352, 401, 493, 583, 889, 962, 1011, 1111, 1205], "destin": 153, "detail": [62, 132, 152, 153, 174, 176, 209, 242, 321, 352, 482, 749, 845, 885, 928, 937, 962, 1100, 1345, 1362, 1393], "determin": [15, 38, 41, 48, 57, 65, 94, 146, 150, 151, 152, 155, 161, 162, 165, 170, 172, 212, 216, 235, 242, 254, 255, 261, 284, 315, 316, 322, 352, 422, 461, 462, 475, 476, 523, 583, 603, 640, 646, 648, 684, 692, 705, 728, 729, 731, 732, 751, 786, 804, 817, 820, 836, 845, 861, 868, 869, 876, 885, 910, 924, 930, 962, 1075, 1076, 1093, 1094, 1143, 1205, 1234, 1240, 1241, 1242, 1273, 1280, 1316, 1319, 1320, 1362], "dev": [208, 971, 1255, 1362], "develop": [153, 181, 185], "deviat": [300, 352, 500, 667, 668, 689, 826, 845, 921, 962, 1121, 1277, 1362, 1379], "devic": [309, 352, 866, 877, 904, 917, 937, 962, 1341, 1362], "devicememoryresourc": 937, "df": [1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 58, 59, 84, 102, 106, 132, 133, 134, 135, 136, 137, 138, 151, 152, 153, 165, 178, 179, 181, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 410, 412, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 662, 664, 666, 667, 669, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 841, 845, 885, 910, 926, 928, 942, 945, 953, 962, 968, 1094, 1120, 1292, 1296, 1308, 1309, 1339, 1362, 1367, 1371, 1372, 1373, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1390, 1393], "df0": [268, 352, 900, 962, 1377], "df1": [57, 65, 174, 175, 227, 230, 268, 299, 324, 352, 900, 962, 1374, 1376, 1377, 1378, 1390], "df2": [57, 65, 174, 175, 227, 230, 324, 352, 1374, 1376, 1377, 1378, 1390], "df3": [57, 352], "df4": 352, "df5": 352, "df6": 352, "df_a": 1390, "df_a1": 65, "df_a2": 65, "df_a3": 65, "df_agg_nuniqu": [272, 352], "df_b": 1390, "df_current_batch": 151, "df_d1": 65, "df_d2": 65, "df_from_str_repr": [308, 352], "df_h1": 65, "df_h2": 65, "df_new_grid": [527, 845], "df_nuniqu": [272, 352], "df_original_grid": [527, 845], "df_panda": 1372, "df_pd": 132, "df_tempor": [657, 659, 661, 663, 665, 668, 670, 672, 845], "dfi": 209, "diagon": [65, 316, 352], "diagonal_relax": 65, "diagram": [906, 962], "dict": [31, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 58, 60, 62, 131, 133, 134, 135, 136, 137, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 181, 195, 196, 199, 200, 234, 254, 274, 285, 286, 287, 305, 306, 309, 314, 316, 352, 845, 962, 967, 968, 1131, 1362, 1375], "dictat": [147, 472, 845, 1090], "dictionari": [31, 38, 40, 41, 43, 47, 48, 49, 50, 51, 62, 88, 131, 133, 134, 135, 137, 146, 150, 151, 152, 153, 154, 157, 159, 160, 162, 163, 164, 165, 166, 168, 169, 170, 195, 254, 274, 285, 286, 287, 305, 306, 309, 314, 352, 962, 967], "did": [450, 1064], "diff": [326, 352, 483, 484, 485, 486, 487, 488, 489, 572, 845, 931, 962, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1194, 1362], "differ": [41, 47, 55, 101, 104, 125, 150, 155, 170, 171, 174, 176, 205, 224, 230, 242, 243, 254, 256, 276, 284, 286, 287, 306, 309, 310, 316, 352, 445, 457, 472, 473, 476, 482, 491, 497, 512, 521, 553, 572, 574, 583, 592, 625, 626, 628, 633, 647, 648, 728, 754, 792, 795, 801, 845, 858, 874, 875, 877, 885, 889, 910, 962, 966, 968, 1039, 1059, 1071, 1090, 1091, 1094, 1100, 1109, 1116, 1125, 1141, 1175, 1194, 1196, 1213, 1222, 1223, 1225, 1241, 1242, 1316, 1362, 1386, 1388, 1390], "digit": [73, 637, 673, 674, 700, 845, 968, 1258, 1259, 1281, 1288, 1362, 1393], "dimens": [131, 133, 135, 137, 159, 160, 169, 352, 649, 845, 962, 1243, 1343, 1362], "dimension": [133, 135, 137, 310, 352, 962, 1362], "direct": [41, 153, 162, 167, 170, 295, 309, 320, 352, 396, 576, 678, 845, 916, 962, 1006, 1198, 1266, 1362], "directli": [6, 31, 41, 64, 65, 152, 181, 185, 205, 287, 309, 352, 498, 500, 501, 648, 820, 845, 867, 962, 1119, 1121, 1122, 1242, 1341, 1362, 1374, 1390, 1393], "directori": [41, 47, 48, 49, 50, 51, 52, 54, 147, 162, 165, 168, 170, 352, 962], "dirpath": [36, 38, 43, 44, 47, 165, 352], "disabl": [47, 51, 56, 97, 98, 162, 168, 182, 254, 352, 866, 962], "disable_string_cach": 98, "disallow": 181, "discard": [233, 280, 352, 508, 845, 881, 907, 962, 1129, 1362], "disco": [702, 704, 1290, 1292], "discont": [702, 704, 1290, 1292], "discourag": [592, 845], "discoveri": [276, 352], "discret": [442, 445, 495, 553, 572, 640, 845, 1057, 1059, 1114, 1175, 1194, 1234, 1362], "disk": [47, 48, 49, 50, 51, 156, 352, 607, 858, 917, 962], "dispatch": 968, "displai": [7, 11, 12, 13, 14, 18, 19, 20, 24, 25, 26, 27, 41, 220, 240, 352, 871, 877, 917, 962], "distanc": [257, 352, 890, 962], "distinct": [41, 185, 274, 276, 330, 352, 402, 532, 533, 535, 584, 643, 652, 789, 845, 1012, 1152, 1153, 1155, 1206, 1236, 1246, 1362, 1379, 1389, 1391, 1393], "distinct_count": [47, 51, 352, 962], "distinguish": [482, 1100], "distribut": [541, 684, 845, 906, 962, 1163, 1273, 1362], "div": 1383, "diverg": [63, 130], "divid": [21, 442, 477, 490, 498, 500, 501, 512, 541, 640, 643, 845, 1057, 1095, 1108, 1119, 1121, 1122, 1163, 1234, 1362, 1379, 1384], "divis": [512, 752, 845, 1384], "divisor": [300, 323, 352, 579, 585, 667, 668, 671, 672, 689, 757, 777, 821, 822, 826, 834, 845, 921, 929, 962, 1255, 1257, 1277, 1352, 1362], "dl": [314, 352], "do": [1, 41, 55, 57, 63, 133, 134, 137, 150, 162, 165, 170, 174, 175, 176, 177, 210, 220, 222, 230, 253, 256, 257, 276, 281, 304, 316, 320, 352, 355, 441, 449, 555, 591, 714, 715, 723, 724, 725, 775, 817, 820, 836, 845, 862, 866, 871, 873, 877, 889, 890, 895, 904, 906, 908, 917, 937, 962, 968, 1056, 1063, 1125, 1177, 1302, 1303, 1311, 1312, 1313, 1346, 1362, 1367], "do_polars_oper": 30, "do_someth": 152, "do_various_th": 205, "doc": [40, 43, 44, 132, 153, 156, 158, 174, 176, 207, 208, 218, 352, 970, 971], "document": [33, 101, 153, 207, 352, 356, 479, 482, 708, 728, 730, 731, 735, 841, 937, 970, 1039, 1097, 1100, 1296, 1316, 1318, 1319, 1323], "doe": [11, 38, 40, 48, 49, 50, 51, 57, 63, 64, 119, 131, 133, 134, 135, 137, 138, 150, 151, 152, 153, 154, 155, 159, 160, 165, 166, 169, 171, 215, 230, 237, 242, 243, 255, 256, 280, 285, 286, 287, 317, 326, 329, 352, 355, 356, 493, 508, 512, 521, 583, 592, 692, 702, 704, 716, 724, 725, 754, 841, 845, 865, 866, 867, 871, 877, 881, 885, 889, 895, 904, 907, 917, 925, 931, 935, 962, 1046, 1111, 1125, 1129, 1141, 1268, 1280, 1290, 1292, 1304, 1362, 1367, 1385], "doesn": [40, 150, 165, 242, 257, 352, 495, 845, 885, 890, 962, 1114, 1362], "dog": [691, 734, 737, 774, 1279, 1322, 1325], "doi": 1386, "dollar": [714, 715, 1302, 1303], "domain": [1, 700, 1288], "don": [65, 242, 257, 261, 317, 320, 352, 441, 555, 592, 633, 845, 885, 890, 925, 962, 968, 1056, 1177, 1213, 1362], "done": [48, 49, 50, 51, 63, 64, 130, 151, 171, 205, 211, 257, 352, 367, 368, 633, 845, 860, 863, 866, 867, 877, 890, 904, 962, 978, 1362], "dot": [57, 607, 841, 845, 906, 917, 962, 1362], "doubl": [311, 352, 714, 715, 1302, 1303], "dow": 1386, "down": [165, 168, 169, 170, 171, 213, 352, 423, 511, 845, 1132, 1362], "downcast": 55, "download": [160, 165, 168, 169, 607, 917, 962], "downstream": [310, 352, 677, 845, 1264, 1362], "dr": 167, "drago": [705, 1293], "dragon": 705, "dragonfr": 1293, "dragonfruit": [705, 718, 729, 1293, 1306, 1317], "dramat": 155, "draw": [21, 26, 181, 185, 1393], "drawback": 841, "drawfn": 1393, "drawing_charact": 21, "dremio": 152, "driver": [39, 152, 153, 352], "drop": [1, 134, 223, 224, 225, 261, 280, 317, 326, 352, 445, 447, 448, 553, 554, 640, 845, 874, 875, 907, 925, 931, 962, 1059, 1061, 1062, 1175, 1176, 1234, 1362, 1389], "drop_dupl": [317, 352, 925, 962], "drop_empty_col": [155, 161], "drop_empty_row": [155, 161], "drop_first": [307, 352, 1338, 1362], "drop_in_plac": 352, "drop_nan": [352, 448, 845, 962, 1062, 1362], "drop_nul": [352, 447, 845, 962, 1061, 1362], "dset": 171, "dst": [477, 490, 1095, 1108], "dst_offset": [450, 1064], "dt": [1, 41, 57, 155, 161, 284, 352, 653, 789, 845, 854, 910, 962, 968, 1370, 1385, 1386], "dt1": 1385, "dt2": 1385, "dtm": [41, 352, 453, 482, 968, 1067, 1100, 1385], "dtm_iso": 482, "dtm_iso_strict": 482, "dtype": [11, 41, 55, 56, 60, 66, 72, 76, 88, 97, 98, 108, 131, 133, 135, 137, 138, 150, 151, 152, 153, 155, 159, 160, 161, 165, 169, 178, 179, 180, 181, 185, 207, 209, 213, 216, 228, 242, 257, 284, 308, 309, 310, 311, 314, 320, 329, 352, 409, 423, 424, 425, 426, 427, 428, 439, 440, 482, 493, 502, 515, 550, 558, 589, 591, 592, 599, 638, 645, 646, 653, 679, 681, 707, 728, 745, 749, 755, 765, 772, 791, 793, 795, 799, 800, 802, 803, 804, 805, 806, 807, 817, 820, 827, 836, 845, 863, 868, 885, 890, 910, 935, 962, 967, 968, 970, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1019, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1044, 1054, 1055, 1058, 1059, 1100, 1111, 1118, 1150, 1168, 1169, 1172, 1180, 1204, 1211, 1213, 1232, 1240, 1244, 1267, 1270, 1295, 1316, 1333, 1340, 1341, 1343, 1344, 1345, 1346, 1350, 1362, 1390, 1393], "dtype_format": [41, 352], "dtypekind": 209, "dtypelik": [207, 970], "dtypeoper": [1, 60], "dubiou": 101, "duckdb": 138, "due": [242, 257, 284, 287, 322, 352, 363, 458, 472, 477, 490, 616, 617, 619, 621, 623, 624, 653, 657, 659, 661, 663, 665, 668, 670, 672, 770, 784, 785, 787, 788, 832, 833, 845, 863, 885, 890, 910, 962, 1072, 1090, 1095, 1108], "dummi": [307, 352, 1338, 1362], "dump": 146, "duplic": [57, 106, 249, 256, 257, 258, 317, 321, 352, 363, 530, 616, 640, 835, 845, 889, 890, 891, 925, 928, 962, 1149, 1234, 1362, 1391], "duplicateerror": [640, 845, 1234, 1362], "dur": [258, 352, 891, 962], "durat": [205, 257, 322, 352, 450, 458, 482, 483, 484, 485, 486, 487, 488, 489, 493, 499, 749, 784, 785, 787, 788, 832, 833, 845, 890, 962, 967, 968, 1064, 1072, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1111, 1120, 1343, 1345, 1362], "dure": [48, 49, 50, 51, 56, 63, 64, 105, 130, 150, 151, 165, 170, 205, 230, 352, 858, 866, 867, 877, 904, 936, 962, 1125, 1362], "dutch": [449, 461, 770, 1063, 1075], "dynam": [147, 242, 352, 401, 583, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 845, 885, 962, 966, 1011, 1205], "dynamicgroupbi": [242, 352], "e": [11, 34, 36, 38, 40, 43, 44, 47, 48, 146, 150, 156, 158, 162, 168, 170, 171, 183, 221, 233, 240, 244, 253, 257, 260, 303, 304, 310, 320, 352, 361, 444, 495, 499, 502, 529, 586, 592, 597, 598, 599, 600, 601, 603, 604, 605, 607, 608, 609, 679, 684, 703, 724, 725, 736, 791, 807, 824, 835, 845, 872, 881, 890, 893, 908, 962, 966, 968, 1114, 1120, 1148, 1273, 1291, 1324, 1362, 1380, 1385, 1393], "e101": [41, 352], "e_filt": [603, 605], "e_sum_ov": [603, 605], "e_sum_slic": [603, 605], "each": [38, 41, 48, 52, 53, 54, 57, 66, 73, 84, 151, 152, 155, 160, 169, 174, 175, 176, 177, 179, 217, 219, 226, 233, 240, 241, 242, 255, 257, 261, 274, 276, 280, 284, 286, 288, 309, 314, 318, 321, 322, 330, 331, 333, 335, 337, 338, 346, 352, 377, 422, 426, 427, 442, 461, 477, 490, 508, 532, 535, 561, 564, 571, 581, 588, 592, 640, 643, 651, 652, 660, 664, 675, 680, 687, 700, 704, 705, 709, 710, 718, 720, 721, 729, 736, 751, 765, 768, 774, 799, 800, 804, 827, 835, 845, 866, 869, 870, 876, 881, 885, 890, 904, 907, 910, 926, 928, 938, 940, 942, 944, 945, 953, 962, 987, 1036, 1037, 1043, 1057, 1075, 1095, 1108, 1152, 1155, 1183, 1186, 1193, 1203, 1234, 1236, 1245, 1246, 1260, 1269, 1288, 1292, 1293, 1297, 1298, 1306, 1308, 1309, 1317, 1324, 1332, 1362, 1379, 1385, 1390, 1391, 1393], "eager": [96, 242, 257, 276, 320, 352, 451, 454, 457, 459, 469, 470, 472, 473, 476, 477, 481, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 657, 659, 661, 663, 665, 668, 670, 672, 765, 769, 771, 775, 777, 784, 785, 787, 788, 795, 799, 800, 803, 804, 817, 820, 823, 824, 827, 832, 833, 836, 844, 845, 885, 890, 895, 962, 967, 1064, 1065, 1068, 1071, 1072, 1073, 1074, 1080, 1081, 1083, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1390], "eager_execut": 1390, "eagerli": [583, 1371], "ear": [718, 729, 1306], "earlier": [257, 352, 890, 962], "earliest": [242, 352, 475, 476, 728, 731, 786, 885, 954, 962, 1093, 1094, 1316, 1319], "easi": 205, "easiest": 210, "easili": [57, 290, 314, 326, 331, 352, 827, 841, 912, 931, 938, 962], "east": [75, 170, 258, 352, 891, 962], "ebf1d": [41, 352], "edg": [523, 845, 1143, 1362], "eee": [1, 41, 352, 968], "ef": 715, "effect": [41, 48, 49, 50, 51, 55, 235, 242, 352, 458, 512, 592, 618, 620, 622, 775, 845, 885, 934, 935, 962, 1064, 1072], "effici": [132, 152, 253, 255, 352, 591, 845], "efgh": 1385, "eg": [18, 26, 27, 41, 65, 153, 205, 309, 352, 477, 728, 731, 752, 845, 968, 1316, 1319], "egnaro": 1385, "either": [63, 64, 88, 147, 181, 252, 256, 257, 258, 274, 284, 285, 309, 310, 352, 499, 591, 638, 640, 653, 728, 760, 768, 772, 827, 845, 866, 867, 889, 890, 891, 893, 910, 962, 966, 968, 1120, 1232, 1234, 1316, 1362, 1375, 1393], "element": [14, 15, 26, 176, 177, 180, 181, 183, 185, 210, 212, 219, 252, 276, 285, 298, 300, 315, 323, 352, 369, 370, 371, 372, 373, 374, 385, 386, 421, 422, 429, 432, 433, 434, 435, 437, 438, 439, 440, 441, 447, 448, 503, 504, 508, 521, 525, 533, 544, 552, 554, 555, 556, 559, 564, 572, 573, 574, 575, 579, 585, 587, 588, 591, 592, 633, 634, 643, 646, 654, 655, 656, 658, 660, 662, 664, 666, 667, 669, 671, 676, 681, 682, 683, 687, 688, 689, 720, 721, 732, 747, 748, 750, 751, 757, 768, 777, 803, 821, 822, 826, 834, 845, 861, 870, 919, 921, 924, 929, 962, 979, 980, 981, 982, 983, 984, 995, 996, 1031, 1041, 1044, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1061, 1062, 1123, 1124, 1129, 1130, 1142, 1145, 1153, 1162, 1164, 1166, 1167, 1174, 1176, 1177, 1178, 1181, 1186, 1194, 1195, 1196, 1197, 1209, 1210, 1213, 1229, 1236, 1240, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1262, 1270, 1271, 1272, 1276, 1277, 1308, 1309, 1320, 1334, 1335, 1336, 1340, 1347, 1348, 1352, 1362, 1379, 1380], "elementwis": [591, 633, 655, 656, 658, 660, 662, 664, 667, 669, 671, 845, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1362], "elig": [895, 962], "elimin": [63, 130, 541, 845, 1163, 1362], "elis": [268, 352, 900, 962], "ellips": 21, "ellipsi": [240, 352], "elppa": 1385, "els": 151, "email": [700, 1288], "email_part": [700, 1288], "emphas": [352, 356], "emploi": 968, "empti": [14, 36, 38, 48, 110, 134, 150, 151, 155, 161, 163, 165, 214, 215, 242, 267, 319, 352, 690, 698, 805, 823, 864, 865, 885, 899, 927, 962, 967, 968, 1044, 1046, 1130, 1150, 1164, 1278, 1286, 1362], "en": [21, 41, 352], "enabl": [29, 30, 47, 51, 56, 63, 64, 97, 98, 154, 162, 166, 168, 170, 174, 175, 176, 177, 189, 207, 290, 311, 326, 352, 364, 366, 647, 648, 677, 692, 702, 704, 716, 756, 841, 845, 866, 867, 877, 904, 912, 917, 931, 962, 970, 975, 976, 1241, 1242, 1264, 1280, 1290, 1292, 1304, 1344, 1351, 1362], "enable_string_cach": 97, "enclos": [514, 845], "encod": [69, 75, 87, 146, 150, 151, 165, 307, 352, 355, 406, 514, 651, 694, 740, 845, 1016, 1245, 1282, 1338, 1362, 1367], "encompass": [523, 845, 1143, 1362], "encount": [55, 121, 150, 151, 165, 242, 352, 625, 626, 707, 708, 775, 779, 793, 845, 885, 962, 1222, 1223, 1295, 1296, 1362], "end": [38, 41, 48, 150, 151, 165, 242, 248, 276, 352, 405, 408, 411, 424, 428, 450, 477, 502, 527, 528, 577, 691, 696, 700, 705, 712, 718, 722, 723, 724, 727, 765, 770, 783, 784, 785, 786, 787, 788, 791, 799, 800, 803, 804, 832, 833, 835, 841, 845, 885, 888, 904, 962, 968, 1018, 1033, 1038, 1064, 1095, 1146, 1147, 1160, 1199, 1284, 1288, 1293, 1300, 1306, 1310, 1311, 1312, 1317, 1362, 1385], "endian": [409, 1019], "endpoint": [190, 442, 640, 803, 845, 1057, 1234, 1362], "ends_a": 1385, "ends_in_digit": 1385, "ends_with": [405, 411, 428, 691, 722, 968, 1038, 1310, 1383], "ends_with_expr": 408, "ends_with_lit": 408, "engin": [10, 15, 39, 48, 49, 50, 51, 63, 64, 96, 145, 152, 153, 155, 161, 187, 241, 256, 261, 310, 317, 338, 352, 591, 824, 845, 866, 867, 877, 884, 889, 895, 899, 904, 917, 925, 937, 945, 959, 962, 966, 1213, 1343, 1362, 1374, 1390], "engine_opt": [39, 155, 352], "enginetyp": [48, 49, 50, 51, 63, 64, 866, 867, 877, 904, 917, 962], "enough": [555, 684, 845, 1177, 1273, 1362], "ensur": [11, 41, 52, 54, 96, 147, 153, 180, 183, 207, 233, 241, 274, 276, 280, 285, 310, 352, 529, 591, 845, 881, 884, 895, 907, 937, 962, 968, 970, 1343, 1362], "enter": 205, "entir": [41, 155, 161, 352], "entri": [205, 352, 962, 967, 1390], "entropi": [845, 1362], "enumer": [75, 136, 150, 151, 155, 161, 165, 255, 352], "env": [4, 186], "env_onli": 31, "environ": [4, 31, 38, 43, 47, 48, 49, 50, 51, 63, 64, 147, 160, 162, 165, 168, 169, 170, 184, 187, 190, 195, 309, 352, 866, 867, 877, 904, 917, 962], "eol_char": [150, 151, 165], "eparg": 1385, "epoch": [71, 72, 490, 795, 1108, 1386], "epoch_": [459, 1073], "epoch_n": [459, 1073], "epochtimeunit": [459, 795, 1073], "eq": [233, 280, 352, 497, 508, 845, 881, 907, 962, 1116, 1362], "eq_miss": [845, 1225, 1362], "equal": [56, 98, 150, 151, 165, 174, 175, 176, 177, 242, 257, 258, 268, 298, 352, 442, 490, 496, 497, 517, 543, 583, 628, 640, 646, 654, 655, 656, 658, 660, 662, 664, 666, 667, 669, 671, 687, 712, 713, 716, 738, 768, 803, 821, 822, 835, 841, 845, 881, 885, 890, 891, 900, 907, 919, 962, 1057, 1095, 1116, 1205, 1225, 1234, 1240, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1300, 1301, 1304, 1326, 1362, 1379, 1382, 1393], "equiprob": [220, 278, 344, 352, 641, 664, 665, 818, 845, 871, 905, 951, 962, 1058, 1235, 1253, 1362], "equival": [41, 65, 131, 133, 134, 135, 137, 159, 160, 169, 242, 252, 272, 352, 361, 365, 427, 496, 497, 499, 512, 517, 519, 543, 590, 612, 614, 627, 628, 629, 632, 638, 710, 734, 736, 737, 744, 752, 759, 845, 885, 962, 1037, 1115, 1116, 1120, 1136, 1138, 1162, 1165, 1212, 1224, 1225, 1298, 1322, 1324, 1325, 1362, 1372, 1380, 1392], "err": 701, "error": [15, 40, 55, 64, 65, 96, 116, 120, 122, 133, 134, 137, 145, 150, 151, 155, 162, 165, 170, 257, 276, 285, 310, 352, 363, 388, 389, 406, 449, 558, 560, 562, 583, 616, 648, 691, 694, 699, 701, 703, 707, 708, 728, 730, 731, 735, 845, 863, 867, 890, 937, 945, 962, 998, 999, 1016, 1063, 1180, 1182, 1184, 1242, 1279, 1282, 1287, 1289, 1291, 1295, 1296, 1316, 1318, 1319, 1323, 1343, 1362, 1388], "escap": [99, 150, 151, 153, 165, 697, 714, 715, 1285, 1302, 1303], "esp": 15, "especi": [179, 652, 845, 962, 1246, 1362], "espresso": 968, "est": 787, "establish": [152, 205], "estim": [150, 151, 211, 228, 352, 368, 500, 501, 541, 764, 845, 860, 962, 978, 1118, 1121, 1122, 1163, 1362], "estimated_s": [352, 1362], "etc": [22, 40, 41, 147, 150, 154, 155, 156, 158, 166, 167, 352, 592, 845, 968, 1261, 1263, 1362, 1386], "eu": [166, 167], "eur": [240, 352, 1393], "europ": [454, 458, 476, 1068, 1072, 1094], "eval": [308, 352, 591, 592, 790, 845, 1213, 1340, 1362], "evalu": [48, 49, 50, 51, 170, 231, 233, 257, 280, 352, 365, 378, 380, 381, 413, 414, 415, 416, 418, 419, 441, 508, 526, 546, 547, 583, 632, 633, 760, 762, 765, 769, 771, 775, 777, 784, 785, 787, 788, 790, 799, 800, 803, 804, 817, 820, 823, 827, 832, 833, 835, 836, 845, 866, 881, 887, 889, 890, 907, 962, 988, 990, 991, 1023, 1024, 1025, 1026, 1028, 1029, 1056, 1129, 1168, 1169, 1353, 1362, 1382], "even": [38, 48, 150, 256, 352, 499, 637, 640, 845, 889, 962, 968, 1120, 1234, 1362], "evenli": [242, 352, 803, 804, 885, 962], "event": [64, 867, 962], "eventu": [39, 352], "ever": [633, 845], "everi": [15, 38, 48, 150, 151, 155, 161, 165, 236, 242, 306, 322, 352, 380, 381, 382, 383, 386, 388, 394, 437, 438, 439, 440, 441, 477, 490, 504, 516, 548, 549, 553, 556, 559, 560, 561, 569, 572, 577, 581, 652, 698, 779, 780, 845, 883, 885, 962, 990, 991, 992, 993, 996, 998, 1004, 1052, 1053, 1054, 1055, 1056, 1095, 1108, 1124, 1135, 1170, 1171, 1175, 1178, 1181, 1182, 1183, 1191, 1194, 1199, 1203, 1246, 1286, 1362], "everybodi": [692, 716, 1280, 1304], "everyth": 968, "ew": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "ewm_mean": [845, 1362], "ewm_mean_bi": [845, 1362], "ewm_std": [845, 1362], "ewm_var": [845, 1362], "ewma": [499, 845, 1120, 1362], "exact": [176, 179, 181, 185, 257, 296, 352, 368, 512, 698, 726, 727, 728, 730, 731, 752, 845, 890, 962, 1286, 1316, 1318, 1319], "exactli": [133, 134, 137, 174, 175, 176, 177, 180, 181, 185, 352, 720, 721, 726, 727, 789, 962, 1268, 1308, 1309, 1314, 1315, 1362], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 65, 66, 75, 84, 88, 96, 97, 98, 102, 105, 106, 107, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 147, 150, 151, 152, 153, 154, 155, 159, 160, 161, 165, 166, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 841, 845, 857, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 962, 967, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1134, 1135, 1137, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1362, 1367, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1382, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392], "exc_tb": 1390, "exc_typ": 1390, "exc_val": 1390, "exce": [240, 352], "excel": [37, 41, 149, 155, 352, 857], "excelspreadsheetengin": 155, "except": [0, 222, 237, 244, 257, 260, 281, 303, 352, 648, 705, 729, 791, 845, 857, 873, 890, 908, 962, 968, 1032, 1142, 1167, 1242, 1293, 1317, 1334, 1343, 1362, 1389], "exclud": [181, 185, 242, 352, 422, 437, 440, 449, 461, 529, 599, 751, 770, 841, 845, 885, 962, 968, 1063, 1075, 1148, 1362], "excluded_dtyp": [181, 182, 185], "exclus": [285, 352, 759, 765, 799, 800, 845], "execut": [10, 40, 48, 49, 50, 51, 56, 63, 64, 65, 96, 147, 152, 153, 259, 299, 352, 444, 555, 756, 824, 835, 845, 862, 866, 867, 872, 877, 895, 904, 906, 917, 920, 937, 962, 1177, 1351, 1362, 1372, 1373, 1374, 1376, 1390, 1392], "execute_glob": 1390, "execute_opt": [152, 153], "exist": [1, 39, 40, 41, 42, 57, 75, 106, 154, 162, 166, 170, 181, 222, 237, 276, 281, 316, 321, 326, 327, 352, 363, 405, 408, 411, 453, 476, 714, 715, 773, 845, 869, 873, 876, 908, 911, 928, 930, 931, 932, 962, 968, 1067, 1094, 1302, 1303, 1392], "existing_t": 1392, "existing_table_path": [40, 352], "exit": [56, 97, 205, 1377, 1390], "exp": [498, 499, 500, 501, 845, 1119, 1120, 1121, 1122, 1362, 1383], "exp_a": 1384, "expand": [147, 150, 162, 165, 170, 504, 597, 601, 646, 742, 845, 968, 1124, 1240, 1362], "expand_selector": 968, "expans": 739, "expect": [38, 40, 43, 47, 48, 49, 50, 51, 54, 73, 79, 111, 119, 127, 150, 152, 154, 160, 162, 165, 166, 168, 169, 170, 175, 177, 195, 352, 583, 592, 805, 845, 893, 895, 962], "expens": [150, 151, 160, 162, 165, 169, 170, 184, 186, 254, 261, 285, 286, 287, 316, 317, 352, 592, 845, 869, 871, 876, 911, 925, 930, 962, 1125, 1213, 1362, 1393], "experiment": [47, 51, 163, 258, 314, 352, 803, 804, 891, 931, 962], "expiri": [38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 352, 962], "explain": [130, 210, 259, 352, 866, 962, 1389], "explainformat": [877, 962], "explicit": [41, 105, 152, 165, 179, 299, 321, 352, 482, 819, 920, 928, 962, 1100], "explicitli": [75, 105, 153, 179, 181, 205, 237, 256, 352, 647, 827, 845, 856, 889, 962, 1390], "explod": [147, 352, 422, 510, 633, 649, 751, 845, 962, 1243, 1362, 1380], "explor": [220, 352, 871, 962], "expon": [638, 845, 1232, 1362, 1384], "exponenti": [498, 499, 500, 501, 503, 638, 845, 1119, 1120, 1121, 1122, 1123, 1362, 1384], "export": [41, 43, 44, 49, 208, 254, 255, 286, 287, 304, 306, 309, 352, 841, 962, 968, 971, 1337, 1362], "expos": 857, "expr": [1, 52, 54, 57, 58, 59, 60, 61, 145, 147, 229, 231, 232, 247, 256, 257, 258, 272, 276, 285, 290, 291, 309, 314, 326, 327, 352, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 845, 846, 847, 850, 851, 852, 853, 854, 878, 879, 880, 889, 890, 891, 905, 912, 913, 931, 932, 962, 968, 1056, 1115, 1116, 1120, 1127, 1128, 1134, 1136, 1138, 1165, 1177, 1183, 1199, 1203, 1212, 1224, 1225, 1240, 1279, 1284, 1291, 1310, 1362, 1388], "expr1": [1382, 1390], "expr2": [1382, 1390], "expr_unique_subset": [272, 352], "express": [0, 8, 52, 54, 63, 145, 147, 178, 181, 185, 212, 229, 231, 233, 241, 247, 256, 257, 261, 272, 276, 280, 285, 290, 291, 295, 298, 309, 314, 315, 326, 327, 329, 331, 338, 352, 361, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 377, 378, 382, 383, 384, 385, 386, 389, 400, 405, 406, 407, 408, 409, 410, 411, 422, 424, 426, 427, 428, 431, 432, 433, 434, 435, 441, 442, 443, 444, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 502, 504, 505, 507, 508, 512, 514, 515, 517, 518, 519, 520, 526, 529, 530, 531, 532, 533, 534, 535, 543, 544, 548, 549, 551, 552, 555, 556, 562, 564, 582, 583, 589, 590, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 612, 614, 616, 617, 619, 621, 623, 624, 627, 628, 630, 632, 633, 637, 638, 639, 640, 642, 646, 647, 648, 649, 651, 652, 675, 676, 677, 680, 682, 683, 685, 687, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 714, 715, 716, 718, 719, 720, 721, 729, 733, 743, 744, 747, 748, 751, 752, 753, 755, 756, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 814, 817, 819, 820, 821, 822, 823, 825, 827, 829, 831, 832, 833, 835, 836, 841, 844, 857, 861, 866, 877, 878, 881, 884, 889, 890, 904, 907, 912, 913, 916, 917, 919, 924, 931, 932, 933, 935, 938, 945, 962, 968, 995, 1045, 1056, 1063, 1067, 1100, 1115, 1116, 1120, 1126, 1136, 1138, 1148, 1165, 1174, 1177, 1212, 1213, 1224, 1225, 1240, 1241, 1242, 1262, 1266, 1279, 1280, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1302, 1303, 1304, 1317, 1321, 1362, 1380, 1382, 1384, 1385, 1389], "exprmetanamespac": [596, 602], "ext": [52, 53, 54, 152], "extend": [0, 134, 324, 352, 505, 845, 857, 966, 977, 1126, 1362], "extend_const": [845, 1362], "extens": [311, 352, 1344, 1362], "extern": [202, 933, 962], "external_shallow_clon": 202, "extra": [40, 55, 147, 150, 151, 154, 156, 158, 162, 165, 166, 167, 170, 230, 242, 352, 845, 885, 962, 1125, 1362], "extra_struct_field": 55, "extract": [138, 210, 299, 352, 452, 455, 457, 460, 463, 464, 465, 466, 467, 468, 471, 473, 474, 478, 480, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 637, 700, 701, 702, 707, 708, 718, 720, 845, 1066, 1069, 1070, 1071, 1074, 1077, 1081, 1082, 1083, 1085, 1086, 1089, 1091, 1092, 1096, 1098, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1112, 1288, 1289, 1290, 1295, 1296, 1306, 1383], "extract_mani": [704, 1292], "extract_numb": [637, 845], "extracted_nr": 700, "extrem": [505, 655, 845, 1126, 1248, 1362], "extrema": [679, 845, 1267, 1362], "f": [52, 58, 151, 152, 233, 240, 255, 304, 310, 316, 320, 352, 361, 401, 410, 583, 679, 698, 728, 731, 773, 845, 881, 962, 968, 1011, 1205, 1286, 1316, 1319, 1362, 1367, 1380], "f32": [1, 60, 213, 299, 308, 314, 352, 679, 824, 845, 863, 920, 962, 968, 1211, 1362, 1388], "f4": [310, 352], "f5ed2452": [41, 352], "f64": [7, 9, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 57, 59, 61, 65, 84, 96, 132, 134, 159, 171, 178, 181, 213, 214, 215, 218, 220, 221, 222, 224, 226, 231, 232, 235, 239, 240, 241, 242, 247, 248, 256, 257, 263, 264, 265, 266, 270, 276, 277, 278, 297, 298, 300, 302, 314, 323, 326, 331, 334, 336, 339, 340, 341, 342, 344, 345, 352, 360, 363, 369, 370, 371, 372, 373, 374, 392, 398, 403, 410, 423, 429, 430, 432, 433, 434, 442, 443, 447, 448, 478, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 511, 512, 517, 519, 527, 528, 536, 537, 538, 539, 541, 543, 555, 566, 567, 579, 585, 586, 587, 588, 590, 593, 594, 595, 611, 614, 616, 625, 626, 627, 628, 634, 638, 640, 641, 642, 643, 647, 648, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 681, 682, 683, 684, 688, 689, 743, 747, 748, 752, 757, 766, 767, 771, 773, 775, 777, 790, 791, 803, 804, 807, 810, 811, 812, 824, 826, 834, 841, 845, 863, 864, 871, 873, 874, 879, 880, 884, 885, 888, 889, 890, 897, 898, 905, 919, 921, 929, 931, 933, 938, 941, 943, 946, 947, 948, 949, 951, 952, 962, 968, 979, 980, 981, 982, 983, 984, 1002, 1008, 1013, 1020, 1041, 1042, 1047, 1048, 1049, 1057, 1058, 1061, 1062, 1096, 1119, 1120, 1121, 1122, 1123, 1127, 1132, 1143, 1146, 1147, 1177, 1188, 1189, 1201, 1207, 1208, 1209, 1210, 1229, 1232, 1234, 1236, 1242, 1247, 1248, 1250, 1251, 1253, 1254, 1255, 1257, 1258, 1259, 1270, 1271, 1272, 1276, 1335, 1336, 1350, 1362, 1371, 1379, 1380, 1384, 1387, 1390, 1393], "f_string": 794, "fa1e": [733, 1321], "face": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 352, 962], "facil": 152, "facilit": [216, 352], "factor": [498, 500, 501, 749, 845, 1119, 1121, 1122, 1345, 1362], "fail": [38, 39, 40, 43, 47, 48, 49, 50, 51, 132, 154, 156, 160, 162, 165, 166, 168, 169, 170, 195, 209, 310, 317, 352, 378, 480, 583, 728, 730, 731, 735, 845, 925, 962, 1213, 1316, 1318, 1319, 1323, 1343, 1362, 1388], "fall": [170, 442, 640, 845, 866, 877, 904, 917, 937, 962, 1057, 1234, 1362, 1379], "fallback": [132, 155], "fals": [5, 7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 38, 40, 41, 47, 48, 49, 50, 51, 52, 55, 57, 63, 64, 65, 132, 133, 134, 136, 137, 138, 145, 147, 150, 151, 152, 154, 155, 156, 158, 160, 161, 162, 165, 166, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 209, 212, 213, 214, 215, 220, 227, 233, 235, 239, 240, 241, 242, 246, 249, 250, 251, 254, 256, 257, 259, 264, 265, 271, 272, 274, 276, 277, 280, 285, 286, 287, 288, 290, 293, 296, 298, 299, 302, 305, 307, 310, 311, 315, 316, 317, 321, 322, 324, 326, 334, 336, 339, 340, 342, 345, 352, 364, 365, 366, 377, 380, 381, 384, 388, 389, 397, 402, 405, 408, 411, 422, 423, 424, 428, 436, 437, 438, 439, 440, 441, 442, 449, 461, 462, 478, 495, 496, 497, 498, 500, 501, 519, 520, 523, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 546, 547, 551, 555, 558, 560, 562, 571, 578, 583, 584, 590, 591, 592, 596, 598, 599, 600, 602, 604, 607, 608, 627, 628, 630, 632, 633, 635, 636, 640, 643, 654, 655, 656, 658, 660, 662, 664, 666, 667, 669, 671, 675, 677, 679, 684, 686, 687, 690, 691, 692, 693, 696, 702, 703, 704, 706, 707, 714, 715, 716, 719, 720, 722, 728, 730, 731, 733, 751, 753, 756, 759, 760, 761, 762, 763, 765, 768, 769, 770, 771, 774, 775, 777, 778, 779, 784, 785, 787, 788, 793, 799, 800, 803, 804, 805, 807, 811, 817, 820, 823, 824, 827, 829, 832, 833, 835, 836, 845, 861, 863, 864, 865, 866, 867, 871, 877, 881, 884, 885, 889, 890, 893, 895, 904, 907, 912, 915, 917, 919, 920, 924, 925, 928, 931, 937, 941, 943, 946, 947, 949, 952, 962, 967, 968, 975, 976, 987, 990, 991, 994, 998, 999, 1007, 1012, 1015, 1016, 1018, 1021, 1032, 1033, 1035, 1038, 1040, 1043, 1044, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1063, 1075, 1076, 1096, 1116, 1117, 1119, 1121, 1122, 1129, 1131, 1137, 1139, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1168, 1169, 1173, 1177, 1180, 1182, 1184, 1193, 1200, 1206, 1219, 1225, 1227, 1230, 1231, 1234, 1236, 1237, 1238, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1264, 1268, 1273, 1275, 1278, 1279, 1280, 1281, 1284, 1290, 1291, 1292, 1294, 1295, 1302, 1303, 1304, 1307, 1308, 1310, 1316, 1318, 1319, 1321, 1338, 1343, 1344, 1348, 1351, 1353, 1362, 1372, 1374, 1380, 1385, 1390], "far": [41, 352], "fashion": [256, 352], "fast": [47, 49, 51, 147, 184, 186, 352, 505, 677, 845, 962, 966, 1126, 1264, 1362, 1393], "fast_executemani": [39, 352], "fast_project": 936, "faster": [48, 49, 50, 51, 63, 152, 155, 230, 310, 320, 352, 592, 754, 845, 866, 877, 904, 917, 962, 1125, 1213, 1362], "fastexcel": [155, 173], "favor": [39, 352], "fay": 146, "feat1": [309, 314, 352], "feat2": [309, 314, 352], "feather": [43, 156, 168, 352, 857], "featur": [1, 47, 62, 73, 79, 167, 309, 314, 352], "feature_0": [933, 962], "feature_0_train": [933, 962], "feature_1": [933, 962], "feature_nam": [314, 352], "feb": [173, 1385], "februari": 1385, "fed": 724, "feel": [692, 716, 1280, 1304], "fetch": [140, 866, 962], "fetch_california_h": [314, 352], "few": [240, 352], "fewer": [705, 729, 962, 1293, 1317], "ff": 1379, "ff00": [733, 1321], "fff": 1, "ffff00": [406, 407, 694, 1016, 1017, 1282], "ffffff": [41, 352], "ffi": [228, 352, 1118, 1362], "fgg": 968, "fghi": 1385, "fh": 151, "fiction": 1371, "field": [37, 38, 40, 48, 51, 55, 88, 123, 126, 134, 141, 318, 352, 401, 583, 591, 592, 618, 620, 622, 651, 700, 701, 707, 720, 721, 741, 742, 743, 749, 756, 779, 780, 806, 827, 835, 845, 926, 962, 1011, 1205, 1213, 1245, 1289, 1308, 1309, 1330, 1332, 1345, 1362, 1386], "field_0": [401, 583, 1011, 1205], "field_1": [401, 583, 1011, 1205], "field_2": [1011, 1205], "field_id": 141, "field_n": [401, 583, 1011, 1205], "field_nam": [592, 845, 1213, 1362], "field_overwrit": [51, 141, 962], "fiftyf": [525, 845], "figsiz": [607, 904, 917, 962], "figur": [607, 674, 845, 917, 962, 1259, 1362], "file": [2, 3, 5, 6, 33, 36, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 221, 230, 292, 352, 444, 514, 606, 610, 845, 872, 914, 962, 966, 1125, 1362], "file_cache_ttl": [160, 165, 168, 169], "file_idx": [53, 142, 144], "file_path": [52, 53, 54, 142, 144], "filenam": 156, "filesourc": [155, 161, 162, 170], "filesystem": [40, 154, 166, 167, 352], "fill": [57, 65, 214, 231, 232, 295, 320, 352, 356, 404, 437, 440, 506, 507, 513, 527, 528, 656, 658, 660, 662, 664, 667, 669, 671, 678, 794, 817, 820, 836, 845, 879, 880, 916, 933, 962, 1014, 1127, 1128, 1133, 1147, 1226, 1249, 1250, 1252, 1255, 1256, 1257, 1266, 1362], "fill_char": [712, 713, 1300, 1301], "fill_nan": [232, 352, 507, 845, 880, 962, 1128, 1362], "fill_nul": [57, 231, 322, 352, 404, 437, 440, 506, 513, 678, 845, 879, 933, 962, 1014, 1127, 1133, 1362], "fill_valu": [295, 320, 352, 678, 845, 916, 962, 1266, 1362], "fillnullstrategi": [232, 352, 507, 845, 880, 962, 1128, 1362], "film": 1371, "filter": [1, 58, 63, 96, 145, 165, 166, 170, 171, 224, 225, 249, 250, 251, 276, 280, 338, 352, 424, 428, 603, 605, 696, 722, 758, 783, 786, 793, 823, 824, 835, 845, 866, 874, 875, 877, 887, 904, 907, 917, 920, 945, 962, 968, 1263, 1362, 1378], "final": [14, 41, 57, 147, 170, 257, 259, 352, 498, 500, 501, 845, 871, 890, 962, 1119, 1121, 1122, 1362, 1391], "find": [65, 238, 352, 525, 676, 691, 692, 704, 845, 1145, 1262, 1280, 1292, 1302, 1362], "find_pat": 703, "fine": [866, 877, 904, 917, 959, 962], "finish": [230, 352, 1125, 1362], "finit": [531, 752, 775, 845, 1151, 1362], "first": [47, 57, 150, 151, 155, 156, 158, 161, 162, 165, 170, 174, 175, 176, 177, 210, 240, 242, 244, 256, 257, 260, 261, 271, 275, 276, 284, 303, 307, 308, 316, 317, 322, 329, 335, 352, 377, 379, 388, 441, 445, 470, 472, 477, 493, 512, 522, 525, 532, 545, 553, 555, 560, 561, 583, 591, 592, 604, 613, 637, 638, 653, 676, 687, 691, 698, 699, 703, 705, 707, 708, 714, 715, 729, 736, 771, 772, 779, 793, 797, 835, 841, 845, 885, 886, 889, 890, 894, 903, 910, 925, 933, 935, 942, 962, 968, 987, 998, 1056, 1058, 1059, 1088, 1090, 1095, 1111, 1142, 1145, 1152, 1167, 1175, 1177, 1182, 1183, 1205, 1213, 1262, 1275, 1286, 1287, 1289, 1291, 1293, 1295, 1296, 1302, 1303, 1317, 1324, 1334, 1338, 1340, 1343, 1362, 1382, 1383, 1385, 1391, 1393], "first_column": [41, 352], "first_non_nul": [583, 1205], "first_part": [720, 721, 1308, 1309], "fisher": [541, 654, 684, 845, 1163, 1247, 1273, 1362], "fit": [146, 254, 296, 320, 352, 679, 820, 845, 1267, 1268, 1362], "five": [313, 352, 1393], "fix": [11, 66, 75, 179, 493, 789, 804, 1111], "flag": [62, 154, 166, 178, 293, 310, 352, 677, 691, 699, 700, 703, 714, 715, 845, 877, 895, 915, 962, 968, 1264, 1279, 1287, 1288, 1291, 1302, 1303, 1343, 1362, 1385], "flat": [146, 287, 352, 556, 649, 845, 1178, 1243, 1362], "flat_from_polar": 141, "flatten": 845, "flavour": [41, 152, 352], "flight": 152, "flight_sql": 152, "flightsql": 152, "float": [11, 12, 38, 41, 48, 55, 77, 78, 150, 151, 165, 171, 174, 175, 176, 177, 178, 181, 185, 209, 220, 224, 228, 231, 257, 278, 288, 309, 310, 344, 352, 384, 430, 442, 447, 448, 478, 495, 496, 497, 498, 500, 501, 506, 511, 512, 517, 519, 527, 531, 534, 536, 537, 538, 539, 543, 551, 571, 586, 590, 593, 607, 611, 625, 626, 627, 628, 638, 640, 641, 655, 656, 658, 660, 662, 664, 665, 667, 669, 671, 673, 675, 681, 752, 818, 820, 845, 871, 874, 879, 890, 905, 917, 951, 962, 968, 994, 1032, 1042, 1057, 1058, 1060, 1061, 1062, 1096, 1114, 1118, 1119, 1121, 1122, 1127, 1132, 1143, 1163, 1173, 1193, 1208, 1222, 1223, 1232, 1233, 1234, 1235, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1260, 1263, 1270, 1273, 1277, 1333, 1343, 1352, 1362, 1390, 1393], "float16": [314, 352], "float32": [1, 11, 38, 48, 60, 213, 235, 308, 309, 310, 314, 352, 499, 845, 863, 962, 968, 1120, 1150, 1211, 1341, 1343, 1346, 1362], "float4": [299, 352, 824, 920, 962, 1388], "float64": [11, 38, 41, 48, 96, 134, 150, 159, 178, 181, 216, 226, 228, 235, 289, 314, 326, 352, 369, 370, 371, 372, 373, 374, 410, 423, 432, 433, 434, 443, 478, 499, 502, 536, 537, 642, 682, 683, 747, 748, 791, 807, 817, 820, 836, 841, 845, 868, 876, 911, 931, 962, 967, 968, 1096, 1120, 1344, 1350, 1362], "float_cast": 55, "float_list": 84, "float_precis": [9, 11, 28, 38, 41, 48, 352, 962], "float_scientif": [38, 48, 352, 962], "floatcastopt": 55, "floatfmt": 12, "floor": [59, 512, 845, 1362, 1383], "floor_a": 1384, "floordiv": [752, 845], "fmt": [12, 257, 352, 526, 794, 845, 887, 890, 962], "fmt_number": [352, 356], "fmt_str_length": [13, 784, 785, 787, 788], "fmt_table_cell_list_len": 14, "fmt_titl": [41, 352], "fn": [779, 780, 793, 819], "foggi": [714, 715, 1302, 1303], "fold": [352, 604, 771, 779, 780, 819, 835], "folder": 171, "follow": [41, 47, 62, 145, 150, 151, 152, 154, 155, 161, 165, 166, 167, 242, 257, 261, 275, 284, 310, 322, 352, 472, 477, 490, 499, 591, 637, 638, 643, 653, 657, 659, 661, 663, 665, 666, 668, 670, 672, 681, 741, 752, 767, 784, 785, 787, 788, 807, 832, 833, 835, 837, 838, 840, 845, 846, 847, 850, 852, 853, 854, 885, 890, 903, 910, 962, 968, 1090, 1095, 1108, 1120, 1232, 1236, 1261, 1263, 1270, 1343, 1354, 1356, 1358, 1362, 1363, 1368, 1369, 1370, 1388, 1393], "font": [41, 352], "font_color": [41, 352], "font_siz": [41, 352], "foo": [36, 38, 40, 43, 44, 45, 46, 47, 146, 159, 160, 213, 216, 217, 218, 222, 223, 224, 225, 226, 227, 230, 233, 235, 237, 238, 239, 243, 244, 245, 246, 247, 248, 250, 256, 260, 261, 262, 263, 264, 265, 266, 269, 270, 273, 276, 278, 280, 281, 282, 285, 288, 289, 290, 292, 294, 297, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 316, 317, 318, 323, 324, 325, 330, 352, 425, 442, 444, 472, 516, 522, 526, 545, 596, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 640, 649, 690, 693, 695, 698, 700, 701, 706, 717, 719, 721, 723, 724, 725, 726, 727, 734, 737, 746, 764, 775, 776, 777, 792, 796, 797, 798, 801, 802, 808, 810, 812, 813, 815, 816, 818, 823, 826, 830, 834, 835, 841, 845, 863, 868, 869, 873, 874, 875, 876, 881, 887, 888, 889, 902, 907, 908, 911, 912, 925, 926, 930, 933, 962, 967, 968, 1034, 1057, 1090, 1184, 1232, 1234, 1243, 1281, 1283, 1286, 1288, 1289, 1305, 1309, 1314, 1315, 1322, 1325, 1362, 1376, 1378, 1379, 1380, 1382, 1385, 1388], "foo1": 1385, "foo11": [235, 352], "foo_": [601, 719, 794], "foo_1": [307, 352], "foo_2": [307, 352], "foo_3_4": 1385, "foo_a": [276, 352], "foo_a_bar_1": 794, "foo_at_1": 1380, "foo_b": [276, 352], "foo_b_bar_2": 794, "foo_bar": [596, 602, 719, 805, 1376], "foo_bar2": [596, 602], "foo_bar_baz": 719, "foo_c_bar_3": 794, "foo_low": [734, 1385], "foo_mean": 1380, "foo_q25": 1379, "foo_q50": 1379, "foo_q75": 1379, "foo_std": 1379, "foo_strip": 723, "foo_strip_end": 724, "foo_strip_start": 725, "foo_sum": [1379, 1380], "foo_uniqu": 1380, "foo_upp": [737, 1385], "foo_var": 1379, "foobar": [726, 727, 1314, 1315, 1385], "foobarbar": [727, 1315], "foofoobar": [726, 1314], "foral": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "forbid": 55, "forc": [150, 156, 160, 162, 257, 261, 310, 338, 352, 583, 889, 890, 945, 962, 1213, 1343, 1362], "force_parallel": [257, 352, 889, 890, 962], "foreign": 202, "form": [38, 48, 131, 133, 134, 135, 137, 159, 160, 169, 254, 286, 320, 352, 482, 634, 711, 736, 845, 962, 1100, 1229, 1299, 1324, 1362, 1385], "format": [7, 12, 16, 17, 21, 37, 38, 41, 43, 44, 47, 48, 101, 132, 148, 150, 151, 152, 155, 156, 158, 161, 165, 171, 208, 221, 229, 240, 254, 267, 276, 286, 287, 292, 306, 319, 350, 352, 356, 444, 477, 479, 482, 606, 607, 608, 728, 730, 731, 735, 789, 845, 872, 877, 878, 899, 914, 927, 962, 966, 971, 1097, 1100, 1316, 1318, 1319, 1323, 1361, 1385, 1386], "formul": [224, 352, 874, 875, 962], "formula": [41, 352, 495, 845, 1114, 1362], "fortran": [309, 310, 352], "forward": [232, 257, 295, 322, 352, 396, 437, 440, 449, 469, 507, 513, 576, 678, 845, 880, 890, 916, 962, 1006, 1063, 1087, 1128, 1133, 1198, 1266, 1362], "forward_fil": [404, 507, 845, 1014, 1128, 1362], "found": [21, 38, 41, 48, 102, 123, 126, 134, 138, 155, 162, 170, 226, 299, 352, 525, 676, 703, 708, 726, 727, 728, 731, 845, 920, 962, 1145, 1262, 1291, 1296, 1314, 1315, 1316, 1319, 1362, 1374, 1385, 1390], "four": [313, 352, 1390], "fourth": [541, 845, 1163, 1362], "frac": [498, 499, 500, 501, 684, 845, 1119, 1120, 1121, 1122, 1273, 1362], "fraction": [38, 48, 174, 175, 176, 177, 288, 352, 478, 571, 634, 675, 728, 731, 845, 962, 1096, 1193, 1229, 1260, 1316, 1319, 1362], "fragment": 1390, "frame": [38, 39, 41, 48, 57, 64, 65, 134, 151, 155, 161, 174, 175, 213, 214, 220, 254, 255, 259, 261, 268, 272, 275, 285, 286, 287, 299, 314, 320, 321, 352, 482, 824, 863, 864, 871, 900, 903, 920, 928, 962, 968, 1044, 1100, 1362, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1389, 1393], "frame_data": [1373, 1376], "frameinittyp": [352, 962], "frametyp": [57, 1390], "framework": [276, 319, 352, 927, 962], "freedom": [300, 323, 352, 579, 585, 667, 668, 671, 672, 689, 757, 777, 821, 822, 826, 834, 845, 921, 929, 962, 1255, 1257, 1277, 1352, 1362], "freeli": [824, 920, 962, 968], "freez": [41, 352], "freeze_pan": [41, 352], "frequenc": [322, 352, 756, 845, 1351, 1362], "frequent": [1261, 1263, 1362], "fri": [352, 355], "fridai": [242, 352, 449, 461, 479, 770, 885, 962, 1063, 1075, 1097, 1100], "friendship": 13, "from": [2, 3, 4, 5, 6, 11, 17, 29, 33, 37, 38, 40, 41, 43, 47, 48, 49, 50, 51, 55, 57, 65, 75, 88, 96, 101, 105, 121, 125, 131, 132, 133, 134, 135, 136, 137, 138, 140, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 190, 195, 210, 213, 220, 221, 222, 228, 230, 233, 234, 240, 242, 254, 255, 256, 257, 258, 259, 267, 276, 280, 281, 284, 285, 287, 288, 290, 291, 299, 307, 314, 316, 317, 319, 320, 321, 322, 328, 352, 355, 356, 401, 410, 442, 443, 444, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 502, 512, 514, 527, 541, 559, 571, 583, 592, 600, 625, 626, 628, 633, 634, 637, 640, 642, 653, 655, 657, 659, 661, 663, 665, 668, 670, 672, 675, 687, 699, 700, 705, 707, 708, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 754, 766, 767, 770, 771, 783, 784, 785, 786, 787, 788, 789, 803, 805, 820, 824, 831, 832, 833, 835, 841, 844, 845, 863, 871, 872, 873, 881, 885, 889, 890, 891, 899, 907, 908, 910, 912, 913, 920, 925, 927, 928, 933, 934, 962, 966, 967, 968, 1011, 1020, 1057, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1116, 1118, 1120, 1125, 1163, 1181, 1193, 1205, 1222, 1223, 1225, 1226, 1229, 1234, 1248, 1260, 1287, 1288, 1293, 1295, 1306, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1323, 1338, 1353, 1362, 1371, 1372, 1373, 1374, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393], "from_arrai": 824, "from_arrow": 132, "from_json": 845, "from_panda": 132, "from_repr": [308, 352, 1340, 1362], "fromkei": [58, 60], "front": [242, 352, 885, 962], "fruit": [305, 352, 424, 428, 650, 696, 722, 729, 845, 1033, 1038, 1284, 1310, 1317], "fruits_revers": [650, 845], "fsspec": [150, 151, 156, 158, 166, 167, 173], "fsspecfileio": 167, "full": [12, 27, 47, 51, 57, 72, 101, 134, 137, 150, 151, 152, 154, 156, 159, 160, 162, 165, 166, 167, 169, 170, 171, 256, 321, 352, 705, 707, 714, 715, 728, 729, 730, 731, 735, 784, 785, 889, 895, 928, 962, 966, 968, 1293, 1295, 1302, 1303, 1316, 1317, 1318, 1319, 1323, 1362, 1378, 1393], "full_path": [142, 144], "full_sent": 774, "fulli": [183, 275, 288, 310, 352, 523, 845, 1143, 1362], "funcnam": [41, 352], "function": [0, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 73, 79, 96, 97, 98, 128, 130, 132, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 201, 205, 207, 209, 212, 218, 221, 228, 235, 258, 261, 267, 275, 276, 281, 299, 309, 310, 311, 314, 315, 316, 319, 321, 338, 352, 355, 356, 364, 401, 421, 422, 441, 442, 444, 449, 461, 498, 500, 501, 523, 583, 591, 592, 617, 618, 633, 637, 640, 652, 654, 655, 657, 659, 661, 663, 665, 666, 668, 670, 672, 681, 684, 704, 749, 750, 751, 760, 764, 770, 772, 776, 778, 779, 780, 792, 793, 795, 797, 798, 801, 803, 804, 806, 807, 810, 812, 815, 817, 819, 826, 830, 834, 836, 841, 845, 857, 861, 866, 867, 872, 877, 891, 895, 899, 903, 904, 908, 920, 924, 927, 928, 935, 936, 945, 962, 966, 970, 1011, 1031, 1040, 1056, 1057, 1063, 1075, 1118, 1119, 1121, 1122, 1143, 1205, 1213, 1234, 1246, 1247, 1248, 1251, 1253, 1254, 1261, 1263, 1268, 1270, 1273, 1292, 1341, 1344, 1346, 1347, 1362, 1367, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1388, 1389, 1390, 1391, 1392, 1393], "function_nam": 147, "further": 841, "futur": [43, 44, 64, 209, 220, 256, 293, 304, 352, 867, 871, 889, 915, 962, 1337, 1362], "g": [34, 38, 48, 146, 150, 154, 156, 158, 166, 171, 183, 209, 221, 253, 310, 320, 352, 361, 444, 499, 502, 592, 679, 791, 835, 845, 872, 908, 962, 966, 1120, 1362, 1393], "g1": [508, 758, 845], "g2": [508, 758, 845], "g_1": [684, 845, 1273, 1362], "gag": 27, "gamma": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "gantt": [904, 962], "gather": [151, 236, 352, 377, 516, 559, 768, 845, 883, 962, 987, 1135, 1181, 1362], "gather_everi": [352, 845, 962, 1362], "gb": [228, 352, 410, 1118, 1362], "gbp": 1393, "gc": [40, 154, 166, 167, 352], "gca": 27, "gcaacgcatata": 27, "gcp": [35, 38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 167, 168, 169, 170, 195, 352, 962], "gdp": [257, 352, 890, 962], "gdp2": [257, 352, 890, 962], "gdp_date": [257, 352, 890, 962], "ge": [845, 1362], "gener": [1, 52, 53, 55, 96, 145, 146, 152, 153, 172, 178, 179, 180, 181, 182, 183, 185, 209, 216, 218, 276, 288, 307, 310, 316, 352, 571, 675, 680, 765, 784, 787, 799, 800, 802, 803, 804, 820, 832, 833, 845, 962, 1032, 1193, 1260, 1269, 1338, 1362, 1393], "geq": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "germani": [257, 352, 890, 962], "get": [57, 64, 75, 147, 157, 163, 164, 171, 201, 210, 212, 216, 217, 226, 234, 237, 239, 242, 244, 245, 249, 251, 252, 260, 263, 270, 271, 276, 284, 285, 289, 294, 297, 303, 311, 315, 325, 335, 346, 352, 362, 375, 376, 377, 379, 387, 390, 402, 410, 422, 425, 437, 438, 439, 440, 449, 459, 461, 509, 515, 522, 525, 540, 542, 545, 557, 563, 584, 593, 594, 595, 603, 605, 611, 625, 626, 635, 636, 641, 652, 653, 685, 689, 698, 745, 746, 750, 751, 753, 757, 768, 770, 792, 797, 801, 807, 808, 809, 810, 812, 813, 814, 816, 826, 830, 834, 845, 861, 866, 867, 869, 876, 881, 882, 885, 886, 892, 894, 910, 911, 918, 923, 924, 930, 942, 953, 962, 967, 972, 985, 986, 987, 988, 989, 997, 1000, 1012, 1020, 1034, 1043, 1052, 1053, 1054, 1055, 1063, 1073, 1075, 1113, 1130, 1131, 1137, 1142, 1145, 1148, 1149, 1161, 1164, 1167, 1179, 1185, 1206, 1214, 1216, 1217, 1219, 1221, 1222, 1223, 1230, 1231, 1235, 1246, 1274, 1277, 1286, 1334, 1338, 1344, 1348, 1352, 1362], "get_chunk": 1362, "get_column": [209, 312, 352], "get_column_index": 352, "get_polars_schema": 203, "get_table_info": 203, "get_token": 34, "get_worksheet_by_nam": [41, 352], "gevent": [64, 173, 867, 962], "gh": 715, "gh45": 715, "gh45ij67kl": 715, "ghi": [361, 700, 845, 968, 1288], "gil": [592, 845, 966], "git": 62, "github": [153, 352], "give": [160, 168, 169, 257, 267, 317, 319, 352, 459, 512, 541, 646, 752, 756, 835, 845, 857, 890, 899, 906, 925, 927, 962, 1073, 1163, 1240, 1351, 1362, 1389], "given": [41, 52, 53, 54, 57, 96, 107, 112, 129, 131, 133, 134, 135, 137, 145, 146, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 176, 177, 178, 179, 181, 183, 184, 185, 186, 207, 228, 229, 231, 233, 242, 247, 252, 261, 268, 274, 275, 280, 285, 286, 287, 295, 298, 314, 321, 352, 384, 396, 401, 410, 422, 431, 450, 454, 479, 481, 482, 495, 499, 523, 529, 551, 576, 583, 586, 592, 633, 637, 643, 646, 647, 649, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 676, 678, 700, 701, 712, 713, 728, 731, 738, 741, 751, 769, 771, 775, 777, 791, 792, 801, 806, 807, 820, 821, 822, 835, 845, 878, 885, 895, 900, 903, 906, 907, 916, 919, 928, 945, 962, 967, 968, 970, 994, 1006, 1011, 1020, 1045, 1064, 1068, 1097, 1099, 1100, 1114, 1118, 1120, 1143, 1148, 1162, 1173, 1198, 1205, 1208, 1211, 1213, 1226, 1232, 1236, 1240, 1243, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1262, 1266, 1288, 1289, 1300, 1301, 1316, 1319, 1326, 1350, 1353, 1362, 1371, 1373, 1378, 1380, 1381, 1384, 1385, 1390, 1392, 1393], "glimps": [220, 244, 352], "glob": [150, 151, 155, 156, 160, 162, 165, 168, 169, 170], "global": [56, 97, 98, 155, 172, 181, 189, 299, 352, 647, 648, 824, 845, 920, 962, 1035, 1039, 1241, 1242, 1362, 1372, 1374, 1389], "gmt": [454, 458, 476, 1068, 1072, 1094], "go": [13, 150, 151, 165, 424, 696, 1033, 1284], "godfath": 1371, "goe": 13, "gonfruit": 1317, "good": [47, 49, 51, 254, 352, 962, 1384], "goodby": 1, "googl": [35, 154, 166, 167], "gpu": [10, 49, 63, 64, 309, 352, 866, 867, 877, 904, 917, 937, 959, 962, 1341, 1362], "gpu_devic": [309, 352], "gpudevic": [309, 352], "gpuengin": [10, 866, 877, 904, 917, 962], "grade": [1163, 1362], "grain": [866, 877, 904, 917, 959, 962], "granular": [51, 962, 1390], "grape": 1385, "graph": [63, 152, 259, 352, 607, 866, 887, 933, 962], "graphviz": [259, 352, 607, 917, 962], "great": [352, 356], "great_tabl": [352, 356], "greater": [214, 257, 352, 517, 519, 529, 684, 712, 713, 721, 738, 835, 845, 890, 962, 1148, 1273, 1300, 1301, 1309, 1326, 1362], "greatest": [1379, 1383], "greatli": [156, 168], "green": [56, 97, 98, 338, 756, 845, 945, 1351, 1362], "greenlet": [64, 867, 962], "greet": 1, "grid": [527, 845], "grid_point": [527, 845], "gridlin": [41, 352], "gross": 1371, "group": [9, 28, 47, 51, 54, 147, 151, 170, 213, 241, 242, 255, 257, 272, 274, 276, 284, 287, 320, 322, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 355, 362, 422, 441, 504, 510, 515, 518, 555, 591, 592, 603, 605, 633, 643, 652, 653, 686, 687, 691, 699, 700, 701, 703, 714, 715, 751, 756, 807, 845, 863, 884, 885, 890, 910, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 962, 968, 1056, 1177, 1246, 1279, 1287, 1288, 1289, 1291, 1302, 1303, 1351, 1362, 1371, 1379, 1389, 1390], "group_bi": [242, 272, 276, 284, 322, 351, 352, 362, 412, 417, 420, 422, 508, 510, 515, 518, 591, 592, 633, 686, 687, 751, 758, 784, 787, 807, 845, 866, 867, 877, 885, 904, 906, 910, 917, 960, 962, 968], "group_by_dynam": [284, 352, 910, 962], "group_by_partit": [904, 962], "group_col": [508, 758, 845], "group_df": [338, 945], "group_dtyp": [633, 845], "group_index": [699, 1287], "group_to_row": [633, 845], "groupbi": [241, 352, 592, 807, 845], "grouper": [412, 417, 420, 845], "grow": [324, 352], "grown": [246, 352], "gt": [352, 356, 845, 1362], "gte": [508, 758, 845], "guarante": [10, 47, 51, 150, 151, 212, 220, 243, 268, 315, 317, 352, 421, 422, 521, 749, 750, 751, 845, 861, 871, 900, 924, 925, 962, 1031, 1141, 1345, 1347, 1362], "guid": [145, 147, 845, 966, 1393], "gzip": [47, 51, 352, 962], "h": [320, 352, 361, 479, 482, 679, 714, 715, 728, 731, 735, 845, 1302, 1303, 1316, 1319, 1323, 1385, 1386], "ha": [40, 41, 48, 49, 50, 51, 55, 57, 64, 136, 152, 165, 188, 209, 322, 328, 333, 352, 421, 422, 441, 514, 591, 604, 610, 705, 729, 739, 750, 751, 775, 792, 801, 841, 845, 867, 917, 934, 940, 945, 962, 1031, 1044, 1056, 1058, 1293, 1317, 1347, 1362], "half": [314, 352, 477, 498, 499, 500, 501, 845, 1095, 1119, 1120, 1121, 1122, 1362], "half_lif": [498, 499, 500, 501, 845, 1119, 1120, 1121, 1122, 1362], "half_to_even": [673, 845, 1258, 1362], "ham": [36, 38, 40, 43, 44, 47, 213, 216, 217, 218, 222, 223, 224, 225, 226, 227, 233, 238, 243, 244, 246, 256, 260, 262, 264, 266, 269, 273, 278, 280, 281, 282, 285, 288, 289, 290, 297, 300, 301, 303, 307, 308, 310, 311, 312, 317, 323, 324, 352, 425, 607, 608, 841, 863, 868, 869, 873, 874, 875, 876, 881, 889, 902, 907, 908, 911, 912, 925, 933, 962, 1034, 1378, 1379], "ham_a": [307, 352], "ham_b": [307, 352], "ham_right": [256, 352, 889, 962], "hamburg": 841, "hand": [41, 150, 151, 165, 352, 572, 573, 574, 575, 1194, 1195, 1196, 1197], "handi": [449, 461, 770, 1063, 1075], "handl": [40, 42, 104, 138, 147, 150, 151, 165, 171, 233, 237, 280, 352, 445, 553, 698, 738, 845, 866, 881, 907, 962, 1059, 1175, 1286, 1326, 1362], "handler": [148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 221, 352, 444, 845, 872, 962], "happen": [152, 454, 640, 845, 1068, 1234, 1362], "hard": [96, 145, 165, 895, 962], "harder": [242, 352, 885, 962], "hardwar": 1393, "has_head": [150, 151, 155, 161, 165], "has_nul": [845, 1140, 1362], "has_prefix": [428, 722], "has_suffix": [424, 696], "has_two": 1380, "has_valid": 1362, "hash": [243, 352, 845, 1362], "hash_row": 352, "hat": [714, 715, 1302, 1303], "have": [5, 15, 31, 34, 41, 53, 55, 56, 57, 65, 72, 98, 147, 148, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 170, 210, 221, 230, 254, 256, 257, 276, 279, 284, 286, 287, 306, 314, 329, 352, 441, 444, 498, 500, 501, 592, 604, 643, 647, 648, 653, 701, 716, 772, 845, 872, 889, 890, 899, 910, 934, 935, 962, 968, 1056, 1058, 1119, 1121, 1122, 1125, 1236, 1241, 1242, 1302, 1304, 1362, 1389, 1391, 1393], "haystack": [700, 1288], "he": 724, "head": [75, 165, 240, 260, 303, 352, 367, 545, 845, 894, 962, 1167, 1334, 1362], "header": [38, 41, 47, 48, 51, 138, 150, 151, 155, 161, 165, 226, 316, 352, 962], "header_format": [41, 352], "header_nam": [316, 352], "headerless": 165, "heap": [147, 228, 352, 845, 1118, 1362], "heatmap": [41, 352], "heavili": 170, "height": [41, 146, 181, 225, 352, 355, 1362, 1367], "hell": [723, 1311], "hello": [1, 21, 723, 724, 725, 968, 1184, 1311, 1312, 1313, 1373, 1376, 1385], "hello_": 794, "hello_data": 1376, "hello_world": 1376, "help": [41, 174, 175, 176, 177, 352, 962], "helper": [352, 356, 841], "henc": [714, 1303], "here": [38, 40, 41, 43, 47, 48, 49, 50, 51, 131, 133, 134, 135, 137, 152, 153, 154, 159, 160, 162, 165, 166, 167, 168, 169, 170, 179, 181, 185, 195, 210, 276, 352, 449, 461, 591, 592, 607, 701, 708, 770, 835, 845, 917, 962, 968, 1063, 1075, 1296], "hex": [406, 407, 694, 695, 733, 1016, 1017, 1282, 1283, 1321], "hexadecim": [1016, 1017], "hf": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 352, 962], "hf_token": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 352, 962], "hi": [1, 1385], "hidden": [41, 352], "hidden_column": [41, 352], "hide": [22, 23, 24, 25], "hide_gridlin": [41, 352], "hide_password": 152, "high": [287, 352, 356, 640, 845, 857, 1234, 1362], "higher": [47, 51, 55, 220, 278, 344, 352, 641, 664, 665, 818, 845, 871, 905, 951, 962, 1058, 1235, 1253, 1362], "highest": [352, 356, 643, 755, 775, 845, 962, 1236, 1362], "highli": [147, 845], "hint": 145, "hippopotamu": [712, 713, 1300, 1301], "hist": [845, 1362, 1367], "histogram": [1362, 1367], "hit": [862, 962], "hive": [52, 162, 168, 170], "hive_custom": 198, "hive_dir": [52, 54], "hive_partit": [162, 168, 170], "hive_schema": [162, 168, 170], "hive_serd": 198, "hmm": [968, 1385], "hold": [296, 310, 352, 1343, 1362], "holidai": [449, 461, 770, 1063, 1075], "home": [736, 1324], "horizont": [21, 65, 106, 235, 246, 263, 265, 270, 302, 320, 352, 761, 763, 772, 773, 774, 779, 780, 782, 790, 793, 809, 811, 814, 819, 829, 933, 962], "host": [62, 150, 156, 158, 170], "hour": [160, 165, 168, 169, 242, 257, 284, 322, 352, 464, 466, 467, 471, 472, 475, 477, 478, 482, 484, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 786, 787, 788, 789, 803, 831, 832, 833, 845, 885, 890, 910, 962, 968, 1090, 1093, 1095, 1102, 1108, 1120, 1362, 1386], "hours_diff": 484, "hous": [314, 352], "how": [12, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 57, 65, 106, 147, 153, 160, 162, 165, 168, 169, 170, 195, 225, 233, 256, 257, 276, 320, 321, 352, 385, 445, 475, 476, 527, 552, 553, 633, 646, 666, 728, 731, 770, 786, 845, 881, 889, 890, 928, 933, 962, 995, 1059, 1093, 1094, 1174, 1175, 1240, 1254, 1316, 1319, 1362], "howev": [1, 10, 52, 134, 152, 162, 170, 205, 228, 261, 310, 352, 633, 845, 866, 877, 904, 917, 962, 1118, 1362], "hstack": [106, 352], "html": [33, 41, 43, 44, 132, 152, 156, 158, 207, 208, 209, 218, 352, 970, 971], "http": [21, 33, 41, 43, 44, 75, 132, 152, 153, 156, 158, 190, 207, 208, 209, 218, 352, 607, 699, 701, 711, 917, 962, 970, 971, 1287, 1289, 1299], "httpmethod": 75, "hug": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 352, 962], "huge": [228, 352, 1118, 1362], "hut": [714, 715, 1302, 1303], "hvplot": [352, 355, 1362, 1367], "hyperbol": [370, 372, 374, 433, 683, 748, 845, 980, 982, 984, 1048, 1272, 1336, 1362], "hyperloglog": [211, 352, 368, 764, 845, 860, 962, 978, 1362], "hyphen": [690, 1278], "hypothesi": [179, 181, 184, 185, 1393], "i": [1, 10, 13, 15, 18, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 71, 72, 73, 74, 79, 89, 96, 98, 102, 104, 105, 106, 107, 108, 109, 111, 112, 117, 123, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 199, 201, 205, 210, 211, 212, 213, 215, 216, 220, 221, 224, 225, 227, 228, 230, 233, 237, 241, 242, 243, 244, 247, 248, 252, 254, 255, 256, 257, 258, 259, 260, 261, 267, 268, 272, 274, 275, 276, 280, 281, 282, 284, 285, 286, 287, 288, 291, 292, 293, 295, 297, 298, 299, 300, 303, 304, 309, 310, 311, 314, 315, 316, 317, 319, 321, 322, 323, 327, 329, 330, 338, 352, 355, 356, 361, 364, 366, 367, 368, 378, 381, 388, 389, 396, 401, 404, 409, 421, 422, 423, 426, 427, 441, 442, 444, 447, 448, 449, 450, 453, 461, 462, 469, 470, 472, 477, 479, 482, 490, 498, 499, 500, 501, 504, 508, 512, 513, 521, 523, 526, 529, 541, 547, 554, 555, 558, 560, 562, 571, 576, 577, 579, 583, 585, 588, 591, 592, 596, 598, 599, 600, 602, 603, 604, 606, 615, 633, 638, 640, 643, 645, 646, 647, 648, 649, 652, 653, 654, 655, 657, 659, 661, 663, 665, 666, 667, 668, 670, 671, 672, 675, 676, 677, 678, 680, 681, 684, 685, 686, 687, 689, 690, 691, 692, 693, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 718, 721, 723, 724, 725, 728, 729, 730, 731, 733, 735, 736, 738, 743, 750, 751, 756, 757, 760, 761, 762, 763, 764, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 784, 785, 787, 788, 793, 797, 798, 799, 800, 802, 803, 804, 805, 807, 810, 812, 815, 817, 820, 821, 822, 823, 824, 826, 830, 832, 833, 834, 835, 836, 841, 845, 860, 861, 862, 865, 866, 867, 869, 871, 872, 874, 875, 876, 877, 881, 884, 885, 888, 889, 890, 891, 893, 895, 899, 900, 904, 907, 908, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 925, 927, 928, 929, 930, 932, 935, 936, 937, 945, 955, 962, 966, 968, 975, 976, 977, 978, 991, 998, 999, 1006, 1011, 1014, 1019, 1031, 1035, 1036, 1037, 1040, 1045, 1046, 1056, 1057, 1058, 1061, 1062, 1063, 1064, 1067, 1075, 1076, 1090, 1095, 1097, 1100, 1108, 1117, 1118, 1119, 1120, 1121, 1122, 1124, 1125, 1129, 1130, 1133, 1141, 1142, 1143, 1145, 1148, 1150, 1153, 1160, 1162, 1163, 1164, 1167, 1169, 1176, 1177, 1180, 1182, 1184, 1193, 1198, 1199, 1205, 1213, 1232, 1234, 1236, 1238, 1240, 1241, 1242, 1243, 1246, 1247, 1248, 1251, 1253, 1254, 1255, 1257, 1260, 1261, 1262, 1263, 1264, 1266, 1269, 1270, 1273, 1274, 1277, 1278, 1279, 1280, 1281, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1300, 1301, 1302, 1303, 1304, 1306, 1309, 1311, 1312, 1313, 1316, 1317, 1318, 1319, 1321, 1323, 1324, 1326, 1334, 1337, 1341, 1343, 1344, 1346, 1347, 1351, 1352, 1362, 1367, 1371, 1372, 1377, 1381, 1382, 1385, 1388, 1390, 1391, 1393], "i0e0": 1393, "i16": [1, 60, 457, 473, 492, 679, 845, 968, 1091, 1340, 1362, 1393], "i32": [1, 60, 131, 134, 138, 178, 180, 181, 290, 299, 352, 387, 388, 390, 409, 423, 452, 460, 463, 464, 465, 466, 467, 471, 494, 679, 770, 835, 845, 912, 962, 967, 997, 998, 1000, 1019, 1066, 1077, 1081, 1082, 1083, 1089, 1112, 1211, 1362, 1382, 1386, 1393], "i64": [1, 10, 11, 14, 17, 18, 22, 28, 58, 59, 60, 61, 65, 66, 84, 105, 131, 132, 133, 134, 135, 136, 137, 138, 146, 150, 152, 159, 160, 165, 210, 212, 213, 214, 215, 217, 221, 222, 225, 226, 229, 230, 232, 233, 236, 237, 239, 240, 241, 242, 244, 246, 247, 249, 251, 253, 256, 257, 258, 260, 261, 262, 268, 269, 274, 275, 276, 277, 280, 281, 282, 283, 284, 288, 290, 292, 295, 297, 298, 299, 301, 303, 305, 312, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 342, 345, 346, 352, 361, 363, 367, 377, 382, 383, 385, 386, 391, 393, 394, 395, 396, 397, 399, 402, 412, 417, 420, 421, 422, 431, 437, 438, 439, 440, 441, 442, 445, 446, 459, 475, 481, 483, 484, 485, 486, 487, 488, 489, 499, 502, 504, 505, 507, 508, 509, 510, 512, 515, 516, 518, 522, 524, 526, 527, 528, 529, 532, 533, 535, 536, 537, 538, 539, 542, 545, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 589, 591, 592, 612, 613, 614, 616, 617, 619, 621, 623, 624, 629, 633, 634, 637, 638, 639, 640, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 675, 677, 678, 679, 680, 685, 686, 687, 705, 714, 715, 729, 733, 738, 739, 741, 742, 743, 744, 745, 746, 750, 751, 752, 753, 755, 758, 765, 768, 771, 772, 773, 774, 779, 780, 781, 782, 783, 786, 789, 790, 791, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 816, 819, 823, 824, 825, 828, 829, 830, 831, 835, 841, 845, 861, 863, 864, 866, 867, 872, 873, 875, 878, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 892, 894, 895, 896, 900, 901, 903, 904, 906, 907, 908, 909, 910, 912, 914, 916, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 931, 934, 935, 938, 939, 941, 942, 943, 945, 946, 949, 952, 953, 962, 968, 972, 973, 974, 977, 996, 1001, 1003, 1005, 1006, 1007, 1009, 1012, 1031, 1045, 1046, 1052, 1053, 1054, 1055, 1056, 1057, 1073, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1124, 1125, 1126, 1128, 1129, 1134, 1135, 1137, 1142, 1144, 1153, 1167, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1187, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1205, 1206, 1213, 1218, 1226, 1232, 1234, 1237, 1238, 1239, 1241, 1242, 1243, 1245, 1249, 1252, 1256, 1260, 1261, 1263, 1266, 1267, 1269, 1274, 1275, 1321, 1327, 1332, 1334, 1339, 1347, 1348, 1353, 1362, 1371, 1372, 1374, 1378, 1379, 1380, 1381, 1382, 1384, 1387, 1388, 1390, 1391, 1393], "i8": [400, 401, 457, 460, 464, 466, 467, 468, 471, 473, 474, 478, 491, 492, 582, 679, 817, 820, 836, 845, 1010, 1011, 1059, 1071, 1074, 1085, 1086, 1092, 1096, 1109, 1110, 1204, 1244, 1267, 1350, 1362, 1386], "i_bitand_j": 1381, "i_bitand_op_j": 1381, "i_bitcount": 1381, "i_bitor_j": 1381, "i_bitor_op_j": 1381, "i_bitxor_j": 1381, "i_bitxor_op_j": 1381, "iceberg": [42, 167, 352, 857], "icon": [41, 352], "id": [27, 34, 41, 65, 146, 150, 155, 167, 258, 309, 316, 329, 338, 352, 652, 714, 715, 754, 845, 891, 935, 945, 962, 968, 1246, 1349, 1362, 1390, 1391, 1393], "id_char": 1393, "id_var": [267, 319, 352, 899, 927, 962], "ideal": [140, 145], "ident": [34, 138, 214, 215, 352, 479, 651, 652, 845, 864, 865, 962, 1044, 1046, 1097, 1245, 1246, 1362], "identif": [155, 161], "identifi": [138, 152, 267, 274, 317, 319, 330, 352, 899, 925, 927, 962], "idiograph": 968, "idiom": 835, "idiomat": [841, 869, 876, 911, 930, 945, 962], "idx": [165, 242, 255, 329, 352, 388, 401, 583, 885, 935, 962, 1011, 1205, 1291], "idx_lit": 1291, "idx_rx": 1291, "ieee": [752, 845], "if_set": [5, 31], "if_table_exist": [39, 352], "ifnul": 1383, "ignor": [40, 55, 152, 180, 181, 185, 265, 302, 321, 352, 364, 366, 389, 409, 445, 476, 498, 500, 501, 553, 562, 625, 626, 690, 706, 760, 762, 774, 811, 829, 845, 928, 962, 968, 975, 976, 999, 1019, 1059, 1094, 1119, 1121, 1122, 1175, 1184, 1222, 1223, 1278, 1294, 1362], "ignore_error": [150, 151, 160, 165, 169], "ignore_nul": [265, 302, 352, 364, 366, 389, 498, 500, 501, 562, 690, 706, 760, 762, 774, 811, 829, 845, 975, 976, 999, 1119, 1121, 1122, 1184, 1278, 1294, 1362], "ignore_spac": 968, "ij": 715, "ij67": 715, "ijkl": 1385, "ilmsuxu": [691, 699, 700, 703, 714, 715, 1279, 1287, 1288, 1291, 1302, 1303], "imbal": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "imdb_scor": 1371, "immedi": [205, 643, 765, 769, 771, 775, 777, 784, 785, 787, 788, 799, 800, 803, 804, 817, 820, 823, 827, 832, 833, 836, 845, 1236, 1362, 1372], "immut": [310, 352, 1343, 1362], "impact": [242, 352, 885, 962, 1371, 1390], "impl": 167, "implement": [47, 96, 145, 152, 209, 243, 261, 338, 352, 355, 356, 521, 592, 616, 617, 619, 621, 623, 624, 739, 749, 807, 845, 945, 1141, 1213, 1261, 1263, 1345, 1362, 1367], "implic": [444, 845, 872, 962], "implicit": [321, 352, 835, 928, 962], "implicitli": [233, 280, 352, 508, 835, 845, 881, 907, 962, 1390], "implod": [845, 1362, 1380], "import": [11, 17, 29, 36, 38, 40, 41, 43, 44, 47, 57, 72, 75, 96, 131, 132, 135, 136, 146, 150, 152, 153, 159, 160, 165, 171, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 213, 220, 221, 222, 225, 240, 242, 255, 257, 274, 276, 292, 299, 307, 309, 314, 319, 320, 322, 352, 355, 356, 410, 443, 444, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 599, 600, 606, 633, 655, 657, 659, 661, 663, 665, 668, 670, 672, 770, 783, 784, 785, 786, 787, 788, 789, 803, 824, 832, 833, 841, 845, 857, 863, 867, 871, 872, 873, 875, 885, 890, 895, 914, 927, 962, 966, 1020, 1047, 1049, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1120, 1151, 1154, 1156, 1157, 1248, 1271, 1335, 1362, 1367, 1372, 1387, 1390, 1393], "improv": [39, 51, 156, 167, 168, 256, 352, 591, 845, 889, 962], "in_part_idx": [52, 54, 144], "in_plac": [246, 296, 324, 352, 1237, 1268, 1275, 1362], "in_progress": [906, 962], "includ": [7, 21, 31, 38, 40, 41, 48, 52, 54, 62, 136, 152, 154, 155, 160, 161, 162, 165, 166, 167, 168, 169, 170, 181, 182, 205, 216, 220, 228, 258, 274, 276, 280, 287, 298, 314, 316, 320, 321, 352, 442, 478, 508, 512, 523, 529, 599, 640, 654, 656, 658, 660, 662, 664, 666, 667, 669, 671, 714, 715, 719, 720, 723, 724, 770, 779, 821, 822, 845, 871, 881, 891, 907, 919, 928, 962, 968, 1057, 1058, 1096, 1118, 1129, 1143, 1148, 1234, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1302, 1303, 1307, 1308, 1311, 1362, 1390], "include_bom": [38, 48, 352, 962], "include_boundari": [242, 352, 885, 962], "include_break": [442, 640, 845, 1057, 1234, 1362], "include_breakpoint": [523, 845, 1143, 1362], "include_categor": 968, "include_categori": [523, 845, 1143, 1362], "include_col": 181, "include_file_path": [155, 160, 161, 162, 165, 168, 169, 170], "include_head": [38, 41, 48, 151, 316, 352, 962], "include_index": 136, "include_init": 779, "include_kei": [52, 54, 274, 287, 352], "include_nul": [321, 352, 928, 962], "inclus": [210, 242, 284, 352, 482, 529, 653, 657, 659, 661, 663, 665, 668, 670, 672, 719, 720, 765, 784, 785, 787, 788, 799, 800, 803, 804, 832, 833, 845, 885, 910, 962, 1100, 1148, 1307, 1308, 1362], "incom": 152, "incompat": 124, "incomplet": [648, 845, 1242, 1362], "incorpor": 1390, "incorrect": [293, 352, 493, 591, 592, 677, 845, 915, 945, 962, 1111, 1264, 1362], "incorrectli": [150, 583], "increas": [41, 57, 150, 155, 161, 162, 170, 352, 441, 652, 845, 1056, 1246, 1362], "independ": [63, 178, 181, 185, 314, 352, 680, 845, 866, 877, 904, 917, 962], "index": [41, 112, 132, 136, 139, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 173, 209, 236, 238, 242, 247, 252, 254, 276, 282, 284, 285, 286, 295, 297, 309, 310, 312, 319, 321, 322, 328, 329, 352, 362, 375, 376, 377, 379, 382, 383, 388, 396, 401, 499, 515, 516, 518, 525, 548, 549, 558, 559, 560, 576, 577, 583, 653, 657, 659, 661, 663, 665, 668, 670, 672, 676, 678, 685, 691, 699, 703, 705, 718, 729, 739, 768, 799, 802, 845, 883, 885, 910, 916, 918, 927, 928, 934, 935, 962, 968, 985, 986, 987, 988, 989, 992, 993, 998, 1006, 1011, 1120, 1134, 1135, 1145, 1162, 1170, 1171, 1180, 1181, 1182, 1198, 1199, 1205, 1226, 1261, 1262, 1266, 1274, 1287, 1291, 1293, 1306, 1317, 1362, 1367, 1380, 1385], "index_column": [242, 284, 352, 653, 845, 885, 910, 962], "index_of": [845, 1362], "indexord": [309, 310, 352], "indic": [38, 41, 43, 47, 48, 49, 50, 51, 71, 72, 74, 89, 105, 115, 147, 148, 150, 151, 152, 155, 156, 158, 160, 161, 162, 165, 168, 169, 170, 178, 179, 185, 195, 242, 284, 287, 295, 307, 352, 378, 396, 515, 523, 530, 531, 532, 534, 535, 536, 537, 538, 539, 558, 576, 596, 597, 598, 599, 600, 601, 602, 633, 653, 657, 659, 661, 663, 665, 668, 670, 672, 676, 678, 768, 769, 816, 845, 885, 910, 916, 962, 968, 1006, 1040, 1134, 1143, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1180, 1198, 1261, 1262, 1266, 1338, 1362, 1385, 1393], "indistinguish": [38, 48, 352, 962], "individu": [41, 51, 141, 205, 284, 309, 310, 314, 352, 592, 700, 742, 845, 866, 910, 962, 968, 1043, 1288, 1362], "inequ": [627, 845], "inexact": [174, 175, 176, 177], "inf": [178, 181, 185, 374, 442, 531, 534, 640, 752, 845, 984, 1049, 1057, 1151, 1154, 1211, 1229, 1234, 1350, 1362, 1387], "infer": [38, 43, 47, 48, 49, 50, 51, 73, 88, 105, 131, 133, 134, 135, 136, 137, 150, 151, 152, 155, 159, 160, 161, 162, 165, 168, 169, 170, 195, 261, 352, 591, 592, 649, 707, 728, 730, 731, 732, 735, 789, 793, 805, 820, 845, 962, 1213, 1243, 1295, 1316, 1318, 1319, 1320, 1323, 1362], "infer_schema": [150, 165], "infer_schema_length": [134, 137, 146, 150, 151, 152, 155, 159, 160, 161, 165, 169, 352, 707, 962, 1295], "inference_length": [732, 1320], "inference_s": [261, 352], "infin": [736, 752, 845, 1324], "infinit": [534, 752, 845, 1154, 1362], "influenc": [155, 895, 962], "influxdb": 152, "info": [154, 166, 167, 173], "inform": [20, 24, 38, 39, 43, 47, 48, 49, 50, 51, 52, 53, 54, 62, 145, 147, 154, 160, 162, 165, 166, 167, 168, 169, 170, 174, 176, 195, 196, 197, 199, 200, 207, 218, 220, 352, 356, 541, 592, 684, 691, 699, 700, 703, 714, 715, 845, 866, 871, 877, 904, 917, 962, 966, 970, 1039, 1163, 1273, 1279, 1287, 1288, 1291, 1302, 1303, 1362], "inherit": [285, 352, 444, 845, 872, 962], "init": [205, 1371], "initcap": 1383, "initi": [33, 34, 35, 41, 88, 145, 190, 205, 352, 779, 793, 835, 1390], "initialis": [75, 152, 205, 962], "inject": [41, 57, 352], "inlin": [25, 287, 352, 691, 699, 700, 703, 714, 715, 1279, 1287, 1288, 1291, 1302, 1303, 1380], "inner": [66, 84, 180, 256, 258, 321, 352, 389, 400, 446, 562, 582, 592, 646, 749, 824, 845, 889, 891, 928, 962, 999, 1010, 1060, 1184, 1204, 1213, 1240, 1345, 1362, 1378, 1390], "inner_dtyp": [180, 183], "innermost": [180, 183], "innter": 998, "inprocessqueri": [866, 962], "input": [0, 54, 57, 63, 105, 134, 136, 147, 150, 151, 212, 222, 241, 258, 261, 265, 274, 276, 281, 290, 291, 295, 298, 302, 315, 321, 326, 327, 331, 352, 361, 422, 424, 428, 431, 499, 502, 514, 529, 587, 591, 592, 604, 633, 647, 648, 681, 687, 705, 716, 718, 724, 725, 726, 727, 729, 731, 743, 751, 759, 761, 763, 765, 768, 771, 772, 773, 774, 782, 789, 791, 799, 800, 805, 806, 807, 809, 811, 814, 823, 827, 829, 835, 841, 845, 857, 861, 873, 884, 891, 908, 912, 913, 916, 919, 924, 928, 931, 932, 938, 962, 1045, 1120, 1148, 1209, 1210, 1213, 1232, 1241, 1242, 1266, 1270, 1293, 1306, 1317, 1319, 1362, 1384, 1385, 1387], "input_wildcard_expans": [147, 845], "insensit": [692, 700, 702, 704, 714, 715, 716, 968, 1279, 1280, 1288, 1290, 1291, 1292, 1302, 1303, 1304], "insensitive_match": [691, 703], "insert": [39, 55, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 247, 316, 318, 352, 676, 690, 706, 738, 845, 926, 962, 1262, 1278, 1294, 1326, 1362], "insert_aft": [41, 352], "insert_befor": [41, 352], "insert_chart": [41, 352], "insert_column": 352, "insid": [64, 591, 835, 845, 867, 962], "inspect": [845, 962], "instal": [33, 34, 35, 109, 136, 150, 151, 153, 156, 158, 218, 311, 352, 449, 461, 607, 770, 917, 962, 1063, 1075, 1344, 1362], "instanc": [38, 43, 47, 48, 49, 50, 51, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 181, 185, 195, 230, 235, 352, 604, 779, 793, 841, 857, 863, 895, 906, 934, 935, 962, 1125, 1362], "instanti": [34, 39, 41, 152, 183, 290, 308, 309, 326, 352, 912, 931, 962, 967, 1340, 1341, 1362], "instantli": [64, 867, 962], "instead": [38, 40, 45, 46, 57, 64, 66, 132, 133, 134, 137, 150, 151, 152, 155, 161, 162, 165, 170, 171, 178, 179, 180, 181, 185, 211, 212, 240, 253, 254, 257, 261, 267, 272, 274, 285, 286, 287, 290, 291, 292, 295, 309, 310, 311, 315, 327, 328, 352, 355, 356, 377, 396, 422, 423, 426, 427, 442, 456, 482, 499, 502, 512, 576, 606, 640, 647, 678, 690, 698, 709, 710, 723, 724, 725, 726, 727, 738, 751, 758, 765, 767, 769, 771, 775, 776, 777, 784, 785, 787, 788, 789, 799, 800, 803, 804, 817, 820, 823, 824, 827, 832, 833, 836, 845, 860, 861, 867, 877, 890, 899, 912, 913, 914, 916, 924, 932, 933, 934, 937, 962, 968, 987, 1006, 1016, 1032, 1036, 1037, 1057, 1070, 1079, 1080, 1100, 1120, 1140, 1198, 1234, 1241, 1261, 1263, 1266, 1275, 1278, 1286, 1297, 1298, 1311, 1312, 1313, 1326, 1343, 1344, 1362, 1367, 1371, 1372, 1376, 1390, 1391], "int": [11, 13, 14, 15, 18, 26, 27, 38, 39, 41, 43, 47, 48, 49, 50, 51, 53, 59, 66, 73, 134, 137, 140, 141, 142, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 195, 197, 212, 214, 220, 228, 231, 232, 236, 238, 240, 243, 244, 245, 247, 252, 254, 255, 257, 260, 261, 271, 272, 282, 284, 285, 288, 294, 295, 297, 300, 303, 308, 312, 315, 320, 323, 325, 328, 329, 335, 346, 352, 361, 384, 388, 396, 398, 401, 403, 404, 421, 422, 441, 445, 449, 475, 498, 500, 501, 505, 506, 507, 513, 515, 516, 518, 521, 522, 523, 545, 551, 553, 558, 559, 560, 561, 571, 576, 577, 579, 581, 582, 583, 585, 632, 634, 637, 638, 640, 643, 646, 649, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 680, 685, 689, 699, 705, 707, 712, 713, 714, 718, 720, 721, 729, 732, 733, 738, 746, 750, 751, 757, 759, 765, 775, 777, 783, 786, 789, 795, 797, 799, 800, 803, 804, 816, 817, 820, 821, 822, 826, 827, 830, 831, 834, 836, 845, 861, 864, 871, 879, 880, 883, 886, 890, 894, 904, 916, 918, 921, 923, 924, 929, 930, 934, 935, 937, 942, 953, 962, 967, 968, 985, 986, 994, 998, 1006, 1008, 1011, 1013, 1014, 1031, 1032, 1043, 1044, 1050, 1056, 1059, 1060, 1063, 1093, 1118, 1119, 1121, 1122, 1126, 1127, 1128, 1133, 1134, 1135, 1141, 1142, 1143, 1145, 1162, 1166, 1167, 1173, 1175, 1180, 1181, 1182, 1183, 1193, 1198, 1199, 1201, 1203, 1204, 1205, 1207, 1219, 1220, 1222, 1223, 1226, 1228, 1229, 1232, 1233, 1234, 1236, 1240, 1243, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1269, 1274, 1277, 1287, 1293, 1295, 1300, 1301, 1302, 1306, 1308, 1309, 1317, 1320, 1321, 1326, 1333, 1334, 1340, 1347, 1352, 1362, 1374, 1377, 1390, 1393], "int16": [1, 60, 314, 352, 439, 440, 473, 745, 845, 968, 1054, 1055, 1091, 1333, 1340, 1362], "int32": [1, 41, 60, 65, 131, 134, 178, 180, 181, 242, 255, 284, 309, 352, 387, 388, 390, 409, 423, 452, 463, 464, 465, 466, 471, 494, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 749, 820, 845, 885, 910, 962, 967, 968, 994, 997, 998, 1000, 1019, 1066, 1077, 1081, 1082, 1083, 1089, 1112, 1120, 1211, 1345, 1346, 1362], "int64": [1, 40, 41, 59, 60, 65, 66, 88, 107, 150, 159, 216, 226, 235, 242, 275, 284, 289, 290, 304, 311, 352, 382, 383, 385, 386, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 439, 440, 483, 484, 485, 486, 487, 488, 489, 493, 499, 502, 591, 592, 618, 620, 622, 637, 645, 653, 657, 659, 661, 663, 665, 668, 670, 672, 707, 733, 745, 749, 765, 772, 791, 799, 800, 805, 820, 827, 841, 845, 868, 876, 885, 903, 910, 911, 912, 962, 968, 992, 993, 995, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1054, 1055, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1111, 1113, 1120, 1213, 1238, 1321, 1333, 1343, 1344, 1345, 1346, 1362], "int64arrai": [1337, 1362], "int8": [1, 60, 88, 235, 352, 400, 401, 439, 440, 457, 460, 467, 468, 474, 478, 491, 492, 582, 745, 817, 820, 836, 845, 967, 1010, 1011, 1054, 1055, 1059, 1071, 1074, 1085, 1086, 1092, 1096, 1109, 1110, 1204, 1244, 1333, 1343, 1350, 1362], "int_rang": [242, 320, 329, 338, 352, 765, 802, 823, 885, 895, 935, 945, 962], "integ": [38, 41, 48, 55, 71, 72, 74, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 172, 179, 181, 184, 186, 225, 242, 284, 307, 310, 352, 365, 430, 478, 511, 512, 632, 638, 640, 645, 652, 653, 654, 666, 705, 729, 733, 759, 765, 795, 799, 800, 820, 845, 875, 885, 910, 962, 968, 1042, 1096, 1132, 1232, 1234, 1238, 1246, 1247, 1254, 1261, 1293, 1317, 1321, 1343, 1362, 1384, 1390, 1393], "integer_cast": 55, "integer_list": 84, "integr": [41, 314, 352, 657, 659, 661, 663, 665, 668, 670, 672, 845, 1393], "intend": [1, 174, 175, 176, 177, 738, 1326], "intens": [261, 338, 352, 633, 845, 1213, 1362], "interact": [181, 185, 220, 352, 355, 871, 962, 1362, 1367], "interchang": [132, 209], "interest": [151, 479, 482, 1097, 1100], "interfac": [0, 120, 121, 131, 132, 203, 204, 208, 857, 971, 1390], "interfer": 966, "interleav": 1385, "intermedi": [248, 352, 527, 845, 888, 962, 1146, 1147, 1362, 1393], "intern": [43, 44, 49, 152, 172, 254, 304, 352, 512, 845, 962, 1337, 1362, 1372], "interoper": [207, 970], "interpol": [220, 278, 344, 352, 507, 528, 595, 641, 664, 665, 818, 845, 871, 905, 951, 962, 1058, 1147, 1235, 1253, 1362, 1379], "interpolate_bi": [845, 1362], "interpolationmethod": [527, 845, 1146, 1362], "interpret": [135, 137, 150, 151, 165, 352, 409, 962, 1019], "intersect": [41, 352, 573, 968, 1195, 1389], "interv": [242, 284, 322, 352, 442, 477, 523, 529, 640, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 803, 804, 832, 833, 845, 885, 910, 962, 1057, 1071, 1073, 1074, 1081, 1083, 1085, 1086, 1089, 1091, 1092, 1095, 1099, 1109, 1143, 1148, 1234, 1362, 1379], "intoexpr": [147, 212, 241, 242, 284, 290, 291, 295, 298, 315, 326, 327, 331, 352, 367, 385, 405, 408, 411, 422, 445, 449, 475, 499, 505, 515, 523, 525, 528, 529, 552, 572, 573, 574, 575, 633, 647, 648, 657, 659, 661, 663, 665, 668, 670, 672, 676, 678, 687, 692, 702, 704, 716, 719, 720, 721, 723, 724, 725, 726, 727, 743, 751, 761, 763, 768, 771, 772, 773, 774, 775, 777, 779, 782, 786, 793, 803, 809, 811, 814, 820, 823, 827, 829, 845, 861, 884, 885, 910, 912, 913, 916, 919, 924, 931, 932, 938, 962, 995, 1015, 1018, 1021, 1063, 1120, 1126, 1145, 1147, 1148, 1174, 1241, 1242, 1262, 1266, 1292, 1307, 1308, 1309, 1311, 1312, 1313, 1314, 1315, 1362], "intoexprcolumn": [233, 247, 280, 352, 384, 388, 389, 396, 421, 422, 431, 477, 505, 508, 551, 559, 562, 571, 576, 634, 638, 675, 678, 699, 705, 708, 718, 729, 733, 738, 750, 751, 765, 770, 784, 785, 787, 788, 799, 800, 804, 832, 833, 835, 845, 881, 907, 916, 962, 994, 998, 999, 1006, 1045, 1090, 1095, 1108, 1126, 1173, 1181, 1184, 1193, 1198, 1229, 1240, 1287, 1293, 1296, 1306, 1317, 1321, 1326, 1362], "introduc": [56, 98, 728, 730, 731, 1316, 1318, 1319], "introduct": 1389, "intuit": [512, 845, 968], "invalid": [38, 48, 121, 150, 151, 165, 213, 352, 423, 707, 708, 733, 752, 845, 962, 1016, 1032, 1295, 1296, 1321, 1362], "invalid_valu": 1016, "invalidoperationerror": [648, 845, 1242, 1362, 1388], "invari": [895, 962], "invers": [369, 370, 371, 372, 373, 374, 845, 979, 980, 981, 982, 983, 984, 1343, 1362, 1387], "invert": 968, "invok": [205, 591, 845], "involv": [233, 280, 352, 881, 907, 962], "io": [36, 38, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 148, 150, 156, 157, 158, 159, 160, 163, 164, 165, 167, 168, 169, 221, 292, 352, 444, 514, 606, 845, 872, 914, 962], "io_sourc": 145, "iobas": [45, 159, 160, 221, 292, 352, 444, 606, 610, 845, 872, 914, 962], "ipc": [43, 44, 49, 156, 157, 158, 168, 171, 352, 857, 962], "ipccompress": [43, 44, 49, 352, 962], "ir": [917, 962], "is_between": [845, 1362], "is_dupl": [352, 845, 1362], "is_elementwis": [147, 591, 845], "is_empti": [352, 1362], "is_finit": [845, 1362], "is_first_distinct": [845, 1362], "is_in": [107, 233, 352, 845, 1362], "is_infinit": [845, 1362], "is_last_distinct": [845, 1362], "is_nan": [224, 352, 845, 874, 962, 1362], "is_not_nan": [845, 1362], "is_not_nul": [280, 352, 845, 907, 962, 1362], "is_nul": [225, 352, 845, 875, 962, 1362], "is_numer": 1393, "is_odd": [290, 352, 912, 962, 968], "is_selector": 968, "is_sort": 1362, "is_uniqu": [352, 845, 1362], "isn": [96, 145, 835], "iso": [463, 482, 491, 492, 1077, 1100, 1109, 1110, 1385], "iso8601": [150, 151, 165, 482, 1100], "iso_lang": 1385, "iso_year": 494, "isodow": 1386, "isoweek": 1386, "isoyear": 1386, "issu": [100, 101, 104, 105, 108, 115, 117, 128, 150, 151, 152, 165, 352, 439, 440, 745, 845, 1054, 1055, 1333, 1362, 1390], "ital": [41, 352], "item": [14, 65, 151, 240, 285, 288, 352, 384, 388, 389, 445, 504, 551, 553, 560, 562, 571, 675, 721, 845, 994, 998, 999, 1059, 1124, 1173, 1175, 1182, 1184, 1193, 1260, 1309, 1362], "iter": [57, 63, 64, 65, 75, 130, 131, 134, 145, 147, 152, 184, 186, 212, 222, 233, 241, 242, 253, 254, 255, 258, 280, 284, 285, 286, 287, 290, 291, 298, 315, 316, 326, 327, 330, 331, 352, 422, 441, 449, 461, 508, 633, 687, 743, 751, 761, 763, 768, 770, 771, 772, 773, 774, 782, 809, 811, 814, 823, 827, 829, 835, 841, 845, 861, 873, 881, 884, 885, 891, 907, 910, 912, 913, 919, 924, 931, 932, 938, 962, 967, 968, 1056, 1063, 1075, 1129, 1261, 1362, 1393], "iter_batch": 152, "iter_column": 352, "iter_row": [255, 285, 286, 287, 352], "iter_slic": 352, "its": [76, 138, 173, 228, 310, 352, 453, 477, 490, 499, 591, 651, 687, 742, 835, 845, 869, 876, 930, 962, 966, 1039, 1067, 1095, 1108, 1118, 1120, 1245, 1343, 1362, 1392], "itself": [179, 352, 355, 356, 592, 654, 656, 658, 660, 662, 664, 666, 667, 669, 671, 769, 821, 822, 845, 893, 962, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1362, 1367, 1371, 1372, 1390], "ix": [276, 352], "j": [316, 352, 1381], "jax": [309, 352, 1341, 1362], "jax_enable_x64": [309, 352], "jaxexporttyp": [309, 352], "jjk": 968, "jkl": [700, 1288], "jklmn": 1385, "job": [862, 962], "join": [56, 57, 63, 65, 98, 233, 257, 258, 280, 321, 352, 508, 527, 633, 690, 824, 845, 866, 877, 881, 890, 891, 904, 907, 917, 928, 933, 962, 1278, 1372, 1374, 1380, 1389, 1390], "join_asof": [256, 352, 889, 962], "join_nul": [256, 352, 889, 962], "join_wher": [352, 962], "joinstrategi": [57, 256, 352, 889, 962], "joinvalid": [256, 352, 889, 962], "jpy": 1393, "json": [2, 3, 5, 6, 45, 46, 146, 147, 159, 160, 167, 169, 198, 221, 292, 352, 444, 514, 606, 610, 707, 708, 740, 845, 857, 872, 914, 962, 1295, 1296, 1329], "json_path": [708, 1296], "json_path_match": [707, 1295], "json_stat": 5, "json_str": [159, 160], "json_val": [708, 1296], "jsonencod": 146, "jsonpath": [707, 708, 1295, 1296], "jst": [138, 968], "jul": [728, 1316, 1385], "juli": [1100, 1385, 1386], "just": [41, 136, 152, 165, 267, 319, 352, 899, 927, 962, 968], "k": [212, 287, 315, 316, 352, 421, 422, 436, 541, 750, 751, 845, 861, 924, 962, 1031, 1051, 1163, 1347, 1362], "k_2": [684, 845, 1273, 1362], "k_3": [684, 845, 1273, 1362], "kadokawa": [711, 1299], "kanji": 968, "karen": [276, 352], "kathmandu": [1069, 1070, 1098], "kb": [228, 352, 410, 1020, 1118, 1362], "kde": [1362, 1367], "keep": [57, 150, 151, 160, 165, 168, 169, 233, 317, 321, 322, 352, 514, 591, 609, 617, 647, 771, 835, 845, 925, 928, 962, 1241, 1362], "kei": [38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 57, 62, 65, 143, 144, 154, 160, 162, 165, 166, 167, 168, 169, 170, 195, 210, 242, 254, 256, 257, 268, 274, 281, 283, 286, 287, 321, 352, 508, 592, 647, 648, 716, 784, 787, 827, 845, 885, 889, 890, 900, 906, 908, 909, 928, 962, 968, 972, 1241, 1242, 1304, 1362, 1378], "kept": [317, 352, 925, 962], "keyedpartit": 144, "keyedpartitioncontext": [52, 54, 143], "keyerror": 17, "keystrok": 841, "keyword": [40, 154, 162, 166, 181, 185, 195, 218, 241, 275, 285, 290, 291, 311, 326, 327, 331, 352, 449, 508, 637, 732, 743, 770, 823, 827, 835, 845, 884, 903, 912, 913, 931, 932, 938, 962, 1063, 1320, 1344, 1362, 1375], "kl": 715, "kleen": [364, 366, 760, 761, 762, 763, 845, 975, 976, 1362], "klmnoopqrstuvwxyz": [255, 352], "knight": 1371, "know": [57, 152, 276, 319, 352, 583, 591, 845, 927, 962], "known": [156, 199, 401, 583, 945, 1011, 1205], "kurtosi": [654, 845, 1247, 1362], "kuzu_db_conn": 152, "kwarg": [32, 33, 37, 56, 67, 68, 70, 71, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 147, 149, 152, 153, 181, 183, 185, 198, 202, 218, 233, 275, 280, 311, 352, 355, 637, 845, 881, 903, 907, 937, 962, 1344, 1362, 1367, 1375, 1390], "k\u00f9zudb": 152, "l": [803, 804], "l1": 65, "l2": 65, "label": [242, 309, 314, 352, 355, 356, 442, 640, 654, 655, 656, 658, 660, 662, 664, 666, 667, 669, 671, 845, 885, 904, 962, 1057, 1234, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1362, 1367], "label_column": [314, 352], "labelangl": [352, 355, 1362, 1367], "lag": [295, 352, 396, 576, 678, 773, 845, 916, 962, 1006, 1198, 1266, 1362], "lake": [40, 154, 166, 352, 857], "lambda": [52, 96, 165, 235, 261, 275, 276, 281, 338, 352, 401, 500, 501, 583, 591, 592, 617, 618, 779, 780, 793, 806, 807, 819, 845, 895, 903, 908, 945, 962, 1011, 1121, 1122, 1205, 1213, 1362], "land": [449, 461, 1063, 1075], "languag": [165, 242, 257, 284, 322, 352, 472, 477, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1090, 1095, 1108, 1120, 1362], "larg": [11, 12, 15, 57, 152, 155, 161, 170], "large_str": [255, 304, 311, 352], "larger": [11, 48, 49, 50, 51, 512, 775, 845, 962], "largest": [212, 315, 352, 422, 750, 751, 845, 861, 924, 962, 1347, 1362], "last": [40, 160, 165, 168, 169, 174, 175, 176, 177, 244, 257, 260, 276, 287, 298, 303, 310, 317, 346, 352, 377, 388, 397, 441, 457, 469, 473, 491, 513, 535, 560, 578, 581, 583, 616, 617, 619, 621, 623, 624, 633, 648, 686, 687, 705, 721, 729, 746, 768, 830, 841, 845, 890, 919, 923, 925, 953, 962, 968, 987, 998, 1007, 1056, 1071, 1087, 1091, 1109, 1133, 1142, 1155, 1167, 1182, 1200, 1203, 1242, 1275, 1293, 1309, 1317, 1334, 1343, 1362, 1383, 1385], "last_column": [41, 352], "later": [257, 292, 352, 606, 890, 914, 962], "latest": [33, 132, 154, 166, 209, 475, 476, 604, 728, 731, 786, 1093, 1094, 1316, 1319], "latt": 968, "latter": [41, 132, 230, 352, 1125, 1362], "lazi": [1, 48, 49, 50, 51, 52, 65, 150, 156, 160, 162, 165, 181, 257, 275, 276, 299, 352, 592, 795, 817, 820, 836, 845, 871, 889, 890, 933, 938, 939, 941, 943, 945, 946, 947, 948, 949, 950, 951, 952, 962, 968, 1371, 1372, 1373, 1374, 1375, 1377, 1390, 1393], "lazili": [150, 151, 156, 160, 162, 165, 166, 167, 168, 169, 170, 867, 962], "lazy_fram": [63, 64, 130], "lazyfram": [0, 1, 10, 57, 58, 59, 60, 61, 63, 64, 65, 96, 130, 141, 145, 150, 156, 160, 162, 165, 166, 167, 168, 169, 170, 171, 174, 175, 181, 195, 216, 221, 259, 275, 276, 292, 299, 352, 444, 508, 583, 606, 823, 824, 835, 845, 857, 959, 960, 961, 967, 968, 1371, 1372, 1375, 1377, 1390, 1391, 1393], "lazyframeext": [906, 962], "lazygroupbi": [884, 885, 910, 962], "lbl": [309, 314, 352], "ldf": [1, 938, 939, 941, 943, 946, 947, 948, 949, 950, 951, 952], "ldot": [499, 845, 1120, 1362], "le": [696, 845, 1362], "lead": [15, 47, 96, 138, 145, 171, 265, 293, 295, 302, 352, 396, 515, 518, 576, 583, 591, 592, 677, 678, 723, 725, 775, 811, 829, 845, 895, 915, 916, 945, 962, 1006, 1198, 1213, 1264, 1266, 1311, 1313, 1362], "leap": [462, 472, 1076, 1090], "leap_year": 462, "learn": [314, 352], "least": [65, 111, 276, 352, 418, 419, 634, 699, 701, 771, 775, 777, 845, 1028, 1029, 1229, 1287, 1289, 1362, 1383], "leav": [6, 267, 319, 352, 583, 899, 927, 962], "left": [16, 17, 41, 57, 174, 175, 176, 177, 242, 256, 257, 284, 321, 352, 442, 498, 499, 500, 501, 527, 529, 640, 653, 657, 659, 661, 663, 665, 668, 670, 672, 676, 749, 771, 779, 780, 784, 785, 787, 788, 793, 803, 804, 819, 832, 833, 835, 845, 885, 889, 890, 910, 928, 962, 1057, 1119, 1120, 1121, 1122, 1148, 1234, 1262, 1345, 1362, 1374, 1378, 1383], "left_clos": [442, 640, 845, 1057, 1234, 1362], "left_on": [256, 257, 321, 352, 889, 890, 928, 962], "left_right": [256, 321, 352, 889, 928, 962], "leftmost": [676, 845, 1262, 1362, 1385], "len": [13, 181, 185, 216, 255, 276, 329, 333, 338, 352, 435, 592, 603, 605, 643, 651, 776, 799, 803, 845, 868, 930, 935, 940, 945, 962, 967, 1050, 1245, 1362], "len_byt": [13, 427, 710, 711, 1037, 1298], "len_char": [426, 709, 1036, 1297], "length": [65, 66, 84, 147, 155, 161, 165, 179, 183, 240, 242, 284, 297, 352, 355, 426, 441, 477, 577, 583, 604, 643, 647, 648, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 685, 705, 709, 710, 712, 713, 716, 718, 729, 738, 772, 803, 804, 817, 820, 821, 822, 836, 845, 885, 904, 910, 918, 962, 1036, 1043, 1056, 1067, 1095, 1199, 1205, 1226, 1241, 1242, 1245, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1274, 1293, 1297, 1298, 1300, 1301, 1304, 1306, 1317, 1326, 1362, 1379, 1380, 1383], "leq": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "less": [54, 165, 257, 352, 512, 543, 590, 591, 721, 835, 845, 890, 962, 1309, 1393], "letter": [229, 335, 346, 352, 502, 692, 700, 702, 704, 716, 736, 791, 845, 878, 942, 953, 962, 968, 1280, 1288, 1290, 1292, 1304, 1324, 1385], "level": [11, 41, 43, 44, 47, 49, 51, 146, 163, 165, 168, 169, 170, 235, 261, 272, 299, 304, 352, 356, 508, 845, 857, 920, 962, 1337, 1362, 1390], "lexic": [69, 968, 1040], "lf": [10, 48, 49, 50, 51, 60, 96, 141, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 914, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 933, 934, 935, 940, 944, 962, 1379, 1390, 1393], "lf1": [824, 920, 962, 1375, 1377, 1391], "lf2": [824, 920, 962, 1375, 1377, 1391], "lf3": [962, 1375], "lf4": [962, 1375], "lf5": 962, "lf6": 962, "lf_other": [933, 962], "lib": [845, 1337, 1362], "librari": [1, 113, 147, 152, 155, 591, 845, 966, 1393], "life": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "lifetim": [205, 856, 1377], "light": [41, 352], "like": [36, 38, 40, 43, 44, 45, 46, 47, 64, 132, 147, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 221, 242, 249, 251, 256, 287, 292, 309, 310, 352, 355, 444, 450, 514, 555, 591, 609, 643, 699, 724, 725, 756, 841, 845, 862, 867, 872, 885, 962, 1064, 1177, 1236, 1287, 1351, 1362, 1367], "limit": [11, 12, 51, 52, 152, 153, 187, 232, 352, 404, 507, 513, 845, 880, 962, 1014, 1128, 1133, 1362, 1380, 1389], "line": [11, 21, 41, 150, 151, 155, 165, 240, 249, 251, 352, 355, 699, 1287, 1362, 1367], "line_termin": [38, 48, 352, 962], "linear": [220, 248, 278, 344, 352, 527, 528, 550, 595, 641, 664, 665, 773, 774, 818, 845, 871, 888, 905, 951, 962, 1058, 1146, 1147, 1172, 1235, 1253, 1362], "linearli": 804, "lineitem": [140, 151, 153], "link": 966, "list": [1, 14, 34, 40, 41, 57, 58, 60, 63, 64, 66, 72, 88, 105, 130, 131, 133, 134, 135, 137, 138, 140, 141, 144, 145, 148, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 179, 180, 181, 185, 192, 193, 194, 200, 217, 222, 226, 228, 229, 233, 239, 241, 242, 246, 254, 271, 274, 280, 284, 285, 286, 287, 290, 298, 305, 306, 314, 316, 317, 318, 320, 326, 331, 332, 352, 362, 389, 400, 401, 402, 442, 449, 461, 504, 510, 515, 524, 533, 591, 592, 604, 605, 633, 640, 646, 649, 655, 656, 658, 660, 662, 664, 667, 669, 671, 686, 687, 698, 700, 702, 704, 719, 739, 741, 742, 749, 768, 770, 773, 784, 785, 787, 788, 790, 798, 800, 804, 805, 807, 825, 827, 833, 841, 845, 869, 876, 878, 881, 884, 885, 907, 912, 919, 925, 926, 931, 933, 938, 939, 962, 967, 968, 999, 1010, 1011, 1012, 1043, 1057, 1063, 1075, 1118, 1124, 1134, 1137, 1143, 1144, 1153, 1213, 1234, 1240, 1243, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1280, 1286, 1288, 1290, 1292, 1304, 1307, 1342, 1345, 1362, 1371, 1376, 1380, 1382, 1385, 1392, 1393], "list_catalog": 203, "list_namespac": 203, "list_of_seri": 807, "list_tabl": 203, "listitem": 141, "listtostructwidthstrategi": [583, 1205], "lit": [1, 363, 405, 529, 600, 616, 703, 772, 773, 779, 793, 817, 820, 835, 836, 845, 1128, 1362], "liter": [10, 16, 17, 21, 38, 40, 42, 43, 47, 48, 49, 50, 51, 55, 152, 154, 160, 162, 165, 166, 167, 168, 169, 170, 184, 185, 186, 195, 198, 202, 271, 290, 291, 295, 321, 326, 327, 352, 363, 405, 424, 428, 431, 453, 475, 496, 497, 505, 512, 517, 519, 529, 543, 590, 600, 612, 614, 627, 628, 638, 647, 648, 691, 692, 693, 702, 703, 704, 714, 715, 716, 743, 744, 752, 761, 763, 765, 771, 772, 773, 774, 782, 783, 786, 799, 803, 805, 809, 811, 814, 823, 827, 829, 831, 835, 845, 880, 912, 913, 916, 928, 931, 932, 962, 968, 1015, 1045, 1067, 1093, 1116, 1126, 1148, 1225, 1241, 1242, 1261, 1263, 1266, 1279, 1280, 1281, 1290, 1291, 1292, 1302, 1303, 1304, 1362, 1385], "littl": [286, 352, 409, 1019], "lmn": 968, "ln": [498, 499, 500, 501, 845, 1119, 1120, 1121, 1122, 1362, 1383], "ln_a": 1384, "load": [3, 5, 6, 134, 136, 147, 152, 154, 155, 161, 166, 167, 184, 186, 352, 845, 857, 962, 1393], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 155, "load_tabl": 155, "load_workbook": 155, "loader": [314, 352], "lobster": [703, 1291], "loc": [352, 356], "local": [4, 40, 152, 154, 166, 167, 170, 352, 490, 635, 636, 845, 1035, 1039, 1069, 1070, 1095, 1098, 1108, 1230, 1231, 1362, 1372], "localhost": 152, "localis": [477, 490, 1108], "locat": [41, 162, 165, 168, 170, 230, 282, 312, 318, 352, 676, 845, 926, 962, 1125, 1134, 1261, 1262, 1362], "lock": 187, "log": [30, 59, 422, 495, 588, 614, 638, 751, 845, 1114, 1362, 1383], "log10": [845, 1362, 1383], "log10_a": 1384, "log16_a": 1384, "log1p": [845, 1362, 1383], "log1p_a": 1384, "log2": 1383, "logarithm": [586, 587, 588, 845, 1208, 1209, 1210, 1362, 1384], "logic": [65, 261, 338, 352, 355, 356, 364, 366, 444, 592, 749, 760, 761, 762, 763, 807, 835, 845, 872, 877, 889, 906, 914, 945, 962, 975, 976, 1213, 1343, 1345, 1362, 1367], "london": [454, 458, 476, 1068, 1072, 1094], "london_timezon": [476, 1094], "london_to_amsterdam": [476, 1094], "long": [229, 267, 276, 319, 320, 352, 409, 878, 899, 927, 962, 1019], "longer": [150, 151, 165], "longest": 583, "look": [11, 242, 352, 405, 583, 885, 962, 1015], "lookup": 841, "loop": [152, 592, 845], "lose": [451, 1065], "lossi": [150, 151, 165], "lossless": 55, "lot": 54, "love": [692, 716, 1280, 1304], "low": [18, 152, 431, 640, 845, 1234, 1362], "low_memori": [150, 151, 160, 162, 165, 169, 170], "lower": [55, 165, 220, 242, 278, 344, 352, 431, 529, 589, 617, 641, 645, 664, 665, 765, 784, 785, 787, 788, 803, 804, 818, 832, 833, 845, 871, 885, 905, 951, 962, 1045, 1058, 1148, 1211, 1235, 1238, 1253, 1350, 1362, 1380, 1383], "lower_bound": [242, 352, 431, 529, 845, 885, 962, 1045, 1148, 1350, 1362], "lowercas": [623, 734, 736, 1322, 1324, 1385], "lowest": [589, 845], "lru_cach": [261, 352, 592, 845, 1213, 1362], "lst": 180, "lt": [173, 508, 758, 845, 1362], "ltrim": 1383, "lyric": [692, 716, 1280, 1304], "lz4": [43, 44, 47, 49, 51, 352, 962], "lzo": [47, 51, 352, 962], "m": [72, 74, 256, 352, 450, 451, 453, 458, 459, 479, 481, 482, 493, 699, 728, 730, 731, 735, 786, 787, 788, 789, 795, 803, 889, 962, 968, 1064, 1065, 1067, 1072, 1073, 1097, 1099, 1100, 1111, 1287, 1316, 1318, 1319, 1323, 1375, 1385, 1386], "m_2": [684, 845, 1273, 1362], "m_3": [684, 845, 1273, 1362], "m_i": [684, 845, 1273, 1362], "machin": 1393, "maco": 173, "made": [41, 152, 352, 482, 1100], "mai": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 65, 73, 79, 130, 131, 132, 133, 134, 135, 137, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 176, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 205, 220, 221, 228, 230, 242, 256, 257, 258, 261, 284, 292, 299, 309, 311, 314, 321, 322, 352, 355, 356, 426, 441, 442, 444, 449, 450, 451, 461, 463, 472, 477, 479, 490, 502, 523, 558, 583, 591, 592, 603, 606, 640, 653, 654, 655, 657, 659, 661, 663, 665, 666, 668, 670, 672, 702, 704, 707, 709, 715, 770, 772, 779, 780, 784, 785, 787, 788, 793, 803, 804, 819, 832, 833, 845, 866, 867, 871, 872, 877, 885, 889, 890, 891, 895, 904, 910, 914, 920, 928, 934, 935, 936, 945, 962, 1036, 1039, 1040, 1056, 1057, 1058, 1063, 1064, 1065, 1075, 1077, 1090, 1095, 1097, 1108, 1118, 1125, 1143, 1180, 1213, 1234, 1247, 1248, 1251, 1253, 1254, 1290, 1292, 1295, 1297, 1341, 1344, 1346, 1362, 1367, 1393], "main": [173, 867, 962], "maintain": [48, 49, 50, 51, 298, 352, 402, 584, 676, 687, 753, 768, 845, 871, 919, 962, 1012, 1206, 1262, 1348, 1362], "maintain_ord": [48, 49, 50, 51, 241, 256, 274, 276, 298, 317, 321, 322, 332, 334, 336, 339, 340, 341, 342, 343, 344, 345, 352, 362, 402, 412, 417, 420, 422, 515, 518, 584, 592, 687, 751, 753, 768, 845, 867, 877, 884, 889, 904, 917, 919, 925, 928, 939, 941, 943, 946, 947, 948, 949, 950, 951, 952, 962, 1012, 1206, 1348, 1362], "maintainorderjoin": [256, 321, 352, 889, 928, 962], "major": [155, 309, 352], "make": [41, 65, 88, 131, 132, 136, 147, 150, 151, 154, 155, 156, 158, 162, 166, 268, 272, 279, 310, 322, 352, 355, 500, 501, 623, 624, 633, 646, 720, 845, 900, 962, 1121, 1122, 1240, 1308, 1343, 1362], "man": [717, 1305], "manag": [56, 97, 98, 202, 856, 857, 1377, 1390], "managed_shallow_clon": 202, "mandatori": [41, 352], "mango": [424, 428, 696, 722, 1033, 1038, 1284, 1310], "mani": [152, 153, 170, 230, 256, 352, 702, 704, 716, 889, 962, 1125, 1290, 1304, 1362, 1366], "manner": 152, "map": [51, 52, 54, 88, 133, 134, 141, 150, 151, 152, 153, 156, 157, 162, 164, 165, 168, 181, 213, 216, 234, 254, 261, 281, 285, 286, 287, 289, 305, 352, 363, 477, 490, 591, 592, 616, 618, 619, 621, 623, 624, 647, 648, 716, 756, 806, 845, 863, 908, 911, 962, 967, 968, 1058, 1095, 1108, 1213, 1241, 1242, 1304, 1351, 1362, 1372, 1374, 1375, 1390], "map_": 117, "map_batch": [845, 962], "map_el": [108, 261, 352, 591, 759, 845, 1362], "map_field": [620, 622], "map_row": 352, "mapelementsstrategi": [592, 845], "mapping_strategi": [633, 845], "march": [479, 1097], "mariadb": 153, "mark": [41, 146, 352, 423, 845, 1032, 1362], "mark_area": [1362, 1367], "mark_attr": [352, 355, 1362, 1367], "mark_bar": [352, 355, 1362, 1367], "mark_lin": [352, 355], "mark_point": [352, 355], "markdown": [7, 21, 205], "marker": [41, 352], "mask": [170, 181, 185, 249, 251, 352, 406, 530, 532, 535, 540, 635, 636, 691, 694, 703, 845, 1016, 1129, 1148, 1149, 1152, 1155, 1161, 1230, 1231, 1263, 1279, 1282, 1291, 1353, 1362], "mass": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "massag": [267, 319, 352, 899, 927, 962], "match": [40, 41, 55, 65, 72, 96, 119, 131, 133, 134, 135, 137, 145, 150, 152, 159, 160, 162, 165, 169, 170, 174, 175, 176, 177, 213, 232, 233, 256, 257, 280, 285, 321, 352, 424, 428, 599, 600, 601, 647, 648, 666, 691, 692, 693, 696, 699, 700, 702, 703, 704, 707, 708, 714, 715, 716, 722, 728, 730, 731, 835, 841, 845, 863, 880, 889, 890, 907, 928, 962, 968, 1033, 1038, 1117, 1241, 1242, 1254, 1279, 1280, 1281, 1284, 1287, 1288, 1290, 1291, 1292, 1295, 1296, 1302, 1303, 1304, 1310, 1316, 1318, 1319, 1362, 1385], "matches_overlap": [702, 704, 1292], "matches_supertyp": [232, 352, 880, 962], "materi": [145, 150, 156, 160, 162, 261, 287, 338, 352, 866, 904, 945, 955, 962, 968, 1213, 1362], "materialis": [254, 255, 285, 286, 352], "materialized_view": 202, "math": [1, 11, 61, 276, 352, 443, 845, 1047, 1049, 1271, 1335, 1362, 1383, 1387, 1389], "mathemat": [752, 790, 845, 1383], "mathshortcut": [1, 61], "matplotlib": [173, 607, 904, 917, 962], "matter": [242, 254, 284, 286, 287, 306, 352, 653, 724, 725, 845, 885, 910, 962], "max": [10, 26, 41, 47, 51, 146, 220, 232, 241, 263, 276, 284, 352, 356, 437, 507, 583, 591, 633, 643, 647, 648, 653, 656, 657, 677, 721, 772, 784, 787, 809, 825, 845, 871, 880, 884, 910, 962, 1052, 1058, 1128, 1205, 1236, 1249, 1264, 1309, 1362, 1371, 1380, 1383], "max_a": [284, 352, 653, 845, 910, 962], "max_binary_s": 152, "max_col": [179, 181], "max_colname_length": [240, 352], "max_color": [41, 352], "max_data_s": 185, "max_elem": 1380, "max_horizont": [352, 808], "max_items_per_column": [240, 352], "max_level": 146, "max_siz": [53, 180, 181, 183, 185, 1393], "max_text_s": 152, "max_valu": 1393, "max_width": [583, 1205], "maxim": [339, 375, 845, 946, 985, 1362], "maximum": [11, 27, 38, 47, 48, 51, 53, 73, 134, 137, 150, 151, 152, 155, 159, 160, 161, 165, 169, 171, 179, 180, 181, 183, 185, 240, 242, 262, 263, 352, 382, 427, 548, 593, 625, 635, 643, 705, 707, 710, 718, 729, 808, 809, 845, 885, 896, 962, 992, 1037, 1078, 1170, 1214, 1222, 1230, 1236, 1293, 1295, 1298, 1306, 1317, 1362, 1379], "mb": [228, 352, 410, 1118, 1362], "md": 141, "md2": 141, "me": [692, 716, 736, 1280, 1304, 1324], "mean": [47, 51, 63, 130, 150, 151, 156, 162, 165, 168, 205, 220, 232, 241, 242, 257, 265, 276, 284, 322, 331, 352, 472, 477, 490, 504, 507, 512, 653, 657, 658, 659, 661, 663, 665, 668, 670, 672, 684, 690, 699, 706, 784, 785, 787, 788, 789, 811, 832, 833, 835, 845, 871, 880, 884, 885, 890, 895, 910, 938, 962, 1058, 1090, 1095, 1108, 1124, 1128, 1250, 1273, 1278, 1287, 1294, 1362, 1379, 1380], "mean_horizont": [352, 810], "measur": [267, 319, 352, 356, 899, 927, 962], "measure_a": [352, 356], "measure_b": [352, 356], "median": [220, 276, 352, 507, 660, 661, 845, 871, 933, 962, 1058, 1251, 1362, 1383], "mediat": 1390, "medium": [41, 352], "megan": [268, 352, 900, 962], "melt": [319, 352, 927, 962], "member": [242, 352, 885, 962, 1153, 1362], "membership": [384, 551, 994, 1173], "memori": [10, 15, 47, 51, 63, 64, 65, 131, 132, 135, 136, 137, 150, 151, 152, 154, 155, 156, 160, 162, 165, 166, 168, 169, 170, 209, 230, 261, 286, 287, 296, 310, 338, 352, 633, 644, 679, 845, 866, 867, 877, 904, 917, 937, 962, 1125, 1213, 1237, 1267, 1268, 1343, 1362], "memory_map": [156, 162, 168], "memory_resourc": 937, "merg": [40, 256, 257, 268, 352, 889, 890, 900, 962], "merge_sort": [352, 962], "messi": [699, 701, 1287, 1289], "met": 835, "meta": [99, 444, 697, 845, 1285], "metadata": [0, 47, 48, 49, 50, 51, 141, 163, 167, 191, 195, 352, 857, 962], "metastor": 196, "method": [4, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 52, 53, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 129, 132, 141, 142, 143, 144, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 171, 178, 181, 185, 190, 196, 197, 199, 200, 205, 207, 211, 216, 220, 221, 224, 225, 230, 237, 241, 248, 254, 261, 267, 272, 278, 285, 286, 287, 295, 317, 326, 328, 333, 338, 344, 352, 361, 364, 365, 396, 431, 444, 456, 479, 482, 496, 497, 505, 512, 514, 517, 519, 527, 543, 576, 590, 592, 610, 612, 614, 616, 617, 619, 621, 623, 624, 627, 628, 629, 632, 638, 641, 643, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 678, 692, 698, 702, 704, 716, 724, 725, 726, 727, 732, 738, 744, 752, 754, 758, 759, 775, 807, 818, 837, 838, 840, 841, 845, 846, 847, 850, 851, 852, 853, 854, 857, 867, 871, 872, 874, 875, 888, 899, 905, 916, 925, 931, 934, 936, 937, 940, 945, 951, 962, 967, 970, 977, 1006, 1045, 1058, 1079, 1080, 1097, 1100, 1115, 1116, 1125, 1126, 1136, 1138, 1140, 1146, 1165, 1198, 1212, 1213, 1224, 1225, 1235, 1236, 1253, 1266, 1280, 1286, 1290, 1292, 1304, 1320, 1326, 1345, 1354, 1356, 1358, 1362, 1363, 1366, 1368, 1369, 1370, 1372, 1376], "metric": 152, "micro": [478, 1096], "microsecond": [72, 74, 242, 254, 257, 284, 286, 287, 306, 322, 352, 472, 475, 477, 482, 485, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 786, 787, 788, 789, 831, 832, 833, 845, 885, 890, 904, 910, 962, 968, 1090, 1093, 1095, 1103, 1108, 1120, 1362, 1386], "microsoft": [34, 41, 352], "mid_color": [41, 352], "midnight": 89, "midpoint": [220, 278, 344, 352, 641, 664, 665, 818, 845, 871, 905, 951, 962, 1058, 1235, 1253, 1362], "might": [150, 151, 165, 187, 256, 276, 310, 319, 352, 592, 754, 845, 889, 919, 927, 962], "millennia": 1386, "millennium": 1386, "milli": [478, 1096], "millisecond": [242, 257, 284, 322, 352, 460, 467, 472, 477, 486, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 787, 788, 789, 803, 832, 833, 845, 885, 890, 910, 962, 968, 1090, 1095, 1104, 1108, 1120, 1362, 1386], "milliseconds_diff": [485, 486, 488], "mimic": 773, "min": [41, 47, 51, 147, 220, 232, 270, 276, 284, 352, 438, 507, 592, 633, 643, 653, 662, 663, 784, 787, 814, 823, 845, 871, 880, 910, 962, 1053, 1058, 1128, 1236, 1252, 1362, 1380, 1383, 1386, 1393], "min_a": [284, 352, 653, 845, 910, 962], "min_col": [179, 181], "min_color": [41, 352], "min_elem": 1380, "min_horizont": [352, 813, 823], "min_period": [441, 498, 500, 501, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 821, 822, 845, 1056, 1119, 1121, 1122, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1362], "min_sampl": [441, 498, 500, 501, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 821, 822, 845, 1056, 1119, 1121, 1122, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1362], "min_siz": [180, 181, 183, 185, 1393], "min_valu": 1393, "mincol": 179, "minim": [342, 376, 383, 549, 679, 687, 845, 949, 986, 993, 1171, 1217, 1267, 1362], "minimum": [47, 51, 179, 180, 181, 183, 185, 235, 269, 270, 352, 498, 500, 501, 611, 626, 636, 643, 813, 814, 845, 901, 962, 1084, 1119, 1121, 1122, 1223, 1231, 1236, 1362, 1379, 1393], "minu": [472, 629, 845, 1090], "minut": [242, 257, 284, 322, 352, 460, 464, 466, 471, 472, 475, 477, 478, 487, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 786, 787, 788, 789, 831, 832, 833, 845, 885, 890, 910, 962, 968, 1090, 1093, 1095, 1105, 1108, 1120, 1362, 1386], "minutes_diff": 487, "misc": 1377, "miscellan": 857, "mismatch": [65, 122, 160, 169, 174, 176], "miss": [55, 65, 150, 151, 165, 231, 237, 352, 404, 498, 500, 501, 506, 513, 536, 537, 583, 845, 879, 962, 1014, 1119, 1121, 1122, 1127, 1133, 1362], "missing_struct_field": 55, "missing_utf8_is_empty_str": [150, 151, 165], "mix": [12, 257, 310, 352, 772, 824, 890, 920, 962, 968, 1058, 1362], "mixin": 1, "mkdir": [48, 49, 50, 51, 52, 54, 962], "mlnm": 465, "mm": [41, 352], "mn": 1385, "mno": [17, 21], "mnop": 1385, "mo": 789, "mocha": 968, "mod": [845, 1383], "mode": [39, 40, 41, 42, 48, 49, 50, 51, 174, 176, 276, 299, 352, 673, 700, 817, 820, 836, 845, 866, 877, 904, 917, 962, 1258, 1288, 1362, 1371, 1372, 1390], "model": [314, 352], "modifi": [52, 53, 54, 55, 150, 151, 165, 187, 205, 230, 246, 253, 254, 324, 352, 378, 476, 493, 691, 699, 700, 703, 714, 715, 734, 736, 737, 845, 977, 1094, 1111, 1125, 1279, 1287, 1288, 1291, 1302, 1303, 1322, 1324, 1325, 1362], "modul": [101, 109, 155, 844, 966, 968, 1393], "modulu": [612, 845], "moment": [47, 48, 49, 50, 51, 63, 64, 218, 352, 541, 684, 845, 866, 867, 877, 904, 917, 962, 1163, 1273, 1362], "mon": [352, 355, 1386], "mondai": [242, 352, 449, 461, 490, 492, 770, 885, 962, 1063, 1075, 1108, 1110], "monkei": [712, 713, 1300, 1301], "month": [242, 257, 284, 322, 352, 457, 469, 470, 472, 475, 477, 479, 482, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 783, 784, 785, 786, 787, 788, 789, 832, 833, 845, 885, 890, 910, 962, 1071, 1087, 1088, 1090, 1093, 1095, 1097, 1100, 1108, 1120, 1362, 1386], "month_nam": [479, 482], "monthbegin": [470, 1088], "monthend": [469, 1087], "moos": 968, "more": [21, 41, 47, 51, 57, 65, 97, 98, 127, 131, 132, 133, 134, 135, 136, 137, 145, 147, 152, 153, 154, 155, 159, 160, 161, 162, 166, 167, 169, 174, 176, 181, 205, 207, 218, 220, 224, 233, 253, 254, 261, 267, 272, 280, 285, 286, 288, 299, 309, 310, 314, 317, 319, 338, 352, 356, 365, 402, 426, 508, 512, 520, 541, 571, 584, 588, 591, 592, 632, 633, 675, 684, 700, 709, 728, 730, 731, 753, 764, 776, 792, 798, 801, 810, 812, 815, 816, 825, 835, 841, 845, 871, 874, 875, 881, 899, 906, 907, 920, 925, 927, 937, 962, 966, 968, 970, 1012, 1036, 1039, 1058, 1139, 1140, 1163, 1193, 1206, 1213, 1260, 1273, 1288, 1297, 1316, 1318, 1319, 1341, 1343, 1348, 1362, 1377, 1378, 1388, 1391, 1392, 1393], "more_bi": [274, 298, 352, 687, 845, 919, 962], "more_column": [229, 318, 352, 502, 791, 845, 878, 926, 962, 968], "more_expr": [633, 768, 771, 772, 773, 774, 845], "more_nam": [739, 841], "most": [41, 131, 150, 151, 153, 165, 174, 175, 176, 177, 310, 352, 415, 416, 604, 613, 634, 648, 721, 845, 1025, 1026, 1218, 1229, 1242, 1309, 1343, 1362, 1374, 1390], "mostli": [304, 352, 508, 845], "move": [276, 287, 352, 449, 498, 499, 500, 501, 656, 658, 662, 669, 835, 845, 1063, 1119, 1120, 1121, 1122, 1249, 1250, 1252, 1256, 1362], "mr": 937, "mssql": [39, 352], "much": [261, 320, 338, 352, 426, 427, 441, 558, 592, 709, 710, 807, 845, 945, 1036, 1037, 1056, 1180, 1213, 1297, 1298, 1362], "mul": 845, "multi": [8, 41, 150, 151, 314, 352, 502, 699, 845, 1287], "multi_fram": [41, 352], "multicolselector": 210, "multiindexselector": [210, 972], "multipl": [41, 54, 63, 64, 65, 114, 130, 150, 151, 155, 156, 160, 161, 162, 165, 168, 169, 170, 179, 181, 185, 222, 228, 230, 233, 241, 242, 246, 255, 258, 274, 276, 280, 287, 290, 298, 321, 326, 331, 352, 422, 558, 591, 597, 604, 613, 614, 633, 647, 649, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 687, 739, 751, 768, 776, 793, 806, 808, 813, 819, 825, 828, 835, 841, 845, 857, 866, 867, 873, 877, 881, 884, 885, 891, 904, 907, 912, 917, 919, 928, 931, 938, 945, 962, 977, 1007, 1118, 1125, 1180, 1200, 1218, 1241, 1243, 1275, 1362, 1375, 1380], "multipli": [591, 655, 656, 658, 660, 662, 664, 667, 669, 671, 743, 845, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1362], "multithread": [298, 352, 687, 768, 845, 919, 962, 1007, 1200, 1275, 1362], "must": [34, 41, 75, 96, 133, 145, 147, 150, 154, 162, 165, 166, 167, 170, 171, 220, 229, 242, 257, 258, 268, 276, 284, 285, 352, 442, 583, 592, 607, 640, 647, 648, 653, 716, 772, 784, 785, 793, 804, 835, 845, 871, 878, 885, 890, 891, 895, 900, 910, 917, 937, 962, 1057, 1058, 1234, 1241, 1242, 1304, 1362], "mutual": [285, 352], "my": [167, 171, 352, 355, 1362, 1367], "my_bucket": [906, 962], "my_column": 945, "my_column_": [316, 352], "my_column_0": [316, 352], "my_column_1": [316, 352], "my_column_2": [316, 352], "my_custom_aggreg": 807, "my_fil": 156, "my_holidai": [449, 461, 770, 1063, 1075], "my_larger_than_ram_fil": [48, 49, 50, 51, 962], "my_long_fil": 165, "my_struct": 827, "mydf": 165, "myrol": 153, "mysql": 153, "n": [1, 13, 14, 18, 26, 27, 38, 46, 48, 58, 59, 60, 61, 72, 74, 140, 145, 150, 151, 155, 160, 165, 181, 214, 230, 236, 242, 244, 254, 255, 260, 261, 286, 287, 288, 295, 300, 303, 306, 308, 323, 335, 337, 346, 352, 368, 396, 401, 410, 412, 417, 420, 421, 422, 426, 427, 441, 445, 449, 451, 453, 459, 481, 493, 499, 505, 508, 516, 522, 545, 553, 559, 561, 571, 572, 576, 579, 581, 583, 585, 634, 637, 646, 667, 668, 671, 672, 675, 678, 684, 689, 705, 709, 710, 714, 715, 720, 721, 723, 724, 729, 731, 746, 750, 751, 752, 756, 757, 759, 777, 786, 787, 788, 789, 795, 797, 817, 820, 821, 822, 823, 826, 830, 834, 836, 845, 864, 883, 885, 886, 894, 916, 921, 923, 929, 942, 944, 953, 962, 968, 1006, 1011, 1020, 1031, 1036, 1037, 1044, 1056, 1059, 1063, 1065, 1067, 1073, 1099, 1111, 1120, 1125, 1126, 1135, 1142, 1167, 1175, 1181, 1183, 1193, 1194, 1198, 1203, 1205, 1229, 1255, 1257, 1260, 1266, 1273, 1277, 1293, 1297, 1298, 1302, 1303, 1308, 1309, 1317, 1319, 1334, 1340, 1347, 1351, 1352, 1362, 1374, 1375, 1382, 1385, 1386, 1388, 1390, 1393], "n0": [401, 583], "n00": [1011, 1205], "n01": [1011, 1205], "n02": [1011, 1205], "n1": [401, 583], "n2": [1, 401], "n3": 1, "n_1": [508, 845], "n_2": [508, 845], "n_3": [508, 845], "n_bar": 1379, "n_bit": 1385, "n_byte": [410, 426, 427, 709, 710, 1385], "n_char": [426, 427, 709, 710, 1385], "n_chunk": [352, 977, 1125, 1237, 1362], "n_elem": 1380, "n_even": 968, "n_field_strategi": [583, 1205], "n_film": 1371, "n_foo_uniqu": 1379, "n_kilobyt": 410, "n_row": [145, 148, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 255, 352, 962], "n_thread": [150, 151], "n_uniqu": [352, 368, 845, 1362], "na": [311, 352, 722, 1344, 1362], "naiv": [453, 454, 731, 1067, 1068, 1319], "name": [1, 19, 23, 25, 33, 36, 38, 39, 41, 42, 48, 58, 59, 60, 61, 76, 88, 106, 131, 133, 134, 135, 136, 137, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 176, 177, 178, 179, 181, 184, 185, 186, 191, 193, 194, 195, 196, 197, 199, 200, 212, 213, 216, 217, 222, 223, 224, 225, 229, 233, 234, 237, 238, 240, 241, 252, 253, 254, 256, 257, 258, 261, 263, 265, 267, 268, 270, 274, 276, 280, 281, 285, 286, 287, 289, 290, 291, 298, 299, 302, 305, 307, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 326, 327, 328, 329, 330, 331, 337, 352, 356, 363, 401, 405, 406, 408, 411, 422, 431, 442, 479, 482, 502, 508, 529, 536, 537, 538, 539, 583, 592, 597, 601, 603, 605, 609, 633, 640, 650, 687, 700, 701, 714, 715, 716, 739, 741, 743, 751, 756, 760, 761, 762, 763, 764, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 781, 782, 791, 792, 797, 798, 801, 808, 809, 810, 811, 812, 813, 814, 815, 818, 821, 822, 823, 824, 826, 827, 828, 829, 830, 834, 835, 841, 845, 861, 863, 868, 869, 873, 874, 875, 878, 881, 884, 889, 890, 891, 899, 900, 907, 908, 911, 912, 913, 919, 920, 924, 925, 926, 927, 928, 931, 932, 933, 934, 935, 938, 944, 962, 967, 968, 974, 1011, 1044, 1057, 1097, 1100, 1117, 1205, 1234, 1239, 1287, 1288, 1289, 1302, 1303, 1327, 1330, 1338, 1339, 1344, 1351, 1362, 1367, 1372, 1373, 1374, 1375, 1376, 1377, 1389, 1390, 1393], "name_gener": [316, 352], "named_agg": [331, 938], "named_bi": [241, 352, 884, 962], "named_expr": [290, 291, 326, 327, 352, 743, 823, 827, 912, 913, 931, 932, 962], "named_fram": [1375, 1390], "nameless": 136, "namespac": [1, 152, 191, 193, 194, 195, 199, 351, 352, 355, 739, 824, 844, 857, 960, 961, 966, 1362, 1367, 1393], "namespaceinfo": [193, 203], "nan": [136, 181, 209, 224, 231, 310, 311, 352, 447, 448, 496, 497, 506, 517, 519, 527, 536, 537, 538, 539, 543, 590, 593, 611, 625, 626, 627, 628, 655, 681, 752, 775, 845, 874, 879, 962, 980, 984, 1061, 1062, 1127, 1156, 1157, 1222, 1223, 1248, 1270, 1343, 1344, 1362, 1393], "nan_as_nul": 209, "nan_max": [845, 1362], "nan_min": [845, 1362], "nan_to_nul": [136, 352, 962, 1362], "nana": 1385, "nanmax": [625, 626, 845, 1222, 1223, 1362], "nanosecond": [55, 89, 242, 257, 284, 322, 352, 472, 477, 478, 488, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 787, 788, 789, 832, 833, 845, 885, 890, 910, 962, 1090, 1095, 1096, 1106, 1108, 1120, 1362, 1386], "nansum": [655, 845, 1248, 1362], "nativ": [11, 39, 150, 152, 155, 156, 158, 162, 167, 201, 254, 261, 286, 287, 306, 310, 338, 352, 592, 807, 824, 845, 851, 920, 945, 962, 966, 1213, 1343, 1362, 1366, 1390, 1393], "natur": [588, 845, 1210, 1362, 1378, 1384], "ndarrai": [135, 207, 233, 280, 310, 352, 515, 676, 845, 881, 907, 962, 970, 1134, 1261, 1262, 1343, 1362], "ndjson": [50, 160, 962], "ne": [628, 845, 1225, 1362], "ne_miss": [233, 280, 352, 845, 881, 907, 962, 1116, 1362], "nearest": [59, 220, 257, 278, 344, 352, 430, 511, 527, 641, 664, 665, 818, 845, 871, 890, 905, 951, 962, 1042, 1058, 1132, 1146, 1235, 1253, 1362, 1384], "nearest_pow2": 59, "necessari": [38, 39, 48, 56, 98, 155, 167, 310, 352, 962, 1343, 1362], "need": [65, 100, 109, 138, 150, 151, 153, 162, 165, 168, 170, 205, 242, 284, 287, 296, 352, 355, 583, 653, 679, 714, 715, 716, 732, 789, 817, 820, 836, 845, 885, 910, 962, 1267, 1302, 1303, 1304, 1320, 1362, 1367, 1393], "neg": [14, 71, 72, 73, 74, 150, 151, 156, 158, 162, 172, 244, 260, 284, 295, 297, 303, 329, 352, 396, 576, 577, 637, 638, 653, 678, 685, 705, 718, 729, 845, 910, 916, 918, 934, 935, 962, 968, 1006, 1142, 1167, 1198, 1199, 1232, 1266, 1274, 1293, 1306, 1317, 1334, 1362], "negat": [630, 845, 1227, 1362], "neither": [138, 155, 161, 288, 352, 401, 583, 1011, 1205], "nest": [56, 138, 146, 182, 183, 228, 352, 857, 1118, 1362, 1390, 1393], "nesting_level": 182, "net": [700, 1288], "netherland": [257, 352, 890, 962], "netsuite_format": 198, "never": [38, 48, 152, 256, 257, 285, 352, 889, 890, 962], "new": [39, 40, 41, 42, 53, 54, 165, 205, 210, 236, 246, 247, 261, 272, 273, 276, 281, 316, 318, 320, 321, 326, 327, 352, 363, 453, 504, 514, 516, 527, 617, 618, 633, 647, 648, 652, 711, 714, 715, 720, 721, 739, 741, 841, 845, 857, 883, 908, 926, 928, 931, 932, 945, 962, 972, 974, 1067, 1124, 1135, 1226, 1239, 1241, 1242, 1246, 1302, 1303, 1308, 1309, 1327, 1330, 1339, 1362, 1390, 1392], "new_column": [150, 151, 155, 165], "new_dai": 475, "new_dat": 472, "new_df": [321, 352, 928, 962], "new_fil": [36, 38, 43, 44, 47, 352], "new_from_index": 1362, "new_id": [316, 352], "new_lf": [928, 962], "new_tabl": 1392, "new_valu": [779, 780, 793, 819], "new_york": 787, "newli": 57, "newlin": [46, 150, 160, 165, 169, 352], "next": [19, 59, 242, 257, 284, 322, 352, 404, 449, 472, 477, 490, 643, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1014, 1063, 1090, 1095, 1108, 1236, 1362], "next_batch": 151, "next_pow2": 59, "nfc": [711, 1299, 1385], "nfd": [711, 1299, 1385], "nfkc": [711, 1299, 1385], "nfkd": [711, 1299, 1385], "nfruit": 729, "nl": [449, 461, 770, 1063, 1075], "nnel_id": 138, "no1": 968, "no_default": [237, 352, 647, 648, 716, 845, 1241, 1242, 1304, 1362], "no_optim": [63, 866, 895, 904, 962], "nodataerror": [150, 151, 155, 161, 165], "nodd": [699, 1287], "node": [862, 866, 887, 895, 899, 904, 908, 962], "nodefault": [237, 352, 647, 648, 716, 845, 1241, 1242, 1304, 1362], "non": [4, 5, 38, 40, 41, 48, 57, 72, 73, 136, 147, 172, 212, 219, 255, 267, 284, 290, 291, 295, 315, 316, 319, 321, 326, 327, 352, 404, 421, 422, 426, 431, 435, 436, 449, 476, 513, 529, 583, 591, 592, 598, 633, 634, 643, 647, 648, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 693, 700, 709, 714, 715, 716, 736, 738, 743, 750, 751, 761, 763, 771, 772, 773, 774, 776, 778, 782, 789, 809, 811, 814, 821, 822, 823, 827, 829, 845, 861, 870, 899, 910, 912, 913, 916, 924, 927, 928, 931, 932, 962, 968, 1014, 1031, 1036, 1045, 1050, 1051, 1058, 1063, 1094, 1133, 1148, 1205, 1213, 1229, 1241, 1242, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1266, 1281, 1288, 1297, 1302, 1303, 1324, 1326, 1343, 1347, 1362, 1382, 1390], "non_exist": [476, 1094], "non_numer": [38, 48, 352, 962], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 66, 69, 72, 73, 74, 75, 76, 84, 88, 98, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 195, 196, 197, 199, 200, 201, 205, 207, 208, 214, 219, 220, 224, 225, 231, 232, 233, 235, 237, 240, 242, 243, 248, 252, 256, 257, 259, 261, 264, 267, 272, 273, 276, 280, 284, 285, 288, 292, 295, 297, 298, 304, 305, 307, 309, 310, 311, 314, 316, 317, 318, 319, 320, 321, 322, 333, 337, 352, 364, 366, 367, 379, 380, 381, 388, 389, 401, 404, 424, 426, 427, 428, 431, 435, 436, 437, 440, 442, 447, 448, 456, 472, 475, 476, 482, 497, 498, 499, 500, 501, 502, 505, 506, 507, 513, 520, 521, 523, 525, 527, 528, 529, 536, 537, 538, 539, 544, 546, 547, 554, 560, 562, 564, 571, 572, 573, 574, 575, 577, 583, 591, 592, 603, 606, 607, 608, 610, 615, 628, 629, 630, 631, 633, 634, 640, 643, 644, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 678, 679, 680, 681, 685, 686, 690, 691, 693, 695, 696, 697, 700, 703, 705, 706, 707, 708, 709, 710, 712, 713, 718, 720, 721, 722, 723, 724, 725, 728, 729, 730, 731, 733, 735, 738, 739, 740, 741, 742, 749, 756, 761, 762, 763, 765, 771, 772, 773, 774, 775, 776, 778, 782, 784, 785, 786, 787, 788, 789, 791, 792, 793, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 814, 820, 821, 822, 827, 829, 831, 832, 833, 835, 845, 864, 865, 867, 870, 871, 874, 875, 877, 879, 880, 881, 885, 888, 889, 890, 893, 895, 899, 902, 906, 907, 910, 914, 916, 917, 918, 919, 925, 926, 927, 928, 933, 936, 937, 940, 944, 945, 954, 955, 962, 967, 968, 970, 971, 975, 976, 978, 985, 986, 990, 991, 998, 999, 1011, 1014, 1022, 1027, 1030, 1033, 1036, 1037, 1038, 1044, 1045, 1050, 1051, 1057, 1058, 1060, 1061, 1062, 1070, 1078, 1079, 1080, 1084, 1093, 1094, 1100, 1114, 1116, 1119, 1120, 1121, 1122, 1126, 1127, 1128, 1130, 1133, 1139, 1141, 1143, 1145, 1146, 1147, 1148, 1153, 1158, 1159, 1162, 1163, 1164, 1166, 1168, 1169, 1172, 1176, 1182, 1184, 1186, 1193, 1194, 1195, 1196, 1197, 1199, 1205, 1213, 1214, 1215, 1216, 1217, 1225, 1228, 1234, 1235, 1236, 1241, 1242, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1261, 1262, 1263, 1266, 1269, 1270, 1273, 1274, 1277, 1278, 1279, 1281, 1283, 1284, 1285, 1288, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1300, 1301, 1306, 1308, 1309, 1310, 1311, 1312, 1313, 1316, 1317, 1318, 1319, 1321, 1323, 1326, 1329, 1337, 1339, 1340, 1341, 1343, 1344, 1345, 1351, 1352, 1362, 1371, 1373, 1374, 1375, 1377, 1380, 1382, 1385, 1386, 1390], "nonexist": [476, 1094], "nor": [155, 161, 288, 352], "normal": [40, 146, 242, 352, 495, 541, 654, 684, 756, 845, 885, 962, 1114, 1163, 1247, 1273, 1351, 1362, 1383], "normalised_scor": 152, "norowsreturnederror": [285, 352], "north": 75, "not_": [326, 352, 835, 845, 931, 962, 968, 1362], "not_c": [326, 352, 931, 962], "notabl": 152, "notat": [12, 41, 352], "note": [4, 11, 21, 40, 41, 47, 56, 57, 64, 65, 71, 72, 74, 89, 97, 98, 131, 132, 133, 135, 137, 138, 146, 150, 152, 153, 154, 155, 159, 160, 161, 165, 166, 167, 169, 171, 174, 176, 179, 181, 185, 187, 205, 209, 216, 218, 220, 221, 224, 228, 231, 233, 242, 243, 252, 253, 254, 256, 257, 261, 268, 272, 275, 276, 280, 281, 284, 285, 286, 287, 292, 295, 299, 306, 309, 311, 314, 316, 317, 319, 321, 322, 326, 328, 329, 352, 396, 409, 424, 426, 427, 428, 431, 439, 440, 444, 447, 448, 454, 469, 470, 472, 477, 482, 490, 499, 506, 512, 514, 521, 529, 536, 537, 555, 558, 576, 583, 592, 606, 607, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 647, 648, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 678, 680, 684, 690, 691, 692, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 714, 715, 716, 718, 723, 724, 725, 728, 729, 736, 738, 739, 745, 752, 761, 763, 770, 779, 784, 785, 787, 788, 789, 793, 803, 805, 817, 819, 820, 824, 832, 833, 835, 836, 841, 845, 856, 867, 871, 872, 874, 879, 881, 885, 890, 900, 907, 908, 910, 914, 916, 917, 919, 920, 925, 927, 928, 931, 934, 935, 962, 966, 968, 1006, 1019, 1036, 1037, 1045, 1054, 1055, 1058, 1061, 1062, 1068, 1087, 1088, 1090, 1095, 1100, 1108, 1118, 1120, 1127, 1141, 1148, 1177, 1180, 1198, 1213, 1241, 1242, 1246, 1254, 1261, 1263, 1266, 1268, 1273, 1278, 1279, 1280, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1297, 1298, 1302, 1303, 1304, 1306, 1311, 1312, 1313, 1316, 1317, 1324, 1326, 1333, 1344, 1346, 1362, 1371, 1372, 1376, 1377, 1385, 1388, 1390], "noth": [21, 699, 708, 1287, 1296], "notic": [152, 233, 352, 881, 962, 1362], "notimplementederror": [10, 209], "now": [57, 150, 155, 284, 310, 352, 449, 600, 732, 770, 910, 962, 1063, 1320, 1343, 1362], "np": [96, 135, 207, 233, 280, 310, 352, 515, 591, 676, 845, 881, 907, 962, 970, 1134, 1151, 1154, 1156, 1157, 1261, 1262, 1362], "npt": [207, 970], "nr": [335, 346, 942, 953], "nth": [236, 352, 516, 721, 841, 845, 883, 962, 1135, 1309, 1362], "nthe": [699, 1287], "nthose": [699, 1287], "nu": 696, "null": [17, 38, 40, 47, 48, 51, 57, 65, 72, 133, 134, 137, 146, 150, 151, 160, 162, 165, 169, 170, 171, 178, 181, 185, 209, 212, 213, 214, 219, 220, 224, 225, 227, 232, 233, 235, 248, 256, 264, 265, 266, 273, 276, 278, 280, 295, 298, 300, 301, 302, 305, 310, 311, 315, 318, 321, 323, 326, 333, 352, 364, 366, 367, 377, 380, 381, 388, 389, 396, 397, 404, 406, 409, 421, 422, 423, 424, 426, 427, 428, 431, 435, 436, 437, 440, 445, 447, 448, 472, 475, 476, 483, 484, 485, 486, 487, 488, 489, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 513, 520, 525, 527, 528, 533, 536, 537, 538, 539, 544, 546, 547, 553, 554, 557, 558, 560, 562, 563, 564, 572, 573, 574, 575, 576, 578, 583, 591, 592, 615, 628, 629, 630, 631, 633, 634, 643, 644, 648, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 678, 679, 681, 686, 687, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 712, 713, 718, 720, 721, 722, 728, 729, 731, 733, 738, 739, 740, 741, 742, 749, 750, 751, 760, 761, 762, 763, 768, 771, 772, 773, 774, 776, 778, 782, 786, 791, 802, 805, 809, 811, 814, 821, 822, 827, 829, 835, 845, 861, 864, 870, 871, 874, 875, 880, 881, 888, 889, 902, 907, 916, 919, 924, 926, 928, 931, 933, 940, 962, 968, 975, 976, 987, 990, 991, 998, 999, 1006, 1007, 1014, 1016, 1019, 1031, 1032, 1033, 1036, 1037, 1038, 1044, 1045, 1050, 1051, 1059, 1061, 1062, 1093, 1094, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1116, 1117, 1119, 1120, 1121, 1122, 1126, 1128, 1129, 1133, 1139, 1140, 1145, 1146, 1147, 1153, 1158, 1159, 1160, 1166, 1168, 1169, 1172, 1175, 1176, 1179, 1180, 1182, 1184, 1185, 1186, 1195, 1197, 1198, 1200, 1205, 1213, 1225, 1228, 1229, 1242, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1266, 1270, 1275, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1300, 1301, 1306, 1308, 1309, 1310, 1316, 1317, 1319, 1321, 1326, 1329, 1340, 1343, 1344, 1345, 1347, 1362, 1374, 1378, 1380, 1382, 1385, 1386, 1388, 1390, 1391, 1393], "null_behavior": [445, 553, 845, 1059, 1175, 1362], "null_count": [47, 51, 220, 225, 352, 441, 845, 871, 962, 1056, 1058, 1362], "null_equ": [227, 352, 1117, 1362], "null_on_oob": [388, 558, 560, 998, 1180, 1182], "null_prob": [178, 181, 185], "null_valu": [38, 48, 150, 151, 165, 352, 962], "nullabl": [40, 352], "nullbehavior": [445, 553, 845, 1059, 1175, 1362], "nullif": 1383, "nulls_equ": [256, 352, 533, 845, 889, 962, 1153, 1362], "nulls_last": [298, 352, 377, 397, 578, 633, 686, 687, 768, 845, 919, 962, 987, 1007, 1160, 1200, 1275, 1362], "num": [14, 41, 313, 352, 529, 845, 1148, 1362], "num_row": 209, "num_sampl": [803, 804], "number": [11, 12, 13, 14, 15, 18, 26, 38, 39, 41, 43, 47, 48, 49, 50, 51, 56, 57, 71, 72, 73, 89, 98, 119, 131, 133, 134, 135, 137, 140, 146, 150, 151, 152, 153, 155, 159, 160, 161, 162, 165, 168, 169, 170, 172, 179, 181, 184, 186, 187, 188, 195, 212, 214, 219, 228, 229, 231, 232, 240, 244, 245, 254, 255, 260, 271, 272, 284, 288, 295, 300, 303, 315, 320, 323, 325, 333, 335, 337, 346, 352, 378, 394, 396, 401, 404, 413, 414, 415, 416, 418, 419, 421, 422, 427, 435, 441, 442, 445, 449, 452, 460, 463, 465, 467, 468, 478, 491, 492, 494, 498, 499, 500, 501, 505, 506, 507, 513, 522, 536, 537, 544, 545, 553, 561, 564, 569, 571, 576, 579, 581, 583, 585, 633, 637, 640, 643, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 680, 689, 705, 707, 709, 710, 714, 718, 720, 721, 729, 732, 746, 750, 751, 757, 770, 775, 776, 777, 789, 797, 802, 803, 804, 821, 822, 826, 830, 834, 845, 861, 864, 870, 878, 879, 880, 886, 894, 904, 916, 921, 923, 924, 929, 930, 940, 942, 944, 953, 962, 967, 1004, 1006, 1011, 1014, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1037, 1044, 1050, 1056, 1057, 1059, 1063, 1066, 1074, 1077, 1082, 1085, 1086, 1096, 1109, 1110, 1112, 1118, 1119, 1120, 1121, 1122, 1126, 1127, 1128, 1133, 1142, 1166, 1167, 1175, 1183, 1186, 1191, 1193, 1198, 1203, 1205, 1219, 1220, 1234, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1266, 1269, 1277, 1293, 1295, 1297, 1298, 1302, 1306, 1308, 1309, 1317, 1320, 1334, 1347, 1352, 1362, 1378, 1381, 1384, 1393], "number_of_two": [385, 552], "numbers_decim": 732, "numer": [11, 17, 38, 41, 48, 154, 166, 213, 222, 257, 310, 311, 319, 320, 352, 361, 409, 423, 431, 512, 529, 588, 612, 614, 638, 646, 679, 681, 701, 738, 744, 752, 803, 845, 857, 863, 873, 890, 927, 962, 968, 1019, 1032, 1045, 1058, 1148, 1240, 1267, 1270, 1289, 1326, 1343, 1362, 1384, 1393], "numeric_dtyp": 1393, "numericliter": [431, 803, 804, 845, 1045, 1362], "numpi": [96, 104, 135, 173, 207, 218, 254, 286, 287, 306, 310, 311, 352, 591, 625, 626, 655, 845, 962, 970, 1151, 1154, 1156, 1157, 1222, 1223, 1248, 1343, 1344, 1362], "nworld": 723, "o": [156, 168, 410, 421, 422, 441, 698, 750, 751, 845, 1020, 1031, 1056, 1286, 1311, 1347, 1362, 1375], "oauth": 167, "obj": 968, "object": [10, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 65, 88, 107, 131, 132, 133, 138, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 179, 181, 182, 208, 209, 216, 221, 228, 241, 242, 257, 259, 274, 284, 287, 292, 299, 309, 310, 311, 352, 444, 606, 784, 785, 787, 788, 805, 824, 832, 833, 845, 857, 866, 872, 877, 885, 890, 893, 904, 910, 917, 920, 959, 962, 968, 971, 1118, 1337, 1362, 1372, 1374, 1377, 1390, 1392], "observ": [256, 352, 442, 498, 499, 500, 501, 640, 845, 889, 962, 1057, 1119, 1120, 1121, 1122, 1234, 1362], "obtain": 583, "obvious": 741, "occur": [41, 63, 105, 114, 120, 258, 352, 385, 552, 613, 643, 845, 866, 877, 891, 904, 917, 962, 995, 1174, 1218, 1236, 1343, 1362], "occurr": [523, 525, 532, 535, 756, 845, 1143, 1145, 1152, 1155, 1351, 1362], "oct": 1385, "octet_length": 1383, "octob": [482, 1100, 1385], "od": [161, 857], "odbc": [39, 152, 352], "odd": 699, "odi": [702, 704, 1292], "off": [63, 64, 150, 151, 165, 256, 257, 352, 449, 461, 770, 866, 867, 877, 889, 890, 895, 904, 917, 962, 1063, 1075], "offer": [275, 352, 637, 845, 903, 962, 1386, 1390], "offic": [41, 352], "offset": [74, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 236, 242, 284, 297, 328, 329, 352, 449, 450, 458, 469, 470, 472, 477, 490, 516, 559, 577, 653, 685, 703, 704, 718, 731, 845, 883, 885, 910, 918, 934, 935, 962, 1063, 1064, 1072, 1087, 1088, 1090, 1095, 1108, 1135, 1181, 1199, 1274, 1291, 1292, 1306, 1319, 1362, 1389], "offset_bi": 789, "often": [153, 205, 242, 284, 352, 385, 552, 646, 653, 845, 885, 910, 962, 995, 1174, 1240, 1362, 1377, 1390], "ok": 583, "old": [40, 281, 352, 647, 648, 845, 908, 962, 1241, 1242, 1362], "old_tabl": 1392, "older": [47, 51, 352, 962], "oldw": 724, "omit": [28, 134, 138, 155, 161, 179, 205, 272, 287, 309, 314, 352, 784, 787, 799, 800, 832, 833, 968, 1391, 1392], "onc": [63, 130, 150, 151, 187, 261, 286, 288, 331, 352, 571, 591, 592, 675, 726, 727, 845, 862, 938, 962, 1193, 1213, 1260, 1314, 1315, 1362, 1375], "one": [21, 38, 39, 41, 48, 57, 65, 111, 131, 133, 134, 135, 136, 137, 150, 151, 155, 159, 160, 161, 165, 169, 184, 186, 205, 213, 221, 224, 232, 240, 241, 242, 254, 256, 258, 259, 267, 276, 284, 285, 286, 292, 295, 310, 313, 319, 332, 352, 362, 396, 442, 444, 507, 508, 512, 515, 518, 520, 576, 583, 588, 606, 616, 617, 619, 621, 623, 624, 633, 652, 653, 678, 686, 699, 700, 701, 716, 739, 771, 775, 777, 784, 787, 807, 825, 835, 841, 845, 863, 872, 874, 875, 880, 881, 884, 885, 889, 891, 899, 906, 910, 914, 916, 927, 933, 939, 962, 977, 1006, 1011, 1057, 1128, 1139, 1140, 1198, 1205, 1210, 1234, 1246, 1266, 1287, 1288, 1289, 1304, 1327, 1343, 1362, 1377, 1378, 1380, 1384, 1385, 1392], "oneormoredatatyp": [41, 179, 352], "ones": [657, 659, 661, 663, 665, 668, 670, 672, 845, 968], "onf": [718, 1306], "onli": [1, 5, 11, 14, 21, 31, 38, 39, 41, 48, 56, 57, 62, 63, 65, 98, 130, 132, 145, 147, 150, 151, 152, 155, 156, 158, 160, 162, 165, 168, 169, 170, 171, 174, 175, 176, 177, 181, 185, 195, 205, 224, 225, 228, 230, 233, 242, 243, 254, 257, 258, 261, 276, 284, 286, 287, 306, 308, 309, 310, 321, 322, 338, 352, 362, 364, 366, 378, 430, 431, 444, 449, 461, 472, 480, 482, 502, 511, 521, 591, 592, 599, 600, 616, 617, 618, 619, 620, 621, 622, 623, 624, 633, 645, 692, 702, 704, 716, 754, 770, 807, 845, 869, 872, 874, 875, 876, 885, 890, 891, 910, 911, 917, 928, 930, 945, 962, 968, 975, 976, 977, 1042, 1045, 1063, 1075, 1090, 1100, 1118, 1125, 1132, 1141, 1213, 1238, 1280, 1290, 1292, 1304, 1337, 1340, 1343, 1362, 1371, 1374, 1390, 1391, 1393], "onlin": [230, 352, 1125, 1362], "ont": [702, 704, 1290, 1292], "onto": 181, "oof": [717, 1305, 1380, 1385], "op": [21, 150, 151, 185, 281, 352, 599, 646, 845, 893, 908, 962, 1240, 1362], "opac": [352, 355, 1362, 1367], "opaqu": 945, "open": [41, 53, 148, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 221, 352, 444, 845, 872, 962], "openoffic": 161, "openpyxl": [155, 173], "oper": [4, 41, 56, 65, 98, 107, 110, 117, 124, 131, 133, 134, 135, 136, 137, 147, 152, 215, 230, 233, 235, 241, 247, 259, 261, 268, 272, 274, 275, 276, 279, 280, 282, 284, 287, 288, 293, 295, 304, 310, 311, 316, 319, 320, 330, 331, 352, 361, 362, 365, 396, 436, 437, 438, 439, 440, 441, 496, 497, 512, 514, 517, 519, 543, 571, 572, 573, 574, 575, 576, 583, 590, 609, 612, 614, 615, 616, 617, 619, 621, 623, 624, 627, 628, 629, 632, 633, 638, 645, 675, 678, 744, 752, 759, 760, 762, 773, 774, 778, 790, 824, 845, 857, 865, 869, 871, 876, 881, 884, 889, 899, 900, 907, 911, 915, 916, 920, 927, 930, 938, 962, 1006, 1046, 1051, 1052, 1053, 1054, 1055, 1056, 1115, 1116, 1125, 1136, 1138, 1165, 1193, 1194, 1195, 1196, 1197, 1198, 1212, 1224, 1225, 1238, 1260, 1266, 1302, 1337, 1342, 1343, 1344, 1362, 1381, 1389, 1390], "operand": [752, 845], "opp": 968, "oppos": 770, "opposit": [295, 352, 396, 576, 678, 845, 916, 962, 1006, 1198, 1266, 1362], "opt": [314, 352], "optim": [48, 49, 50, 51, 63, 64, 130, 150, 156, 160, 162, 165, 167, 168, 169, 170, 254, 259, 275, 279, 286, 317, 352, 862, 866, 867, 877, 895, 904, 917, 925, 934, 935, 936, 945, 962, 1041, 1261, 1362], "optimis": [152, 261, 287, 338, 352, 962, 966, 1213, 1263, 1362, 1393], "optimist": 15, "option": [2, 3, 4, 5, 6, 7, 31, 34, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 55, 57, 63, 64, 73, 75, 141, 150, 152, 153, 154, 155, 156, 158, 160, 162, 165, 166, 167, 168, 169, 170, 171, 173, 178, 179, 180, 181, 184, 185, 186, 195, 196, 221, 237, 242, 252, 257, 267, 292, 299, 305, 316, 319, 321, 352, 409, 444, 449, 541, 599, 600, 606, 633, 654, 655, 656, 658, 660, 662, 664, 667, 669, 671, 684, 692, 702, 704, 716, 718, 756, 827, 835, 845, 857, 866, 867, 872, 877, 885, 889, 890, 899, 904, 914, 917, 920, 927, 928, 937, 962, 968, 1019, 1063, 1163, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1273, 1280, 1290, 1292, 1304, 1306, 1339, 1351, 1362, 1380, 1385, 1392], "optional_memb": [533, 845, 1153, 1362], "or_": 845, "oracl": 153, "orang": [217, 333, 334, 336, 337, 339, 340, 342, 344, 345, 352, 422, 751, 845, 940, 941, 943, 944, 946, 947, 949, 951, 952, 1385], "orc": 198, "order": [11, 41, 48, 49, 50, 51, 54, 57, 63, 69, 134, 150, 152, 165, 172, 174, 175, 176, 177, 212, 216, 217, 224, 225, 226, 233, 241, 242, 256, 258, 268, 274, 275, 276, 280, 284, 286, 288, 289, 293, 298, 309, 310, 315, 317, 321, 322, 352, 377, 397, 402, 421, 422, 447, 448, 508, 554, 571, 578, 584, 633, 638, 643, 653, 675, 676, 677, 686, 687, 717, 724, 725, 726, 727, 741, 750, 751, 753, 754, 756, 768, 824, 835, 845, 856, 861, 869, 874, 875, 876, 881, 884, 885, 889, 891, 899, 900, 907, 910, 911, 915, 919, 920, 924, 925, 928, 962, 966, 967, 968, 987, 1007, 1012, 1031, 1040, 1061, 1062, 1129, 1160, 1176, 1193, 1200, 1206, 1232, 1236, 1244, 1260, 1262, 1264, 1275, 1305, 1330, 1347, 1348, 1349, 1351, 1362, 1371, 1374, 1380, 1389, 1390, 1393], "order_bi": [633, 845], "ordin": [473, 643, 845, 1091, 1236, 1362, 1391], "ordinal_dai": [457, 492], "org": [21, 43, 44, 132, 152, 153, 156, 158, 207, 208, 209, 218, 352, 607, 711, 917, 962, 970, 971, 1299], "orient": [58, 60, 105, 135, 137, 272, 352, 962, 1371], "origin": [57, 150, 151, 165, 224, 225, 233, 280, 317, 352, 447, 448, 476, 477, 490, 508, 554, 592, 616, 633, 645, 646, 647, 648, 649, 651, 693, 699, 708, 766, 767, 845, 874, 875, 881, 907, 925, 962, 1061, 1062, 1094, 1095, 1108, 1129, 1176, 1240, 1241, 1242, 1243, 1245, 1281, 1287, 1296, 1362], "orjson": 146, "orld": 1312, "orson": 146, "other": [1, 21, 37, 41, 47, 64, 65, 131, 149, 150, 151, 152, 155, 165, 170, 174, 175, 176, 177, 225, 227, 230, 233, 256, 257, 258, 267, 268, 276, 280, 285, 287, 290, 291, 314, 319, 321, 324, 326, 327, 350, 352, 355, 361, 365, 367, 377, 378, 431, 446, 482, 490, 496, 497, 508, 512, 517, 519, 529, 533, 543, 550, 572, 573, 574, 575, 590, 596, 602, 612, 614, 627, 628, 632, 647, 648, 680, 687, 716, 743, 744, 749, 752, 759, 761, 763, 768, 771, 772, 773, 774, 782, 789, 809, 811, 814, 823, 827, 829, 845, 857, 867, 881, 889, 890, 891, 899, 900, 906, 907, 912, 913, 917, 927, 928, 931, 932, 933, 962, 968, 977, 1045, 1060, 1100, 1108, 1115, 1116, 1117, 1125, 1136, 1138, 1153, 1165, 1172, 1194, 1195, 1196, 1197, 1212, 1224, 1225, 1241, 1242, 1345, 1353, 1361, 1362, 1367, 1377, 1390], "other_df": [256, 352], "other_lf": [889, 962], "otherwis": [39, 152, 155, 162, 168, 180, 183, 187, 237, 261, 268, 287, 290, 309, 314, 338, 352, 401, 406, 427, 431, 442, 498, 499, 500, 501, 583, 592, 603, 633, 637, 638, 640, 645, 681, 691, 694, 698, 703, 705, 710, 714, 715, 718, 729, 756, 760, 789, 792, 801, 807, 835, 845, 900, 912, 945, 962, 967, 1011, 1016, 1037, 1045, 1057, 1119, 1120, 1121, 1122, 1205, 1213, 1232, 1234, 1238, 1261, 1263, 1270, 1279, 1282, 1286, 1291, 1293, 1298, 1302, 1303, 1306, 1317, 1351, 1362, 1382], "our": 210, "out": [8, 15, 39, 48, 49, 50, 51, 52, 53, 54, 112, 138, 141, 170, 173, 181, 185, 233, 284, 287, 352, 388, 406, 558, 560, 691, 694, 703, 835, 881, 910, 962, 998, 1016, 1180, 1182, 1279, 1282, 1291, 1388], "outcom": [633, 845], "outer": [57, 321, 352, 928, 962], "outermost": 56, "outlin": 7, "output": [0, 8, 31, 38, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 212, 220, 254, 261, 265, 268, 274, 276, 286, 290, 292, 302, 315, 322, 326, 352, 364, 366, 389, 421, 422, 427, 442, 482, 562, 583, 591, 592, 603, 606, 617, 640, 647, 690, 706, 710, 750, 751, 756, 760, 761, 762, 763, 773, 774, 775, 793, 803, 804, 806, 807, 811, 829, 835, 845, 857, 861, 871, 877, 895, 899, 900, 912, 914, 924, 931, 945, 962, 975, 976, 999, 1031, 1037, 1057, 1100, 1184, 1213, 1234, 1278, 1294, 1298, 1347, 1351, 1362], "output_path": [607, 917, 962], "outsid": [55, 167, 431, 845, 1045, 1362], "over": [51, 53, 65, 140, 150, 151, 152, 155, 161, 165, 170, 181, 182, 212, 230, 253, 254, 255, 261, 268, 285, 286, 287, 299, 315, 316, 330, 338, 352, 356, 421, 422, 441, 444, 499, 507, 591, 592, 603, 605, 606, 607, 608, 609, 617, 618, 643, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 750, 751, 779, 780, 793, 806, 807, 819, 824, 845, 861, 866, 877, 900, 904, 917, 920, 924, 937, 945, 959, 962, 968, 1031, 1056, 1120, 1125, 1213, 1249, 1250, 1252, 1256, 1347, 1362, 1390], "overflow": [423, 439, 440, 733, 745, 845, 863, 962, 1032, 1054, 1055, 1321, 1333, 1362], "overhead": [54, 56, 98, 165, 168, 169, 170], "overlap": [693, 700, 702, 704, 1281, 1288, 1290, 1292], "overrid": [1, 41, 131, 133, 134, 135, 136, 137, 150, 152, 153, 155, 159, 160, 161, 167, 169, 178, 179, 185, 187, 352, 962], "overridden": [41, 131, 133, 135, 137, 159, 160, 169, 187, 352, 962], "overview": [352, 845, 857, 962, 1362, 1389, 1393], "overwrit": [15, 39, 40, 42, 51, 54, 131, 133, 134, 135, 137, 141, 146, 150, 151, 159, 160, 165, 169, 209, 321, 352, 363, 743, 845, 928, 962], "overwrite_schema": [40, 352], "ow": 723, "own": [835, 1343, 1362, 1393], "p": [59, 275, 352, 637, 827, 845, 903, 962, 968, 1291, 1293, 1375], "p13dt14h0": 482, "p1dt42": 482, "pa": [40, 131, 171, 352, 824], "pa_tabl": 824, "pacif": [450, 1064], "pack": [272, 352], "packag": [33, 34, 35, 147, 152, 352, 356, 449, 461, 770, 1063, 1075], "pad": [712, 713, 738, 1300, 1301, 1326], "pad_end": [713, 1301], "pad_start": [712, 738, 1300, 1326], "page": [47, 51, 156, 162, 168, 170, 352, 845, 857, 962, 1362, 1389], "pair": [131, 133, 134, 135, 137, 143, 159, 160, 169, 281, 352, 908, 962, 1393], "pairwis": [218, 352], "panda": [39, 132, 136, 146, 173, 233, 242, 280, 311, 317, 319, 352, 469, 470, 749, 824, 845, 881, 885, 907, 925, 927, 962, 1087, 1088, 1344, 1345, 1362, 1372, 1374, 1390], "pandas_df": 1390, "pane": [41, 352], "panic": 113, "pap": 1293, "papa": 705, "papai": [705, 1293], "papaya": [705, 718, 729, 1293, 1306, 1317], "parallel": [63, 65, 140, 153, 162, 170, 242, 257, 259, 275, 291, 327, 352, 441, 555, 756, 835, 845, 885, 889, 890, 913, 932, 945, 962, 1056, 1177, 1351, 1362], "parallelis": [261, 338, 352, 1213, 1362], "parallelstrategi": [162, 170], "param": [41, 131, 133, 134, 135, 137, 150, 151, 159, 160, 165, 169, 180, 181, 185, 285, 352, 962], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 72, 73, 74, 75, 76, 84, 88, 96, 99, 105, 114, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 193, 194, 195, 209, 210, 212, 213, 214, 218, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 252, 254, 255, 256, 257, 258, 260, 261, 265, 267, 268, 271, 272, 274, 275, 276, 278, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 335, 337, 338, 344, 346, 352, 361, 363, 364, 365, 366, 367, 377, 384, 385, 388, 389, 396, 397, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 421, 422, 423, 424, 428, 431, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 449, 451, 453, 454, 459, 461, 472, 475, 476, 477, 478, 479, 481, 482, 490, 493, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 525, 527, 528, 529, 533, 541, 543, 545, 550, 551, 552, 553, 555, 558, 559, 560, 561, 562, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 590, 591, 592, 599, 600, 606, 607, 608, 612, 614, 617, 618, 619, 620, 621, 622, 627, 628, 632, 633, 634, 637, 638, 640, 641, 643, 645, 646, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 738, 739, 741, 743, 744, 746, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 841, 845, 861, 863, 864, 866, 867, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 883, 884, 885, 886, 889, 890, 891, 894, 895, 899, 900, 903, 904, 905, 906, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 937, 938, 942, 944, 945, 951, 953, 962, 967, 968, 972, 974, 975, 976, 977, 987, 994, 995, 998, 999, 1006, 1007, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1031, 1032, 1033, 1038, 1044, 1045, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1065, 1067, 1068, 1073, 1075, 1090, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1108, 1111, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 1129, 1133, 1134, 1135, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1153, 1160, 1163, 1167, 1172, 1173, 1174, 1175, 1177, 1180, 1181, 1182, 1183, 1184, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1203, 1204, 1205, 1206, 1213, 1225, 1229, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1269, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1323, 1326, 1327, 1330, 1334, 1337, 1338, 1339, 1340, 1341, 1343, 1344, 1347, 1348, 1351, 1352, 1353, 1362, 1371, 1372, 1373, 1374, 1375, 1377, 1382, 1385, 1390], "parameteris": 152, "parametr": 857, "paramount": [895, 962], "parent": [41, 76, 235, 352], "parenthes": 19, "parquet": [47, 51, 52, 53, 54, 162, 163, 164, 170, 198, 352, 857, 962], "parquetcompress": [47, 352], "parquetfieldoverwrit": [51, 962], "parquetmetadata": [47, 51, 352, 962], "pars": [38, 48, 149, 150, 151, 153, 155, 160, 161, 162, 165, 168, 169, 170, 212, 241, 290, 291, 295, 298, 315, 326, 327, 331, 352, 422, 431, 529, 633, 647, 648, 687, 707, 716, 732, 733, 743, 751, 761, 763, 768, 771, 772, 773, 774, 782, 795, 809, 811, 814, 823, 825, 827, 829, 835, 845, 861, 884, 912, 913, 916, 919, 924, 931, 932, 938, 962, 1045, 1148, 1241, 1242, 1266, 1295, 1320, 1321, 1362, 1371], "parseerror": [733, 1321], "parser": [150, 155], "part": [54, 131, 155, 205, 210, 309, 314, 352, 633, 700, 720, 721, 845, 933, 962, 972, 1288, 1308, 1309, 1385, 1386], "part_idx": 144, "parti": [591, 845], "partial": [134, 150, 165, 352, 962], "particip": [41, 352], "particular": [40, 150, 155, 156, 158, 212, 228, 315, 352, 421, 422, 750, 751, 845, 861, 924, 962, 1031, 1118, 1347, 1362], "partit": [47, 52, 53, 54, 153, 162, 166, 168, 170, 171, 255, 274, 352, 633, 845, 857], "partition_bi": [47, 151, 255, 352, 633, 845], "partition_chunk_size_byt": [47, 352], "partition_col": [47, 153, 352], "partition_df": 151, "partition_index": 197, "partition_num": 153, "partition_on": 153, "partition_rang": 153, "partitionbykei": [53, 54, 143, 144], "partitioned_object": [47, 352], "partitioningschem": [48, 49, 50, 51, 962], "partitionmax": 53, "partitionmaxs": [52, 54, 142], "partitionpart": [52, 53, 143, 144], "pass": [33, 34, 35, 37, 39, 40, 41, 47, 48, 49, 50, 51, 55, 57, 63, 64, 105, 130, 133, 146, 147, 149, 152, 153, 155, 162, 165, 168, 171, 174, 176, 179, 181, 183, 185, 212, 218, 222, 241, 242, 244, 257, 260, 274, 275, 276, 281, 284, 290, 295, 298, 303, 311, 314, 315, 322, 326, 331, 352, 396, 422, 449, 459, 461, 472, 476, 482, 505, 526, 576, 591, 592, 607, 633, 637, 647, 648, 653, 678, 687, 716, 723, 724, 725, 732, 751, 760, 768, 770, 795, 827, 835, 841, 845, 861, 866, 867, 873, 877, 884, 885, 887, 890, 895, 903, 904, 908, 910, 912, 916, 917, 919, 924, 931, 937, 938, 945, 962, 967, 1006, 1063, 1073, 1075, 1094, 1100, 1126, 1142, 1167, 1198, 1213, 1241, 1242, 1266, 1304, 1311, 1312, 1313, 1320, 1334, 1344, 1362, 1375, 1390], "pass_nam": [592, 845], "pass_name_to_appli": [147, 845], "password": [150, 153, 156, 158], "past": [37, 352, 895, 962], "pat": [703, 1291], "patch": 75, "path": [3, 6, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 142, 144, 147, 148, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 221, 292, 352, 444, 606, 607, 610, 677, 845, 872, 914, 917, 962, 966, 1264, 1296, 1362, 1393], "pathlib": [36, 38, 43, 44, 47, 165, 352], "pattern": [101, 150, 151, 155, 156, 160, 162, 165, 168, 169, 170, 254, 352, 424, 428, 601, 691, 692, 693, 696, 699, 700, 701, 702, 703, 704, 714, 715, 716, 722, 945, 968, 1033, 1038, 1261, 1263, 1279, 1280, 1281, 1284, 1287, 1288, 1289, 1290, 1291, 1292, 1302, 1303, 1304, 1310, 1362, 1385], "paya": 729, "pc": [906, 962], "pct": [181, 643, 845], "pct_chang": [845, 1362], "pct_valid": [643, 845], "pd": [132, 136, 749, 824, 845, 1344, 1345, 1362, 1372, 1390], "pd_df": 136, "pd_frame": 824, "pd_seri": 136, "pdsh": [140, 151], "pea": 705, "peak": [286, 352, 635, 636, 845, 1230, 1231, 1362], "peak_max": [845, 1362], "peak_min": [845, 1362], "pear": [705, 718, 729, 1293, 1306, 1317], "pearson": [218, 352, 541, 654, 684, 775, 845, 1163, 1247, 1273, 1362], "penalti": [728, 730, 731, 1316, 1318, 1319], "per": [15, 38, 41, 48, 147, 155, 179, 181, 212, 240, 272, 273, 276, 291, 298, 315, 327, 341, 343, 344, 352, 388, 422, 555, 558, 560, 591, 592, 616, 617, 619, 621, 623, 624, 687, 751, 756, 768, 845, 861, 913, 919, 924, 932, 948, 950, 951, 962, 998, 1177, 1180, 1182, 1351, 1362], "percent": [634, 845, 1229, 1362], "percentag": [178, 181, 185, 634, 845, 1229, 1362], "percentil": [220, 352, 643, 845, 871, 962, 1058, 1362], "perform": [39, 47, 49, 51, 57, 103, 108, 110, 115, 117, 124, 132, 150, 151, 152, 156, 160, 162, 165, 167, 168, 169, 170, 209, 233, 241, 242, 256, 257, 258, 261, 279, 280, 284, 286, 287, 310, 338, 352, 412, 417, 420, 426, 427, 512, 583, 591, 592, 633, 653, 692, 702, 704, 709, 710, 716, 728, 730, 731, 845, 881, 885, 889, 890, 891, 907, 910, 919, 934, 935, 962, 1022, 1027, 1030, 1036, 1037, 1213, 1280, 1290, 1292, 1297, 1298, 1304, 1316, 1318, 1319, 1343, 1362], "perhap": [316, 352], "period": [150, 151, 165, 242, 284, 352, 477, 498, 500, 501, 634, 653, 784, 785, 787, 788, 832, 833, 845, 885, 910, 962, 1095, 1119, 1121, 1122, 1229, 1362], "persist": 1377, "phase": [39, 320, 352], "philadelphia": [714, 715], "phone": [736, 1324], "physic": [56, 69, 98, 150, 151, 257, 276, 352, 749, 845, 862, 889, 890, 917, 962, 1039, 1345, 1362], "pi": [11, 443, 845, 1047, 1049, 1271, 1335, 1362, 1383, 1387], "pick": [182, 835], "pickl": [444, 845, 872, 962], "pip": [449, 461, 770, 1063, 1075], "pipe": [352, 845, 962], "pipelin": [155, 314, 352], "pitfal": 115, "pivot": [320, 352, 968], "pivot_long": [319, 352, 927, 962], "pivot_wid": [276, 352], "pivotagg": [276, 352], "pixel": [41, 352], "pk": [495, 845, 1114, 1362], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 65, 66, 75, 84, 88, 96, 97, 98, 102, 105, 106, 107, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 165, 166, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 187, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 841, 845, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 962, 967, 968, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1134, 1135, 1137, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1362, 1367, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1393], "pl_frame": 824, "place": [11, 12, 38, 48, 205, 223, 230, 246, 247, 276, 282, 287, 298, 324, 352, 356, 377, 389, 397, 562, 578, 686, 687, 768, 845, 919, 962, 977, 987, 999, 1007, 1125, 1184, 1200, 1237, 1275, 1362], "placehold": 794, "plai": [13, 774], "plain": [877, 906, 962], "plan": [63, 130, 257, 259, 352, 444, 845, 862, 866, 872, 877, 889, 890, 906, 914, 917, 962, 1392], "plan_stag": [917, 962], "plan_typ": [906, 962], "plane": [766, 767], "planstag": [917, 962], "plantypeprefer": [906, 962], "platform": 173, "ple": 1385, "pleas": [136, 152, 153, 233, 242, 280, 352, 356, 499, 776, 789, 845, 881, 885, 907, 962, 1120, 1362], "plenti": 968, "plot": [352, 904, 917, 962, 1362], "plu": [442, 588, 845, 1057, 1210, 1234, 1362, 1384], "plugin": [0, 845, 857], "plugin_path": 147, "point": [11, 12, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 77, 78, 79, 130, 141, 142, 143, 144, 145, 146, 154, 160, 162, 163, 165, 166, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 224, 231, 242, 258, 259, 299, 309, 314, 321, 352, 355, 356, 430, 441, 442, 447, 449, 461, 477, 478, 506, 511, 512, 523, 536, 537, 571, 592, 640, 654, 655, 657, 659, 661, 663, 665, 666, 668, 670, 672, 673, 675, 770, 772, 803, 804, 845, 866, 867, 874, 877, 879, 885, 891, 895, 904, 908, 920, 928, 936, 962, 1040, 1042, 1056, 1057, 1061, 1063, 1075, 1095, 1096, 1127, 1132, 1143, 1193, 1234, 1247, 1248, 1251, 1253, 1254, 1258, 1260, 1341, 1346, 1362, 1367, 1390], "pointer": [228, 352, 1118, 1362], "poison": [625, 626, 845, 1222, 1223, 1362], "pola": 352, "polar": [1, 203, 352, 355, 356, 844, 845, 851, 857, 962, 966, 967, 968, 1362, 1366, 1367, 1389, 1390, 1392], "polars_df": 1390, "polars_engine_affin": [48, 49, 50, 51, 63, 64, 866, 867, 877, 904, 917, 962], "polars_file_cache_ttl": [160, 165, 168, 169], "polars_hypothesis_profil": [184, 186], "polars_max_thread": 187, "polars_seri": 1390, "polars_verbos": [866, 877, 904, 917, 962], "polarsdatafram": 209, "polarsdataset": [314, 352], "polarsdatatyp": [66, 76, 84, 150, 151, 165, 178, 179, 180, 181, 182, 185, 213, 261, 309, 314, 352, 409, 423, 502, 591, 592, 647, 648, 707, 791, 793, 805, 806, 807, 817, 820, 836, 841, 845, 863, 962, 968, 1019, 1032, 1213, 1241, 1242, 1295, 1362], "polarsintegertyp": [765, 799, 800], "polarstemporaltyp": [728, 1316], "polarstyp": 65, "pool": [15, 64, 187, 188, 867, 962], "poor": 152, "pop2": [257, 352, 890, 962], "popul": [257, 352, 890, 962], "port": [39, 150, 152, 153, 156, 158, 352], "pos_a": 1385, "posit": [41, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197, 210, 222, 229, 241, 274, 290, 291, 295, 298, 318, 326, 327, 331, 352, 396, 498, 500, 501, 502, 576, 633, 638, 640, 678, 687, 701, 714, 715, 733, 743, 766, 767, 768, 771, 772, 773, 774, 791, 823, 827, 841, 845, 873, 878, 884, 912, 913, 916, 919, 926, 931, 932, 938, 962, 968, 1006, 1119, 1121, 1122, 1198, 1232, 1234, 1266, 1289, 1321, 1362, 1391], "position": 1362, "possibl": [41, 47, 51, 105, 107, 133, 134, 137, 150, 155, 178, 181, 185, 241, 254, 261, 286, 317, 338, 352, 589, 592, 603, 655, 721, 755, 845, 866, 877, 884, 904, 917, 919, 925, 962, 1213, 1248, 1309, 1362], "post": [57, 75, 906, 962], "postgresql": [39, 152, 153, 352, 633, 845, 1388], "potenti": [115, 117, 147, 165, 168, 169, 254, 285, 287, 352, 616, 714, 715, 869, 871, 876, 911, 930, 962, 1302, 1303], "pow": [845, 1362, 1383], "pow_n": 59, "power": [825, 1232, 1362, 1384], "powersofn": 59, "pre": [54, 583, 592, 640, 817, 820, 836, 845, 1234, 1362], "preced": [181, 968], "precis": [11, 12, 38, 41, 48, 55, 73, 152, 254, 286, 287, 306, 309, 314, 352, 451, 732, 803, 962, 968, 1065, 1320], "pred1": 835, "pred2": 835, "predefin": [276, 352], "predic": [40, 63, 145, 165, 168, 169, 170, 171, 213, 233, 252, 257, 258, 280, 285, 352, 423, 508, 758, 793, 835, 845, 866, 877, 881, 890, 891, 895, 904, 907, 908, 917, 934, 935, 962, 1129, 1261, 1263, 1362], "predicate_pushdown": [63, 866, 877, 895, 904, 917, 936, 962], "predict": [279, 322, 352], "prefer": [150, 151, 155, 156, 160, 162, 165, 186, 212, 230, 254, 261, 285, 286, 315, 338, 352, 421, 422, 502, 592, 750, 751, 835, 845, 861, 924, 962, 966, 1031, 1125, 1213, 1347, 1362, 1372, 1393], "prefilt": 170, "prefix": [40, 150, 151, 165, 205, 352, 363, 411, 428, 482, 601, 617, 620, 621, 623, 624, 722, 725, 726, 738, 845, 968, 1021, 1038, 1310, 1314, 1326], "prefix_": 620, "prefix_a": 620, "prefix_b": 620, "prefix_field": [618, 622], "presenc": [792, 801, 968], "present": [134, 181, 237, 352, 533, 607, 724, 725, 835, 845, 917, 962], "preserv": [224, 225, 233, 241, 256, 258, 261, 280, 310, 311, 321, 352, 447, 448, 449, 469, 470, 508, 554, 633, 647, 681, 698, 845, 874, 875, 881, 889, 891, 907, 928, 962, 1061, 1062, 1063, 1129, 1176, 1241, 1270, 1286, 1344, 1362], "pressur": [51, 150, 151, 160, 162, 165, 169, 170, 679, 845, 962, 1267, 1362], "presum": [591, 845], "prev_pow2": 59, "prevent": [310, 352, 363, 439, 440, 616, 745, 845, 962, 1054, 1055, 1333, 1362], "preview": [240, 352], "previou": [54, 59, 205, 352, 355, 449, 616, 617, 619, 621, 623, 624, 634, 741, 845, 1063, 1229, 1362, 1367], "previous": [2, 3], "price": [352, 355, 1393], "primari": [155, 966, 1390, 1393], "primarili": 1, "primit": [40, 352, 533, 845], "print": [9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 151, 173, 174, 176, 226, 240, 241, 255, 259, 308, 330, 352, 526, 608, 784, 787, 845, 866, 887, 962, 968, 1153, 1340, 1362, 1393], "prior": [136, 352, 355, 1362, 1367], "prioriti": 182, "probabl": [495, 640, 845, 1114, 1234, 1362], "process": [15, 38, 48, 49, 50, 51, 63, 64, 150, 151, 152, 165, 187, 286, 352, 866, 867, 877, 904, 917, 962], "process_index": [309, 352], "produc": [2, 3, 96, 145, 181, 185, 213, 256, 352, 385, 423, 552, 603, 803, 806, 845, 889, 895, 962, 995, 1174], "product": [57, 218, 256, 352, 439, 446, 845, 889, 962, 1054, 1060, 1362], "profil": [33, 184, 186, 866, 962], "profile_nam": 33, "programmat": [220, 352, 871, 962], "progress": [73, 79], "project": [63, 145, 165, 167, 168, 169, 170, 686, 687, 845, 866, 877, 895, 904, 908, 917, 962], "projection_pushdown": [63, 866, 877, 895, 904, 917, 936, 962], "prompt": 138, "propag": [389, 497, 533, 562, 625, 626, 628, 690, 706, 773, 774, 845, 999, 1116, 1153, 1184, 1222, 1223, 1225, 1278, 1294, 1362], "propagate_nan": 775, "proper": [258, 352, 891, 962], "properti": [40, 41, 51, 196, 199, 200, 209, 216, 217, 226, 234, 245, 289, 294, 325, 329, 352, 355, 356, 868, 869, 876, 911, 930, 935, 962, 967, 968, 1113, 1131, 1221, 1265, 1362, 1367, 1393], "proport": [756, 845, 1351, 1362], "protocol": [40, 132, 152, 153, 209, 352], "prototyp": 841, "provid": [32, 33, 34, 35, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 150, 151, 153, 154, 155, 160, 162, 165, 166, 167, 168, 169, 170, 181, 185, 195, 233, 237, 252, 257, 280, 299, 309, 352, 355, 406, 407, 482, 502, 523, 583, 591, 592, 694, 695, 699, 707, 708, 724, 725, 726, 727, 795, 827, 845, 857, 866, 877, 881, 890, 904, 907, 917, 920, 937, 959, 962, 1016, 1017, 1100, 1143, 1162, 1213, 1282, 1283, 1287, 1295, 1296, 1341, 1362, 1375, 1382, 1385, 1390, 1393], "provis": 858, "prune": [162, 168, 170, 895, 962], "pt0": 482, "public": [153, 352, 845, 857, 962, 1362, 1389], "pulp": 1371, "pure": [41, 352], "purpos": [615, 845, 962], "push": [150, 156, 160, 162, 165, 168, 169, 170, 171, 213, 352, 423, 845], "pushdown": [63, 145, 866, 877, 895, 904, 908, 917, 934, 935, 962, 1261, 1263, 1362], "put": [38, 48, 75, 352, 356, 962], "pwd": 152, "py": 167, "pyarrow": [40, 47, 55, 131, 136, 150, 153, 154, 156, 158, 162, 166, 171, 173, 304, 310, 311, 352, 824, 857, 1337, 1343, 1344, 1362, 1372, 1374, 1390], "pyarrow_opt": [47, 154, 162, 166, 352], "pyarrow_t": 1390, "pycapsul": [131, 132, 208, 971], "pycapsuleinterfac": [132, 208, 971], "pydant": 173, "pyiceberg": [42, 167, 173, 352], "pyodbc": [39, 352], "pyodbc_uri": [39, 352], "pyspark": 187, "pytest": [174, 176], "python": [0, 33, 34, 35, 43, 44, 75, 86, 101, 132, 150, 151, 156, 158, 173, 174, 176, 209, 254, 261, 286, 287, 306, 338, 352, 444, 449, 453, 461, 512, 591, 592, 701, 770, 784, 785, 787, 788, 832, 833, 845, 851, 872, 945, 962, 966, 967, 1063, 1067, 1075, 1078, 1079, 1080, 1084, 1213, 1289, 1342, 1362, 1366, 1389], "pythondatatyp": [66, 84, 213, 352, 841, 863, 962, 968], "pythonliter": [978, 1022, 1027, 1030, 1130, 1164, 1214, 1215, 1216, 1217, 1261, 1362], "pytorch": [314, 352, 1346, 1362], "q": [287, 352, 827, 1362, 1367, 1375], "q1": [41, 352], "q2": [41, 352], "q3": [41, 352], "q4": [41, 352], "qcut": [442, 845, 1057, 1362], "qhoo": 1393, "qmark": 152, "qqr": 968, "quad": [499, 845, 1120, 1362], "qualifi": [39, 352], "quantifi": [700, 1288], "quantil": [352, 640, 664, 665, 845, 962, 1234, 1253, 1362, 1379], "quantile_cont": 1383, "quantile_disc": 1383, "quantilemethod": [220, 278, 344, 352, 641, 664, 665, 818, 845, 871, 905, 951, 962, 1058, 1235, 1253, 1362], "quarter": [242, 257, 284, 322, 352, 472, 477, 490, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1090, 1095, 1108, 1386], "queri": [10, 48, 49, 50, 51, 63, 64, 96, 130, 152, 153, 156, 165, 168, 169, 170, 230, 259, 275, 299, 352, 583, 591, 592, 708, 824, 845, 857, 866, 867, 877, 904, 906, 917, 920, 934, 935, 936, 937, 945, 954, 962, 1125, 1213, 1296, 1362, 1371, 1372, 1374, 1378, 1389, 1391, 1392], "queryoptflag": [48, 49, 50, 51, 63, 64, 130, 866, 867, 877, 904, 917, 962], "quick": [841, 1058, 1362, 1393], "quit": [257, 352, 890, 962], "quot": [38, 39, 48, 150, 151, 153, 165, 352, 736, 962, 1324], "quota_project_id": 35, "quote_char": [38, 48, 150, 151, 165, 352, 962], "quote_plu": 153, "quote_styl": [38, 48, 352, 962], "quotes_titl": 736, "quotient": 1384, "r": [150, 151, 165, 352, 598, 637, 693, 698, 699, 700, 701, 714, 715, 845, 968, 1281, 1286, 1287, 1288, 1289, 1302, 1303, 1317, 1375, 1385], "r1": 65, "r2": 65, "r3": 65, "rab": [691, 717, 1279, 1305, 1380], "rad": 1387, "radian": [443, 766, 845, 1383], "radix": [733, 1321], "rai": [766, 767], "raini": [714, 715, 1302, 1303], "rais": [1, 10, 16, 17, 21, 40, 55, 65, 102, 103, 106, 107, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 150, 151, 155, 161, 162, 165, 170, 174, 176, 209, 213, 237, 276, 285, 310, 352, 388, 406, 423, 449, 475, 476, 558, 560, 603, 638, 640, 648, 691, 694, 703, 728, 730, 731, 733, 735, 786, 805, 845, 937, 998, 1016, 1063, 1093, 1094, 1180, 1182, 1232, 1234, 1242, 1279, 1282, 1291, 1316, 1318, 1319, 1321, 1323, 1343, 1362], "raise_if_empti": [150, 151, 155, 161, 165], "raise_if_undetermin": 603, "raise_on_fail": 937, "raker": 146, "ram": [48, 49, 50, 51, 962], "ran": [147, 845], "randn": 96, "random": [41, 43, 96, 156, 172, 179, 243, 288, 352, 521, 571, 643, 675, 680, 756, 845, 857, 1141, 1193, 1236, 1260, 1269, 1351, 1362], "randomli": 180, "rang": [18, 41, 152, 153, 220, 228, 242, 255, 352, 368, 443, 449, 457, 461, 468, 473, 474, 475, 477, 490, 491, 527, 765, 770, 773, 783, 784, 785, 786, 787, 788, 799, 800, 803, 804, 831, 832, 833, 845, 871, 885, 962, 968, 1058, 1063, 1071, 1075, 1086, 1091, 1092, 1093, 1095, 1108, 1109, 1118, 1229, 1362, 1385], "rank": [377, 555, 768, 775, 790, 845, 987, 1177, 1362], "rankmethod": [643, 845, 1236, 1362], "rare": [450, 1064], "rather": [257, 352, 514, 591, 608, 640, 652, 738, 845, 890, 962, 1234, 1246, 1326, 1362], "raw": 153, "raw_output": [607, 917, 962], "raw_valu": 143, "re": [237, 242, 253, 317, 319, 352, 469, 470, 479, 482, 885, 925, 927, 962, 1087, 1088, 1097, 1100, 1390], "reach": [53, 712, 713, 738, 1300, 1301, 1326], "read": [37, 55, 140, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 195, 221, 230, 352, 355, 444, 514, 845, 872, 906, 962, 1125, 1362, 1367], "read_arrow_batches_from_odbc": 152, "read_clipboard": [37, 352], "read_csv": [149, 155, 165], "read_csv_batch": 140, "read_csv_opt": 155, "read_databas": [96, 153], "read_database_uri": 152, "read_excel": 161, "read_ndjson": 159, "read_od": 155, "read_opt": 155, "read_parquet": 170, "read_tabl": 162, "readabl": 841, "reader": [47, 51, 140, 145, 150, 151, 156, 158, 160, 162, 167, 352, 962], "reader_overrid": 167, "readi": 955, "readthedoc": [41, 352], "real": [700, 1288], "realli": [441, 692, 716, 845, 1056, 1280, 1304, 1362], "realloc": [160, 165, 168, 169, 230, 352, 1125, 1362], "rearrang": [261, 352], "reason": [187, 220, 352, 583, 591, 845, 871, 962], "receiv": [57, 152, 165, 261, 275, 338, 352, 592, 637, 845, 903, 962, 1393], "recent": [174, 175, 176, 177, 310, 352, 634, 648, 845, 1229, 1242, 1343, 1362, 1374, 1390], "rechunk": [65, 131, 132, 136, 150, 151, 154, 156, 158, 160, 162, 165, 166, 168, 169, 170, 230, 352, 845, 1043, 1125, 1137, 1219, 1362], "recognis": [10, 16, 17, 21, 968], "recommend": [41, 187, 220, 254, 259, 275, 352, 583, 862, 871, 962, 968], "record": [38, 44, 48, 146, 158, 171, 352, 962], "record_batch": [255, 352], "recordbatch": [131, 255, 352, 824, 1372, 1374, 1390], "recurs": [48, 49, 50, 51, 498, 500, 501, 845, 962, 1119, 1121, 1122, 1362], "red": [56, 97, 98, 338, 756, 845, 945, 1351, 1362], "redempt": 1371, "redshift": 153, "redshift_format": 198, "reduc": [51, 150, 151, 160, 162, 165, 168, 169, 170, 286, 339, 340, 342, 345, 352, 679, 780, 793, 845, 946, 947, 949, 952, 962, 1215, 1233, 1267, 1333, 1362], "reduct": [235, 352, 592, 845], "ref": [699, 701, 1287, 1289], "refer": [0, 33, 41, 101, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 218, 221, 352, 356, 444, 479, 482, 643, 699, 714, 715, 728, 730, 731, 735, 845, 872, 962, 1097, 1100, 1236, 1302, 1303, 1316, 1318, 1319, 1323, 1362], "referenc": [41, 352, 591, 714, 715, 741, 845, 1302, 1303, 1372, 1390], "reg": 146, "regard": [150, 775], "regardless": [136, 212, 241, 257, 315, 352, 422, 454, 708, 751, 835, 845, 861, 890, 924, 962, 1068, 1296], "regex": [99, 502, 598, 599, 601, 691, 693, 699, 700, 701, 703, 714, 715, 739, 791, 845, 968, 1279, 1281, 1287, 1288, 1289, 1291, 1302, 1303], "regexp_lik": 1383, "region": [41, 167, 352], "region_nam": 33, "regist": [1, 52, 53, 54, 58, 59, 60, 61, 145, 147, 184, 186, 299, 352, 845, 920, 962, 966, 1371, 1372, 1374, 1375, 1376, 1377, 1390, 1392], "register_dataframe_namespac": [1, 59, 60, 61], "register_expr_namespac": [1, 58, 60, 61], "register_glob": [1373, 1375, 1377, 1390], "register_io_sourc": 966, "register_lazyframe_namespac": [1, 58, 59, 61], "register_mani": [1373, 1374, 1377], "register_plugin": 845, "register_plugin_funct": 845, "register_series_namespac": [1, 58, 59, 60], "registr": [299, 352, 824, 857, 920, 962, 1377, 1390], "regrid": [527, 845], "regular": [139, 254, 285, 286, 322, 329, 352, 502, 691, 692, 693, 697, 699, 700, 701, 702, 703, 704, 714, 715, 716, 770, 791, 835, 841, 845, 935, 962, 968, 1279, 1280, 1281, 1285, 1287, 1288, 1289, 1290, 1291, 1292, 1302, 1303, 1304, 1388], "reinterpret": [845, 1362], "rel": [41, 52, 53, 54, 147, 153, 154, 166, 167, 174, 175, 176, 177, 352, 472, 498, 500, 501, 756, 845, 1090, 1119, 1121, 1122, 1351, 1362], "relat": [138, 152, 205, 714, 715, 968, 1302, 1303, 1378], "releas": [64, 256, 352, 592, 845, 867, 889, 962, 1393], "release_year": 1371, "relev": 65, "reli": [256, 352, 889, 962], "reliabl": [97, 98], "remain": [52, 150, 151, 165, 224, 225, 228, 233, 248, 276, 280, 352, 447, 448, 508, 527, 528, 554, 647, 720, 721, 845, 874, 875, 881, 888, 895, 907, 962, 1061, 1062, 1118, 1129, 1146, 1147, 1176, 1241, 1308, 1309, 1362, 1377], "remaind": [409, 721, 1019, 1309, 1384], "remap": 100, "remot": [96, 150, 151, 156, 158, 962], "remov": [4, 47, 51, 150, 151, 163, 165, 209, 222, 233, 307, 352, 502, 617, 723, 724, 725, 726, 727, 791, 845, 873, 881, 962, 1311, 1312, 1313, 1314, 1315, 1338, 1362, 1392], "removes_pronoun": 716, "removesuffix": 617, "renam": [1, 43, 44, 134, 138, 150, 151, 155, 156, 158, 162, 165, 168, 169, 170, 174, 175, 176, 177, 188, 212, 241, 242, 256, 276, 284, 290, 291, 304, 315, 322, 326, 327, 331, 333, 352, 363, 422, 441, 498, 500, 501, 514, 609, 610, 616, 617, 618, 619, 621, 623, 624, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 741, 743, 751, 821, 822, 823, 827, 845, 861, 884, 885, 889, 910, 912, 913, 924, 931, 932, 938, 940, 962, 974, 1056, 1117, 1119, 1121, 1122, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1291, 1330, 1337, 1339, 1362, 1390], "rename_field": [720, 721, 1308, 1309], "render": [607, 917, 962], "render_as_str": 152, "reoconstruct": [287, 352], "repeat": [54, 156, 168, 644, 646, 817, 836, 845, 1240, 1362], "repeat_bi": [845, 1362], "replac": [39, 40, 42, 150, 151, 165, 231, 232, 282, 316, 319, 326, 327, 352, 355, 453, 476, 506, 591, 592, 648, 715, 716, 731, 845, 879, 927, 931, 932, 962, 1067, 1094, 1127, 1242, 1261, 1263, 1303, 1304, 1319, 1362, 1367, 1383], "replace_al": [648, 714, 845, 1241, 1242, 1302, 1362], "replace_column": 352, "replace_strict": [647, 845, 1241, 1362], "replace_time_zon": [450, 456, 458, 1069, 1070, 1098], "replace_with": [716, 1304], "replic": [749, 845, 1345, 1362], "report": [152, 228, 352, 711, 1118, 1299, 1362], "repr": [138, 424, 428, 482, 1033, 1038, 1100], "repres": [38, 41, 42, 48, 71, 72, 74, 85, 89, 94, 131, 133, 135, 136, 137, 152, 276, 299, 300, 309, 310, 323, 330, 352, 427, 512, 536, 537, 579, 585, 591, 689, 705, 710, 714, 715, 718, 729, 757, 760, 777, 789, 791, 805, 806, 807, 816, 821, 822, 826, 834, 841, 845, 920, 921, 929, 962, 968, 1037, 1261, 1277, 1293, 1298, 1302, 1303, 1306, 1317, 1343, 1352, 1362, 1390], "represent": [11, 45, 46, 71, 72, 74, 89, 138, 292, 308, 352, 424, 426, 427, 428, 452, 457, 460, 463, 464, 465, 466, 467, 468, 471, 473, 474, 478, 491, 492, 494, 606, 749, 845, 877, 893, 914, 962, 1033, 1036, 1037, 1038, 1039, 1066, 1071, 1074, 1076, 1077, 1081, 1082, 1083, 1085, 1086, 1089, 1091, 1092, 1096, 1109, 1110, 1112, 1340, 1345, 1362, 1381], "request": 35, "requested_schema": [208, 971], "requir": [1, 33, 34, 35, 40, 41, 57, 65, 136, 152, 153, 174, 175, 176, 177, 190, 218, 224, 285, 309, 310, 311, 314, 352, 402, 424, 428, 498, 500, 501, 584, 592, 633, 657, 659, 661, 663, 665, 668, 670, 672, 679, 728, 730, 731, 753, 769, 771, 775, 777, 820, 845, 869, 874, 875, 876, 919, 930, 962, 1012, 1117, 1119, 1121, 1122, 1206, 1267, 1302, 1316, 1318, 1319, 1343, 1344, 1348, 1362], "require_al": 968, "require_http": 190, "rerais": [64, 867, 962], "rerun": [230, 352, 1125, 1362], "resampl": [242, 352, 885, 962], "reset": [4, 205], "reset_index": [136, 242, 352, 885, 962], "reshap": [276, 310, 352, 556, 772, 845, 1178, 1362], "resolv": [147, 233, 352, 453, 583, 868, 869, 876, 911, 930, 962], "resourc": [937, 966], "respect": [41, 150, 165, 352, 692, 702, 704, 716, 968, 1280, 1290, 1292, 1304, 1346, 1362], "respons": [153, 268, 352, 900, 962], "rest": [736, 1324, 1385], "restor": [205, 352, 355, 1362, 1367], "restore_default": 205, "restrict": [31, 721, 1309], "result": [14, 38, 45, 46, 47, 48, 49, 50, 51, 57, 65, 135, 136, 137, 152, 153, 155, 165, 168, 170, 171, 185, 230, 233, 242, 243, 256, 257, 258, 272, 276, 280, 284, 287, 292, 293, 295, 309, 310, 311, 322, 329, 331, 337, 352, 449, 477, 479, 482, 490, 498, 499, 500, 501, 505, 512, 521, 529, 541, 582, 583, 591, 592, 606, 633, 638, 640, 647, 648, 649, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 677, 678, 698, 715, 719, 720, 731, 752, 756, 779, 780, 784, 786, 787, 788, 789, 804, 805, 806, 817, 820, 821, 822, 824, 835, 836, 845, 862, 866, 871, 881, 885, 889, 890, 891, 895, 904, 907, 910, 914, 915, 916, 935, 938, 944, 955, 956, 962, 968, 977, 1095, 1097, 1100, 1108, 1119, 1121, 1122, 1125, 1126, 1141, 1148, 1163, 1204, 1213, 1232, 1234, 1241, 1242, 1243, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1264, 1266, 1286, 1307, 1308, 1319, 1343, 1344, 1351, 1362, 1372, 1378, 1385, 1390, 1391, 1393], "resultset": 152, "retain": [233, 280, 352, 881, 907, 962], "retri": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 352, 962], "retriev": [190, 191, 195, 237, 309, 352, 382, 383, 548, 549, 739, 816, 992, 993, 1170, 1171, 1327, 1341, 1362, 1378], "return": [1, 5, 6, 31, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 96, 108, 111, 119, 127, 130, 131, 133, 134, 135, 136, 137, 139, 140, 145, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 187, 188, 195, 207, 210, 212, 214, 217, 218, 219, 223, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 250, 252, 253, 254, 255, 256, 259, 260, 261, 263, 265, 270, 271, 272, 274, 275, 276, 281, 284, 285, 286, 287, 288, 292, 299, 302, 303, 309, 310, 311, 314, 315, 316, 317, 322, 325, 326, 327, 333, 335, 337, 338, 341, 346, 352, 364, 366, 369, 370, 371, 372, 373, 374, 377, 378, 382, 383, 384, 386, 388, 389, 400, 405, 406, 407, 408, 409, 410, 411, 421, 422, 426, 427, 432, 433, 434, 435, 436, 442, 443, 449, 450, 452, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 499, 504, 512, 515, 516, 518, 522, 523, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 544, 545, 548, 549, 551, 556, 558, 560, 561, 562, 564, 571, 581, 582, 589, 591, 592, 604, 606, 607, 608, 613, 637, 640, 642, 646, 647, 648, 649, 651, 652, 675, 676, 681, 682, 683, 690, 691, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 729, 733, 738, 746, 747, 748, 750, 751, 752, 754, 755, 756, 759, 760, 765, 766, 767, 768, 769, 770, 771, 775, 776, 777, 778, 783, 784, 785, 786, 787, 788, 789, 792, 793, 795, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 817, 820, 823, 824, 827, 830, 831, 832, 833, 835, 836, 845, 861, 864, 866, 867, 869, 870, 871, 876, 877, 883, 885, 886, 889, 893, 894, 895, 903, 904, 908, 910, 914, 917, 923, 924, 925, 930, 931, 932, 940, 942, 944, 948, 953, 955, 962, 967, 968, 970, 972, 975, 976, 977, 985, 986, 988, 989, 990, 991, 992, 993, 994, 996, 998, 999, 1010, 1012, 1015, 1016, 1017, 1019, 1020, 1031, 1035, 1036, 1037, 1044, 1050, 1051, 1057, 1058, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1118, 1120, 1124, 1125, 1130, 1135, 1142, 1143, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1178, 1180, 1182, 1183, 1184, 1186, 1193, 1203, 1204, 1211, 1213, 1218, 1227, 1234, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1260, 1262, 1270, 1278, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1289, 1291, 1292, 1293, 1294, 1296, 1297, 1298, 1299, 1300, 1301, 1305, 1306, 1307, 1308, 1309, 1317, 1321, 1326, 1334, 1337, 1344, 1347, 1349, 1350, 1351, 1353, 1362, 1371, 1372, 1376, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1388, 1390, 1391, 1392, 1393], "return_as_str": [240, 352, 608], "return_dtyp": [41, 261, 352, 591, 592, 647, 648, 759, 793, 806, 807, 845, 1213, 1241, 1242, 1362], "return_typ": [309, 314, 352], "returns_scalar": [147, 591, 592, 793, 807, 845], "reus": [63, 205, 866, 877, 904, 917, 962], "reusabl": 205, "rev": [258, 352, 891, 962], "revers": [212, 228, 315, 352, 422, 436, 437, 438, 439, 440, 617, 619, 621, 751, 772, 778, 845, 861, 924, 962, 1051, 1052, 1053, 1054, 1055, 1362, 1380, 1383], "reverse_": 619, "reverse_a": 619, "reverse_b": 619, "revert": [7, 9, 11], "rhap": [702, 704, 1292], "rhapsodi": [702, 704, 1292], "right": [9, 11, 16, 17, 19, 28, 41, 73, 150, 151, 174, 175, 176, 177, 242, 256, 257, 284, 321, 352, 442, 498, 499, 500, 501, 529, 572, 573, 574, 575, 640, 653, 657, 659, 661, 663, 665, 668, 670, 672, 676, 684, 771, 784, 785, 787, 788, 803, 804, 832, 833, 835, 845, 885, 889, 890, 910, 928, 962, 1057, 1119, 1120, 1121, 1122, 1148, 1194, 1195, 1196, 1197, 1234, 1262, 1273, 1362, 1378, 1383], "right_left": [256, 321, 352, 889, 928, 962], "right_on": [256, 257, 321, 352, 889, 890, 928, 962], "rightmost": [676, 845, 1262, 1362, 1385], "rld": [723, 725, 1313], "rle": [652, 845, 1246, 1362], "rle_id": [651, 845, 1362], "rle_id_a": [652, 845], "rle_id_ab": [652, 845], "rmm": 937, "rn": [150, 151, 165], "role": [33, 153], "roll": [242, 352, 449, 469, 470, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 773, 821, 822, 845, 885, 962, 1063, 1087, 1088, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1362], "rollback": [470, 1088], "rolled_forward": 449, "rollforward": [469, 1087], "rolling_kurtosi": [845, 1362], "rolling_map": [845, 1362], "rolling_max": [845, 1362], "rolling_max_bi": 845, "rolling_mean": [845, 1362], "rolling_mean_bi": 845, "rolling_median": [845, 1362], "rolling_median_bi": 845, "rolling_min": [845, 1362], "rolling_min_bi": 845, "rolling_quantil": [845, 1362], "rolling_quantile_bi": 845, "rolling_row_max": [657, 845], "rolling_row_mean": [659, 845], "rolling_row_median": [661, 845], "rolling_row_min": [663, 845], "rolling_row_quantil": [665, 845], "rolling_row_std": [668, 845], "rolling_row_sum": [670, 845], "rolling_row_var": [672, 845], "rolling_skew": [845, 1362], "rolling_std": [845, 1362], "rolling_std_bi": 845, "rolling_sum": [655, 845, 1248, 1362], "rolling_sum_bi": 845, "rolling_var": [845, 1362], "rolling_var_bi": 845, "rollinggroupbi": [284, 352], "ronaldo": [699, 1287], "root": [154, 166, 429, 605, 616, 617, 619, 621, 623, 624, 688, 844, 845, 1041, 1276, 1362, 1384], "rotat": [352, 355, 1362, 1367], "round": [21, 41, 59, 138, 152, 352, 430, 434, 511, 674, 747, 845, 1042, 1132, 1259, 1362, 1383], "round_sig_fig": [845, 1362], "round_str": 1095, "round_td": 1095, "rounded_corn": 21, "roundmod": [673, 845, 1258, 1362], "row": [15, 21, 26, 38, 39, 41, 47, 48, 51, 53, 57, 58, 60, 65, 105, 111, 119, 127, 134, 135, 136, 137, 138, 145, 146, 150, 151, 152, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 174, 175, 181, 210, 212, 213, 214, 224, 225, 230, 233, 235, 236, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 267, 268, 272, 276, 280, 284, 287, 288, 297, 303, 306, 308, 309, 314, 315, 317, 319, 320, 321, 328, 329, 333, 335, 337, 338, 346, 352, 356, 377, 378, 386, 401, 422, 423, 504, 512, 516, 522, 545, 556, 583, 633, 634, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 680, 685, 687, 698, 707, 746, 751, 765, 768, 774, 776, 793, 797, 799, 800, 802, 804, 819, 821, 822, 830, 845, 861, 864, 874, 875, 881, 882, 883, 885, 886, 889, 890, 891, 892, 894, 895, 899, 900, 907, 918, 923, 924, 925, 927, 928, 934, 935, 940, 942, 944, 945, 953, 962, 972, 987, 996, 1124, 1125, 1135, 1142, 1167, 1178, 1229, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1274, 1286, 1295, 1334, 1362, 1371, 1378, 1380, 1391, 1392, 1393], "row_count_nam": [150, 151, 156, 158, 162, 165, 168, 169, 170], "row_count_offset": [150, 151, 156, 158, 162, 165, 168, 169, 170], "row_group": [162, 170], "row_group_s": [47, 51, 352, 962], "row_height": [41, 352], "row_index": [41, 352], "row_index_nam": [150, 151, 156, 158, 160, 162, 165, 168, 169, 170], "row_index_offset": [150, 151, 156, 158, 160, 162, 165, 168, 169, 170], "row_nr": [328, 352, 934, 962], "row_tot": [41, 352], "rowname_col": [352, 356], "rows_by_kei": [254, 286, 305, 352], "rowserror": [285, 352], "rowtotalsdefinit": [41, 352], "rtol": [174, 175, 176, 177], "rtrim": 1383, "ru": 1385, "rule": [150, 162, 165, 170, 235, 352, 692, 716, 731, 1280, 1304, 1319], "run": [48, 49, 50, 51, 63, 64, 72, 96, 130, 152, 181, 184, 185, 186, 241, 256, 259, 261, 291, 317, 327, 338, 352, 427, 441, 555, 591, 592, 651, 652, 710, 823, 845, 866, 867, 877, 884, 889, 895, 899, 904, 906, 913, 917, 925, 932, 937, 962, 966, 968, 1037, 1056, 1177, 1213, 1245, 1246, 1298, 1362, 1390, 1393], "runtim": 966, "runtimeerror": [310, 352, 1343, 1362], "rust": [38, 47, 48, 101, 113, 147, 155, 156, 158, 162, 261, 338, 352, 701, 962, 966, 1213, 1289, 1362], "s1": [56, 97, 98, 176, 177, 235, 352, 771, 775, 777, 1011, 1116, 1117, 1137, 1162, 1172, 1205, 1225, 1237, 1353, 1362], "s2": [1, 56, 97, 98, 176, 177, 235, 352, 771, 775, 777, 1011, 1043, 1060, 1116, 1117, 1137, 1153, 1162, 1172, 1205, 1219, 1225, 1237, 1353, 1362], "s3": [1, 40, 154, 166, 167, 170, 171, 352, 906, 962, 1011, 1205, 1362], "s_": 482, "s_bar": 1380, "s_dt": [482, 1385, 1386], "s_dt1": 1385, "s_dt2": 1385, "s_dtm": 482, "s_foo": 1380, "s_from_str_repr": [1340, 1362], "s_head_5": 705, "s_head_n": 705, "s_tail_5": 729, "s_tail_n": 729, "s_td": 482, "s_tm": [482, 1385, 1386], "safe": [645, 845, 1238, 1362], "sale": [633, 845], "salesforce_format": 198, "sam": 13, "same": [21, 40, 41, 54, 56, 57, 63, 64, 65, 97, 98, 114, 156, 165, 174, 175, 176, 177, 179, 205, 233, 241, 257, 261, 276, 280, 286, 287, 298, 317, 326, 327, 331, 338, 352, 360, 367, 400, 426, 447, 448, 482, 508, 512, 514, 515, 518, 582, 596, 602, 633, 647, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 680, 687, 698, 709, 741, 835, 841, 845, 866, 867, 881, 884, 890, 893, 895, 907, 917, 919, 925, 931, 932, 938, 962, 968, 973, 1010, 1036, 1061, 1062, 1067, 1100, 1204, 1213, 1241, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1286, 1297, 1353, 1362, 1376, 1378, 1386], "samoa": [450, 1064], "sampl": [150, 151, 338, 352, 680, 684, 803, 804, 845, 945, 1273, 1362, 1379], "sample_s": [150, 151], "sampled_from": 1393, "sandwich": [238, 352], "sat": [352, 355], "satisfi": [529, 845, 1148, 1362], "saturdai": [242, 352, 885, 962], "save": [2, 3, 6, 242, 257, 284, 322, 352, 450, 458, 472, 477, 490, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 789, 832, 833, 841, 845, 857, 885, 890, 910, 962, 1072, 1090, 1095, 1108], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [147, 210, 252, 261, 285, 295, 352, 427, 591, 676, 678, 705, 710, 718, 729, 793, 805, 807, 845, 916, 962, 972, 1037, 1162, 1262, 1266, 1293, 1298, 1306, 1317, 1362], "scale": [29, 73, 228, 352, 410, 592, 637, 732, 845, 968, 1118, 1320, 1362], "scale_negative_even": [637, 845], "scan": [55, 134, 137, 150, 151, 152, 155, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 195, 352, 707, 857, 962, 1295], "scan_": 55, "scan_csv": [48, 49, 50, 51, 150, 151, 962], "scan_ipc": 156, "scan_ndjson": 160, "scan_parquet": [52, 53, 54, 162, 171, 906, 962], "scan_pyarrow_dataset": [162, 170], "scan_tabl": 203, "scancastopt": 170, "scatter": [352, 355, 1362, 1367], "scenario": 1362, "schedul": [64, 867, 962], "schema": [0, 1, 15, 29, 36, 39, 40, 55, 58, 59, 60, 65, 96, 105, 122, 123, 131, 133, 134, 135, 137, 145, 146, 150, 151, 152, 153, 155, 157, 159, 160, 161, 162, 164, 165, 168, 169, 170, 191, 193, 194, 195, 199, 201, 214, 215, 216, 222, 226, 228, 255, 259, 261, 268, 272, 281, 310, 314, 352, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 456, 582, 583, 592, 603, 618, 620, 622, 707, 759, 827, 845, 857, 864, 865, 868, 869, 873, 876, 895, 900, 908, 930, 945, 962, 968, 1046, 1295, 1362, 1371], "schema_mod": [40, 352], "schema_overrid": [131, 133, 134, 135, 136, 137, 150, 151, 152, 153, 155, 159, 160, 161, 165, 169, 255, 310, 352, 962, 968], "schemadefinit": [131, 133, 134, 135, 137, 159, 160, 169, 352, 962], "schemadict": [88, 96, 131, 133, 134, 135, 136, 137, 145, 150, 152, 153, 155, 161, 162, 165, 168, 170, 352, 827, 895, 945, 962], "schemainitdatatyp": 967, "scheme": [52, 53, 54], "schindler": 1371, "scientif": [12, 38, 48, 352, 962], "scikit": [314, 352], "scipi": [541, 684, 845, 1163, 1273, 1362], "scope": [34, 35, 205, 856, 968, 1374, 1377, 1390], "score": [41, 276, 352], "script": [352, 355, 1362, 1367], "scroll": [41, 352], "sdiff": 574, "sdk": 190, "search": [257, 352, 583, 692, 702, 704, 716, 890, 919, 962, 1145, 1280, 1290, 1292, 1304, 1362], "search_sort": [845, 1362], "searchsortedsid": [676, 845, 1262, 1362], "searchstrategi": [178, 180, 181, 182, 183, 185], "season": [714, 715], "sec": [1386, 1393], "second": [38, 48, 160, 165, 168, 169, 174, 175, 176, 177, 242, 257, 284, 322, 352, 460, 464, 466, 467, 471, 472, 475, 477, 482, 489, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 714, 715, 728, 731, 786, 787, 788, 789, 831, 832, 833, 845, 885, 890, 910, 962, 968, 1090, 1093, 1095, 1107, 1108, 1120, 1302, 1303, 1316, 1319, 1362, 1385, 1386, 1391, 1393], "second_part": [720, 721, 1308, 1309], "seconds_diff": 489, "secret": [167, 170], "section": [276, 352, 691, 699, 700, 703, 714, 715, 784, 785, 787, 788, 832, 833, 966, 1279, 1287, 1288, 1291, 1302, 1303], "secur": [444, 845, 872, 962], "see": [38, 40, 41, 43, 44, 47, 48, 49, 50, 51, 72, 145, 147, 152, 153, 154, 155, 156, 158, 160, 162, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 181, 185, 195, 207, 218, 233, 242, 256, 275, 276, 280, 321, 352, 356, 415, 416, 418, 419, 431, 482, 507, 541, 591, 684, 691, 699, 700, 703, 705, 714, 715, 729, 784, 785, 787, 788, 819, 832, 833, 841, 845, 881, 885, 907, 928, 937, 962, 966, 968, 970, 1025, 1026, 1028, 1029, 1039, 1045, 1100, 1163, 1273, 1279, 1287, 1288, 1291, 1293, 1302, 1303, 1317, 1362, 1393], "seed": [96, 172, 243, 288, 352, 521, 571, 643, 675, 680, 845, 1141, 1193, 1236, 1260, 1269, 1362], "seed_1": [243, 352, 521, 845, 1141, 1362], "seed_2": [243, 352, 521, 845, 1141, 1362], "seed_3": [243, 352, 521, 845, 1141, 1362], "seen": [482, 1100], "seen_group": 151, "select": [1, 8, 39, 48, 49, 50, 51, 57, 58, 59, 60, 63, 64, 96, 102, 148, 150, 151, 152, 153, 154, 156, 158, 162, 165, 167, 171, 180, 210, 211, 252, 253, 257, 261, 272, 275, 285, 291, 297, 299, 312, 318, 322, 329, 352, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 386, 391, 392, 393, 398, 399, 400, 401, 402, 403, 405, 408, 411, 412, 417, 420, 421, 422, 425, 429, 430, 432, 433, 434, 435, 441, 443, 445, 446, 447, 448, 451, 453, 454, 463, 469, 470, 472, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 495, 498, 500, 501, 502, 503, 504, 505, 509, 511, 516, 520, 521, 522, 523, 524, 525, 526, 527, 530, 531, 534, 540, 541, 542, 544, 545, 555, 556, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 599, 611, 613, 615, 616, 618, 620, 622, 625, 626, 630, 631, 632, 633, 635, 636, 639, 641, 642, 643, 644, 645, 646, 649, 650, 651, 654, 655, 666, 673, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 698, 699, 700, 701, 702, 703, 704, 706, 711, 728, 739, 741, 742, 745, 746, 747, 748, 750, 751, 753, 754, 755, 756, 757, 760, 762, 764, 767, 768, 769, 772, 773, 775, 776, 777, 778, 781, 788, 789, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 808, 810, 812, 813, 815, 816, 819, 820, 824, 825, 826, 827, 828, 830, 834, 841, 845, 860, 866, 867, 869, 877, 890, 903, 904, 913, 917, 918, 920, 926, 933, 935, 937, 962, 968, 972, 1094, 1134, 1177, 1261, 1263, 1274, 1292, 1296, 1316, 1362, 1371, 1372, 1373, 1374, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392], "select_from": [180, 183, 185], "select_seq": [352, 962], "selector": [0, 41, 213, 222, 224, 225, 229, 267, 274, 276, 298, 307, 309, 314, 317, 319, 320, 352, 356, 482, 502, 599, 845, 857, 863, 873, 874, 875, 878, 899, 919, 925, 927, 962], "selectortyp": [41, 352, 968], "self": [1, 58, 59, 60, 61, 63, 299, 330, 352, 824, 845, 866, 877, 904, 917, 920, 933, 962, 977, 1023, 1024, 1025, 1026, 1028, 1029, 1032, 1046, 1051, 1125, 1129, 1144, 1211, 1213, 1226, 1230, 1231, 1237, 1240, 1241, 1242, 1261, 1263, 1264, 1275, 1350, 1353, 1362, 1373, 1374, 1375, 1377, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1390], "semi": [146, 256, 352, 889, 962, 1378], "semigraph": 21, "sens": [150, 156, 158, 268, 322, 352, 633, 845, 900, 962], "sensit": [691, 700, 703, 714, 715, 1279, 1288, 1291, 1302, 1303], "sep": 146, "separ": [9, 11, 25, 28, 37, 38, 48, 140, 146, 149, 150, 151, 155, 165, 274, 276, 307, 316, 318, 352, 386, 389, 482, 556, 562, 592, 698, 774, 779, 780, 845, 917, 926, 962, 996, 999, 1100, 1178, 1184, 1286, 1332, 1338, 1362, 1385], "seq": 27, "seq1": 27, "seq2": 27, "sequenc": [41, 47, 51, 52, 54, 57, 88, 131, 133, 134, 135, 137, 141, 146, 150, 151, 152, 155, 159, 160, 161, 165, 169, 179, 180, 181, 182, 183, 212, 220, 229, 230, 256, 257, 267, 272, 274, 275, 276, 287, 298, 307, 309, 314, 315, 319, 320, 321, 322, 352, 401, 422, 442, 515, 533, 583, 591, 637, 640, 647, 648, 687, 716, 726, 727, 741, 751, 768, 779, 780, 793, 795, 803, 804, 806, 807, 816, 819, 825, 845, 861, 871, 878, 889, 890, 899, 903, 919, 924, 927, 928, 962, 968, 1011, 1057, 1058, 1125, 1205, 1234, 1241, 1242, 1304, 1330, 1362], "sequenti": [63, 291, 327, 352, 866, 877, 904, 913, 917, 932, 962], "ser": [1069, 1070, 1098], "seri": [0, 1, 12, 26, 41, 56, 58, 59, 60, 61, 65, 66, 75, 88, 97, 98, 107, 131, 133, 136, 138, 147, 176, 177, 181, 210, 223, 233, 235, 237, 239, 242, 243, 246, 247, 248, 249, 251, 253, 263, 265, 270, 280, 282, 284, 288, 302, 305, 308, 310, 312, 313, 332, 352, 367, 378, 401, 405, 424, 425, 426, 427, 428, 430, 476, 505, 508, 511, 515, 516, 526, 527, 528, 531, 533, 534, 536, 537, 538, 539, 550, 556, 558, 583, 589, 591, 592, 643, 644, 645, 646, 647, 648, 653, 655, 666, 677, 679, 705, 716, 728, 729, 730, 731, 735, 739, 750, 755, 765, 769, 771, 772, 775, 777, 779, 780, 784, 785, 787, 788, 793, 795, 799, 800, 803, 804, 805, 806, 807, 817, 819, 820, 823, 824, 827, 832, 833, 836, 845, 857, 881, 885, 888, 907, 910, 939, 962, 1354, 1356, 1358, 1361, 1363, 1366, 1367, 1368, 1369, 1370, 1372, 1374, 1385, 1390, 1393], "serial": [45, 46, 221, 352, 444, 610, 845, 872, 962], "serializ": [147, 845], "serializationformat": [221, 292, 352, 444, 606, 845, 872, 914, 962], "seriesplot": [1362, 1367], "server": [39, 152, 153, 352], "servic": 33, "service_account": [154, 166], "service_account_json_absolute_path": [154, 166], "session": 152, "set": [2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 58, 63, 64, 69, 72, 73, 75, 132, 133, 134, 137, 147, 150, 151, 152, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 195, 205, 209, 217, 224, 225, 234, 237, 241, 243, 254, 256, 257, 265, 267, 286, 288, 290, 292, 297, 302, 307, 309, 310, 314, 316, 317, 319, 320, 321, 326, 352, 355, 364, 366, 388, 389, 401, 413, 415, 416, 418, 419, 431, 442, 475, 476, 493, 521, 533, 558, 560, 562, 571, 572, 573, 574, 575, 577, 583, 591, 592, 599, 600, 606, 637, 640, 647, 648, 654, 655, 656, 658, 660, 662, 664, 666, 667, 669, 671, 675, 680, 684, 685, 690, 706, 707, 714, 715, 718, 723, 724, 725, 726, 727, 728, 730, 731, 735, 756, 760, 762, 765, 769, 771, 774, 775, 777, 784, 785, 786, 787, 788, 789, 793, 799, 800, 803, 804, 805, 811, 817, 820, 821, 822, 823, 827, 829, 832, 833, 835, 836, 845, 857, 866, 867, 874, 875, 877, 884, 889, 890, 895, 899, 904, 912, 914, 917, 918, 925, 927, 928, 931, 936, 945, 962, 975, 976, 998, 999, 1011, 1016, 1023, 1025, 1026, 1028, 1029, 1045, 1057, 1093, 1094, 1111, 1131, 1141, 1153, 1160, 1180, 1182, 1184, 1193, 1194, 1195, 1196, 1197, 1199, 1205, 1213, 1234, 1241, 1242, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1261, 1262, 1269, 1273, 1274, 1278, 1294, 1295, 1302, 1303, 1306, 1311, 1312, 1313, 1316, 1318, 1319, 1323, 1343, 1351, 1362, 1381, 1389, 1393], "set_": 205, "set_auto_structifi": [290, 326, 352, 912, 931, 962], "set_decimal_separ": 28, "set_environ": 184, "set_except": [64, 867, 962], "set_fmt_float": 31, "set_fmt_str_length": [692, 702, 704, 716, 1280, 1292, 1304], "set_index": [242, 352, 885, 962], "set_legend": [41, 352], "set_sort": [284, 322, 352, 653, 845, 910, 962, 1362], "set_stat": 31, "set_streaming_chunk_s": [866, 962], "set_styl": [41, 352], "set_tbl_column_data_type_inlin": 25, "set_tbl_format": [7, 57], "set_tbl_row": 205, "set_tbl_width_char": 716, "set_thousands_separ": 9, "set_titl": [41, 352], "set_verbos": 205, "setosa": [352, 355], "setup": 1393, "seventeen": [525, 845], "sever": [131, 133, 134, 135, 137, 159, 160, 169, 352, 906, 962, 1393], "sfu": 153, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 56, 57, 58, 59, 60, 61, 65, 66, 84, 88, 96, 97, 98, 105, 124, 131, 132, 133, 134, 135, 136, 137, 138, 146, 150, 159, 160, 165, 171, 178, 181, 185, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 235, 236, 237, 239, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 288, 290, 292, 295, 297, 298, 299, 300, 301, 302, 303, 305, 307, 308, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 611, 612, 613, 614, 615, 616, 617, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 841, 845, 860, 861, 863, 864, 866, 867, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 933, 934, 935, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 962, 967, 968, 972, 973, 974, 977, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1082, 1083, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1116, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1132, 1134, 1135, 1137, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1218, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1234, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1266, 1267, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1329, 1332, 1334, 1335, 1336, 1338, 1339, 1340, 1345, 1347, 1348, 1349, 1350, 1351, 1353, 1362, 1371, 1372, 1373, 1374, 1376, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1390, 1391], "share": [174, 175, 176, 177, 228, 352, 1118, 1362], "shawshank": 1371, "sheet": [41, 155, 161, 352], "sheet1": [41, 352], "sheet_id": [155, 161], "sheet_nam": [155, 161], "sheet_zoom": [41, 352], "sheetnam": [155, 161], "shift": [242, 352, 404, 445, 513, 553, 634, 773, 845, 885, 962, 1014, 1059, 1133, 1175, 1229, 1362], "short": [174, 176, 409, 1019], "shorten": [174, 176], "shorter": [150, 151, 165, 583, 799, 800], "shorthand": [352, 355, 835, 1362, 1367], "should": [11, 39, 41, 47, 48, 49, 50, 51, 65, 96, 131, 133, 135, 137, 145, 146, 155, 159, 160, 165, 167, 169, 171, 178, 179, 181, 185, 222, 254, 256, 257, 261, 285, 286, 287, 298, 306, 307, 318, 338, 352, 362, 441, 444, 449, 493, 499, 502, 536, 537, 555, 592, 606, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 676, 684, 687, 714, 715, 732, 756, 768, 770, 789, 791, 805, 807, 821, 822, 841, 845, 866, 872, 873, 877, 889, 890, 895, 904, 914, 917, 919, 926, 962, 968, 1056, 1063, 1111, 1120, 1177, 1213, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1262, 1273, 1302, 1303, 1320, 1351, 1362, 1372], "show": [31, 41, 220, 225, 240, 259, 273, 352, 523, 607, 845, 871, 904, 917, 962, 1143, 1362, 1376, 1389], "show_graph": [259, 352, 962], "show_plot": [904, 962], "shrink": [296, 352, 679, 845, 1267, 1268, 1362], "shrink_dtyp": [845, 1362], "shrink_to_fit": [352, 1362], "shuffl": [172, 288, 314, 338, 352, 571, 675, 845, 945, 1193, 1260, 1362], "side": [41, 147, 242, 284, 352, 529, 572, 573, 574, 575, 653, 657, 659, 661, 663, 665, 668, 670, 672, 676, 784, 785, 787, 788, 803, 804, 832, 833, 845, 885, 910, 962, 1148, 1194, 1195, 1196, 1197, 1262, 1362], "sign": [71, 72, 74, 79, 80, 81, 82, 83, 89, 472, 645, 714, 715, 738, 845, 968, 1090, 1238, 1302, 1303, 1326, 1362, 1383], "sign_x": 1384, "signed_integ": 968, "signific": [170, 254, 261, 352, 415, 416, 418, 419, 592, 674, 845, 1025, 1026, 1028, 1029, 1213, 1259, 1362], "significantli": [155, 261, 338, 352, 1213, 1362, 1393], "silenc": 105, "silent": [55, 733, 1321], "similar": [37, 47, 55, 149, 187, 235, 257, 295, 317, 319, 352, 396, 479, 482, 576, 633, 678, 743, 802, 835, 845, 881, 890, 916, 925, 927, 962, 1006, 1097, 1100, 1198, 1266, 1362], "similarli": [41, 134, 242, 257, 284, 322, 352, 472, 477, 490, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 832, 833, 845, 885, 890, 910, 962, 1090, 1095, 1108], "simpl": [41, 272, 352], "simpler": [968, 1302], "simpli": [165, 779, 793], "simplifi": [63, 866, 877, 904, 917, 962], "simplify_express": [63, 866, 877, 904, 917, 936, 962], "sin": [845, 1362, 1383], "sinc": [40, 63, 66, 71, 72, 89, 150, 151, 152, 154, 160, 165, 166, 168, 169, 178, 179, 180, 181, 185, 188, 211, 267, 310, 328, 333, 352, 456, 459, 493, 514, 591, 610, 647, 690, 698, 758, 767, 775, 795, 845, 860, 866, 877, 899, 904, 917, 919, 933, 934, 940, 962, 1070, 1073, 1079, 1080, 1111, 1140, 1241, 1278, 1286, 1343, 1362], "sind": 1383, "sine": [371, 372, 591, 682, 683, 845, 981, 982, 1271, 1272, 1362, 1387], "singl": [41, 47, 57, 64, 65, 76, 149, 150, 151, 152, 153, 154, 155, 162, 165, 166, 168, 179, 213, 222, 223, 224, 225, 230, 237, 243, 252, 261, 274, 285, 287, 298, 309, 310, 352, 385, 427, 431, 449, 472, 515, 518, 521, 552, 558, 591, 592, 644, 647, 649, 651, 687, 690, 705, 706, 710, 718, 729, 758, 768, 772, 773, 774, 800, 804, 806, 807, 825, 833, 835, 841, 845, 863, 873, 874, 875, 919, 962, 968, 995, 1037, 1045, 1063, 1090, 1125, 1141, 1174, 1180, 1237, 1241, 1243, 1245, 1278, 1293, 1294, 1298, 1306, 1317, 1337, 1343, 1362, 1373], "singlecolselector": 210, "singleindexselector": [210, 972], "sinh": [845, 1362], "sink": 858, "sink_": [52, 54], "sink_csv": [52, 53, 54, 962], "sink_ipc": 962, "sink_ndjson": 962, "sink_parquet": [52, 141, 962], "site_id": [352, 356], "six": [676, 845], "size": [15, 47, 51, 53, 145, 150, 151, 152, 178, 179, 180, 181, 185, 187, 228, 320, 352, 490, 583, 649, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 765, 799, 800, 821, 822, 845, 866, 962, 1108, 1118, 1243, 1247, 1254, 1362, 1393], "sizeunit": [228, 352, 410, 1020, 1118, 1362], "skew": [666, 845, 1254, 1362], "skewtest": [684, 845, 1273, 1362], "skip": [150, 151, 155, 162, 165, 170, 257, 320, 352, 890, 962, 1213, 1362, 1378], "skip_empty_lin": 155, "skip_lin": [150, 165], "skip_nul": [592, 845, 1213, 1362], "skip_row": [150, 151, 165], "skip_rows_after_head": [150, 151, 165], "sklearn": [314, 352], "slice": [58, 63, 147, 228, 244, 255, 303, 352, 561, 581, 592, 603, 605, 655, 656, 658, 660, 662, 664, 667, 669, 671, 705, 729, 845, 866, 877, 895, 904, 917, 962, 1118, 1142, 1183, 1203, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1293, 1317, 1334, 1362, 1385], "slice_pushdown": [63, 866, 877, 895, 904, 917, 936, 962], "slide": [441, 845, 1056, 1362], "slightli": [48, 49, 50, 51, 101, 512, 845, 962, 1386], "slot": [441, 445, 553, 845, 1056, 1059, 1175, 1362], "slow": [117, 134, 137, 150, 151, 152, 155, 159, 160, 161, 165, 169, 170, 352, 441, 592, 655, 707, 845, 945, 962, 1056, 1248, 1295, 1362], "slower": [135, 137, 155, 241, 261, 274, 322, 338, 352, 592, 807, 845, 884, 945, 962, 1213, 1362], "small": [12, 153, 477, 962, 1393], "smaller": [47, 51, 53, 228, 352, 962, 1118, 1362], "smallest": [212, 315, 352, 421, 422, 751, 845, 861, 924, 962, 1031, 1362, 1379, 1382], "smooth": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "snappi": [36, 47, 51, 352, 962], "snapshot": 167, "snapshot_id": 167, "snowflak": [152, 153], "snowflake_format": 198, "snowi": [714, 715], "so": [1, 41, 153, 155, 165, 187, 205, 240, 242, 258, 276, 284, 352, 378, 388, 444, 512, 529, 560, 583, 592, 653, 714, 715, 716, 723, 724, 725, 739, 845, 872, 885, 891, 910, 962, 968, 998, 1182, 1302, 1303, 1304, 1311, 1312, 1313], "softwar": [37, 149, 352], "solut": [39, 352], "solv": [96, 145], "some": [15, 31, 41, 47, 51, 56, 65, 98, 134, 150, 151, 152, 165, 209, 225, 276, 287, 310, 352, 356, 714, 715, 841, 906, 962, 1153, 1302, 1303, 1362, 1393], "some_account": [700, 1288], "some_t": 1392, "someth": [591, 845], "sometim": [789, 844], "somewher": [700, 1288], "sort": [54, 57, 58, 212, 242, 257, 268, 275, 276, 284, 293, 315, 322, 335, 346, 352, 377, 421, 422, 499, 508, 592, 633, 653, 677, 687, 750, 751, 756, 758, 768, 784, 787, 807, 845, 861, 877, 885, 890, 900, 903, 904, 910, 915, 917, 924, 942, 953, 962, 968, 987, 1031, 1120, 1160, 1264, 1347, 1348, 1351, 1362, 1378, 1391, 1393], "sort_bi": 845, "sort_column": [276, 352], "sorted": [257, 352, 890, 962], "sorted_asc": [1131, 1362], "sorted_desc": [1131, 1362], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 841, 845, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 962, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1362, 1367, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1390], "source_ac": 138, "source_actor_id": 138, "source_alia": [40, 352], "source_cha": 138, "source_channel_id": 138, "south": 75, "space": [21, 242, 352, 482, 803, 804, 885, 962, 968, 1100], "spam": [264, 352, 700, 1288], "span": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "spanner": [352, 356], "spark": [47, 352], "sparklin": [41, 352], "speak": [684, 845, 1273, 1362], "spearman": 775, "speci": [352, 355], "special": [39, 54, 150, 151, 153, 165, 314, 329, 352, 655, 700, 714, 715, 845, 935, 962, 1213, 1248, 1288, 1302, 1303, 1362], "specif": [1, 31, 40, 41, 43, 44, 49, 101, 131, 133, 135, 137, 146, 150, 153, 154, 155, 159, 160, 161, 166, 167, 169, 213, 254, 256, 304, 309, 352, 479, 482, 728, 730, 731, 735, 756, 845, 863, 889, 962, 967, 968, 1097, 1100, 1316, 1318, 1319, 1323, 1337, 1341, 1351, 1362, 1378, 1390, 1392, 1393], "specifi": [10, 38, 39, 40, 41, 47, 48, 57, 102, 105, 108, 123, 126, 150, 155, 161, 162, 165, 170, 182, 191, 193, 194, 195, 212, 213, 228, 229, 232, 237, 241, 242, 256, 257, 274, 276, 284, 285, 287, 290, 291, 295, 298, 309, 315, 318, 326, 327, 331, 352, 422, 431, 475, 482, 498, 500, 501, 502, 507, 633, 646, 648, 656, 658, 660, 662, 664, 667, 669, 671, 678, 687, 743, 751, 768, 771, 772, 773, 774, 784, 785, 787, 788, 789, 791, 823, 827, 832, 833, 841, 845, 861, 863, 878, 880, 884, 885, 889, 890, 910, 912, 913, 916, 919, 924, 926, 931, 932, 938, 962, 968, 1045, 1093, 1100, 1118, 1119, 1121, 1122, 1128, 1240, 1242, 1266, 1341, 1362, 1378, 1385, 1392], "speed": [51, 293, 352, 592, 845, 915, 962, 966, 1393], "speedup": [57, 170, 254, 261, 352, 592, 845, 1213, 1362], "split": [1, 41, 47, 52, 53, 54, 58, 255, 352, 698, 720, 721, 1286, 1308, 1309, 1385], "split_by_column_dtyp": 60, "split_inclus": 719, "split_part": 1383, "splitfram": [1, 58], "spreadsheet": [37, 149, 155, 161, 276, 352], "spring": [714, 715], "sql": [0, 39, 120, 121, 129, 152, 153, 256, 295, 352, 396, 576, 678, 802, 825, 845, 857, 916, 962, 1006, 1198, 1266, 1362, 1371, 1372, 1374, 1376, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1387, 1388, 1391, 1392], "sql_expr": 1390, "sqlalchemi": [39, 152, 173, 352], "sqlcontext": [299, 352, 824, 920, 962, 1389], "sqldw_format": 198, "sqlite": [39, 152, 352], "sqrt": [592, 684, 743, 845, 1213, 1273, 1362, 1383], "sqrt_x": 1384, "squar": [1, 61, 338, 541, 649, 688, 845, 945, 1163, 1243, 1276, 1362, 1384], "st": [33, 1393], "stabil": [243, 352, 521, 845, 1141, 1362], "stabl": [162, 207, 218, 220, 221, 243, 288, 292, 299, 352, 444, 521, 588, 606, 749, 845, 871, 872, 899, 914, 919, 920, 962, 970, 1141, 1345, 1362], "stack": [65, 246, 324, 352, 355, 1372], "stage": [917, 962], "stai": [591, 680, 845], "standalon": [179, 968], "standard": [7, 11, 41, 152, 300, 309, 314, 352, 463, 500, 667, 668, 684, 689, 708, 711, 826, 841, 845, 921, 962, 1077, 1116, 1121, 1225, 1273, 1277, 1296, 1299, 1362, 1379, 1393], "standardis": [41, 352], "start": [41, 48, 49, 50, 51, 54, 148, 150, 151, 153, 155, 156, 158, 160, 161, 162, 165, 168, 169, 170, 187, 236, 241, 242, 259, 297, 322, 328, 329, 352, 405, 408, 411, 424, 428, 449, 457, 461, 468, 473, 477, 490, 491, 502, 516, 559, 577, 652, 657, 659, 661, 663, 665, 668, 670, 672, 685, 691, 696, 700, 704, 713, 718, 722, 723, 725, 726, 729, 738, 765, 770, 779, 783, 784, 785, 786, 787, 788, 791, 793, 799, 800, 803, 804, 832, 833, 835, 841, 845, 883, 884, 885, 904, 918, 934, 935, 962, 968, 1021, 1033, 1038, 1063, 1065, 1068, 1071, 1073, 1074, 1081, 1083, 1085, 1086, 1089, 1091, 1095, 1099, 1108, 1109, 1135, 1181, 1199, 1246, 1274, 1284, 1288, 1292, 1301, 1306, 1310, 1311, 1313, 1317, 1326, 1362, 1378, 1385, 1393], "start_bi": [242, 352, 885, 962], "startbi": [242, 352, 885, 962], "starts_a": 1385, "starts_with": [58, 276, 352, 356, 405, 408, 424, 599, 691, 696, 824, 920, 962, 968, 1033, 1284, 1383], "starts_with_expr": 411, "starts_with_lit": 411, "startup": [309, 352], "stat": [541, 684, 845, 1163, 1273, 1362], "state": [4, 5, 113, 779, 857, 1390], "statement": [633, 835, 845, 1376, 1391], "static": [94, 945], "statist": [47, 51, 150, 151, 162, 168, 170, 220, 352, 500, 501, 541, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 684, 845, 871, 962, 1058, 1121, 1122, 1163, 1247, 1254, 1273, 1362], "std": [220, 352, 667, 668, 845, 871, 962, 1058, 1255, 1362], "std_dev": [41, 352], "stddev": 1383, "stddev_samp": 1379, "stdev": [41, 352, 1379], "stdev_samp": 1379, "stdout": [205, 240, 352, 608], "step": [320, 352, 512, 765, 799, 800, 845], "steve": [268, 352, 900, 962], "still": [152, 153], "stock": [352, 355], "stop": [145, 148, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 657, 659, 661, 663, 665, 668, 670, 672, 845, 1065, 1068, 1073, 1074, 1081, 1083, 1085, 1089, 1095, 1099], "storag": [38, 40, 43, 47, 48, 49, 50, 51, 150, 154, 156, 158, 160, 162, 165, 166, 167, 168, 169, 170, 195, 352, 962], "storage_loc": [196, 199, 200], "storage_opt": [38, 40, 43, 47, 48, 49, 50, 51, 150, 154, 156, 158, 160, 162, 165, 166, 167, 168, 169, 170, 195, 352, 962], "store": [40, 167, 230, 254, 286, 352, 425, 651, 845, 1034, 1125, 1245, 1362], "store_id": [633, 845], "str": [1, 2, 3, 5, 6, 9, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 72, 75, 76, 99, 130, 131, 132, 133, 134, 135, 137, 138, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 181, 184, 185, 186, 190, 191, 193, 194, 195, 196, 197, 199, 200, 205, 212, 213, 217, 220, 221, 222, 223, 224, 225, 226, 228, 229, 233, 234, 235, 237, 238, 240, 241, 242, 244, 246, 247, 249, 251, 252, 254, 256, 257, 258, 260, 262, 264, 266, 267, 268, 269, 272, 274, 276, 278, 280, 281, 282, 283, 284, 285, 286, 288, 292, 293, 297, 298, 299, 300, 301, 303, 305, 306, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 361, 362, 363, 384, 389, 401, 405, 406, 407, 408, 411, 412, 417, 420, 422, 424, 425, 428, 436, 442, 444, 446, 454, 472, 476, 477, 479, 482, 490, 499, 502, 508, 510, 514, 515, 518, 526, 529, 550, 551, 560, 561, 562, 577, 581, 583, 592, 603, 605, 606, 607, 608, 610, 617, 618, 619, 620, 621, 622, 623, 624, 630, 633, 637, 640, 646, 647, 648, 650, 652, 653, 657, 659, 661, 663, 665, 668, 670, 672, 679, 686, 687, 739, 740, 741, 742, 751, 756, 758, 759, 760, 761, 762, 763, 764, 766, 767, 773, 774, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 841, 845, 852, 861, 863, 866, 867, 869, 871, 872, 873, 874, 875, 877, 878, 881, 884, 885, 887, 889, 890, 891, 899, 900, 903, 904, 907, 908, 909, 910, 914, 915, 917, 918, 919, 920, 924, 925, 926, 927, 928, 933, 934, 935, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 962, 967, 968, 974, 994, 999, 1011, 1017, 1032, 1033, 1034, 1038, 1057, 1058, 1068, 1090, 1094, 1095, 1097, 1100, 1108, 1120, 1128, 1131, 1172, 1173, 1184, 1205, 1221, 1222, 1223, 1234, 1239, 1241, 1242, 1263, 1327, 1329, 1330, 1338, 1339, 1340, 1341, 1351, 1362, 1368, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1382, 1385, 1386, 1390, 1391, 1393], "str_date": 1385, "str_timestamp": 1385, "str_valu": [52, 143], "strategi": [38, 48, 57, 65, 150, 170, 178, 179, 180, 181, 182, 183, 185, 232, 242, 256, 257, 271, 321, 322, 352, 404, 437, 440, 507, 513, 583, 592, 845, 858, 880, 885, 889, 890, 906, 928, 962, 1014, 1128, 1133, 1205, 1362], "stream": [10, 15, 43, 44, 48, 49, 50, 51, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 241, 256, 317, 352, 591, 845, 866, 877, 884, 889, 895, 899, 904, 917, 919, 925, 962], "streamabl": [895, 899, 927, 962], "streaming_t": 202, "strftime": [101, 482, 1100, 1383, 1385], "strict": [133, 134, 137, 146, 213, 222, 281, 352, 406, 423, 482, 691, 694, 703, 728, 730, 731, 733, 735, 845, 863, 873, 908, 962, 968, 1016, 1032, 1100, 1117, 1279, 1282, 1291, 1316, 1318, 1319, 1321, 1323, 1362], "strictli": [38, 48, 56, 98, 257, 352, 890, 962], "string": [1, 2, 3, 5, 6, 13, 15, 16, 17, 21, 36, 38, 39, 40, 41, 45, 46, 48, 56, 69, 72, 75, 88, 95, 97, 98, 99, 101, 107, 125, 134, 138, 146, 150, 151, 152, 153, 165, 174, 175, 176, 177, 178, 185, 189, 212, 213, 216, 221, 226, 228, 235, 237, 240, 241, 242, 257, 274, 276, 284, 287, 289, 290, 291, 292, 298, 308, 309, 315, 316, 320, 322, 326, 327, 331, 352, 361, 384, 389, 408, 422, 424, 426, 427, 428, 431, 444, 472, 477, 479, 482, 490, 499, 502, 510, 514, 529, 562, 606, 608, 633, 637, 647, 648, 653, 657, 659, 661, 663, 665, 668, 670, 672, 687, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 743, 751, 759, 761, 763, 768, 771, 772, 773, 774, 782, 784, 785, 787, 788, 794, 809, 811, 814, 823, 827, 829, 832, 833, 835, 841, 845, 857, 861, 863, 868, 872, 876, 877, 884, 885, 890, 910, 911, 912, 913, 914, 919, 924, 931, 932, 938, 962, 967, 968, 999, 1016, 1017, 1018, 1033, 1035, 1036, 1037, 1038, 1090, 1095, 1097, 1100, 1108, 1120, 1148, 1184, 1241, 1242, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1329, 1340, 1341, 1362, 1371, 1372, 1380, 1383, 1386, 1389, 1393], "string_to_arrai": 1383, "stringcach": [97, 98, 256, 352, 857, 1035, 1039], "stringio": [159, 160, 514, 845], "strings_hex": 695, "strip": [29, 723, 724, 725, 726, 727, 1311, 1312, 1313, 1385], "strip_chars_end": [725, 727], "strip_chars_start": [724, 726], "strip_prefix": [725, 727], "strip_suffix": [724, 726], "strongli": [41, 187, 261, 285, 338, 352, 592, 845, 1213, 1362], "strpo": 1383, "strptime": [284, 352, 476, 653, 845, 910, 962, 1094, 1383], "struct": [8, 55, 76, 126, 138, 141, 272, 290, 313, 318, 326, 352, 401, 442, 523, 583, 591, 592, 618, 620, 622, 640, 651, 652, 701, 707, 720, 721, 749, 756, 779, 780, 782, 806, 835, 845, 912, 926, 931, 945, 962, 1011, 1057, 1205, 1213, 1234, 1245, 1289, 1295, 1308, 1309, 1343, 1345, 1362], "struct_col": [739, 741, 742], "struct_seri": 945, "structarrai": [228, 352, 1118, 1362], "structfieldnotfounderror": 741, "structur": [41, 43, 44, 49, 107, 110, 124, 146, 230, 275, 287, 304, 310, 352, 637, 845, 903, 962, 1125, 1337, 1362, 1390], "student": [276, 352], "style": [7, 21, 41, 52, 152, 276, 352], "sub": [338, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 398, 399, 403, 562, 569, 845, 992, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1013, 1184, 1191], "subarrai": [380, 381, 990, 991], "subclass": [1, 352], "subexpress": [63, 866, 877, 904, 917, 962], "subinterv": 1379, "subject": [47, 167, 276, 352], "sublist": [388, 548, 549, 551, 553, 557, 558, 559, 560, 561, 562, 563, 572, 577, 581, 583, 998, 1153, 1170, 1171, 1173, 1175, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1194, 1199, 1203, 1205, 1362], "subplan": [63, 130, 866, 877, 904, 917, 962], "subsequ": [41, 162, 170, 279, 311, 352, 583, 824, 835, 877, 962, 1344, 1362, 1377], "subset": [224, 225, 272, 317, 352, 874, 875, 925, 962], "substr": [405, 408, 411, 424, 428, 691, 696, 703, 714, 715, 718, 719, 720, 721, 722, 968, 1015, 1018, 1021, 1033, 1038, 1279, 1284, 1291, 1302, 1303, 1306, 1307, 1308, 1309, 1310, 1383], "subtl": [41, 352], "subtli": [512, 845], "subtract": [541, 744, 845, 1163, 1362], "succe": [150, 151, 165], "success": [693, 700, 1281, 1288], "successfulli": [866, 877, 904, 917, 962], "suffer": 54, "suffix": [256, 257, 258, 290, 326, 331, 352, 363, 408, 422, 424, 536, 537, 538, 539, 597, 617, 619, 622, 623, 624, 650, 696, 724, 727, 751, 845, 889, 890, 891, 912, 931, 933, 938, 962, 968, 1018, 1033, 1284, 1315], "suffix_field": [618, 620], "sugar": [321, 352, 647, 648, 716, 760, 762, 764, 776, 778, 781, 791, 796, 797, 798, 808, 810, 812, 813, 815, 817, 818, 823, 826, 828, 830, 834, 836, 845, 928, 962, 1241, 1242, 1276, 1304, 1362], "suggest": [352, 355, 1362, 1367], "suitabl": [57, 65, 152, 179, 261, 352, 592, 676, 845, 1213, 1262, 1362], "sum": [41, 96, 147, 228, 235, 241, 242, 252, 276, 284, 302, 331, 352, 439, 440, 444, 495, 508, 583, 592, 603, 605, 606, 607, 608, 609, 647, 648, 653, 669, 670, 758, 760, 772, 779, 781, 782, 793, 807, 819, 829, 845, 866, 867, 872, 877, 884, 885, 902, 904, 906, 910, 914, 917, 938, 962, 968, 1054, 1055, 1114, 1118, 1256, 1362, 1371, 1378, 1380, 1383, 1390], "sum_": [684, 845, 1273, 1362], "sum_a": [284, 352, 653, 845, 910, 962], "sum_horizont": [57, 352, 828], "summari": [220, 352, 871, 962, 1058, 1362, 1378], "summer": [714, 715], "sun": [352, 355, 728, 1316], "sundai": [242, 352, 449, 461, 479, 482, 492, 770, 885, 962, 1063, 1075, 1097, 1100, 1110], "sunni": [714, 715, 1302, 1303], "supercast": [235, 352], "supertyp": [65, 147, 232, 310, 314, 352, 367, 773, 845, 880, 962, 1362], "suppli": [39, 41, 131, 133, 134, 135, 137, 152, 159, 160, 169, 233, 280, 285, 309, 352, 508, 637, 845, 881, 907, 962, 1341, 1362], "support": [1, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 55, 63, 64, 65, 131, 132, 133, 134, 135, 136, 137, 138, 152, 153, 154, 155, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 178, 182, 185, 195, 205, 254, 255, 256, 257, 286, 287, 297, 298, 306, 311, 314, 352, 482, 499, 577, 633, 647, 648, 685, 687, 692, 702, 704, 705, 714, 715, 716, 718, 729, 841, 845, 851, 866, 867, 877, 889, 890, 904, 917, 918, 919, 962, 968, 1100, 1120, 1199, 1241, 1242, 1274, 1280, 1290, 1292, 1293, 1302, 1303, 1304, 1306, 1317, 1344, 1346, 1362, 1366, 1380, 1385, 1386, 1388, 1389, 1390], "supportsinterchang": 132, "suppos": [210, 276, 352, 592, 845, 1213, 1362], "sure": [65, 131, 132, 136, 147, 150, 151, 154, 156, 158, 162, 166, 279, 352, 845], "surreal_query_to_fram": 152, "surrealdb": 152, "surrealql": 152, "suscept": 962, "swap": [835, 908, 962], "swim": 774, "switch": [63, 64, 450, 866, 867, 877, 904, 917, 962, 1064], "sy": 205, "sydnei": 786, "symbol": [37, 38, 48, 352, 845, 962], "symmetr": [574, 968, 1196], "symmetri": [869, 876, 911, 930, 962], "sync": [48, 49, 50, 51, 962], "sync_on_clos": [48, 49, 50, 51, 962], "synchron": [152, 956], "synconclosemethod": [48, 49, 50, 51, 962], "syntact": [321, 352, 647, 648, 716, 760, 762, 764, 776, 778, 781, 791, 796, 797, 798, 808, 810, 812, 813, 815, 817, 818, 823, 826, 828, 830, 834, 836, 845, 928, 962, 1241, 1242, 1276, 1304, 1362], "syntax": [41, 121, 233, 261, 272, 280, 352, 607, 691, 699, 700, 703, 714, 715, 799, 800, 841, 881, 907, 917, 962, 1279, 1287, 1288, 1291, 1302, 1303, 1362, 1386, 1388], "system": [37, 150, 151, 352, 454, 866, 877, 904, 917, 962, 1068], "t": [37, 38, 40, 48, 65, 96, 145, 149, 150, 155, 161, 165, 242, 257, 261, 275, 317, 320, 352, 441, 450, 458, 476, 482, 495, 498, 500, 501, 555, 592, 633, 637, 699, 703, 714, 715, 725, 728, 731, 736, 835, 845, 885, 890, 903, 925, 962, 968, 1056, 1094, 1100, 1114, 1119, 1121, 1122, 1177, 1213, 1287, 1291, 1302, 1303, 1312, 1313, 1316, 1319, 1324, 1362, 1374, 1375, 1385], "t_": [318, 352, 499, 845, 926, 962, 1120, 1362], "t_0": [284, 352, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 845, 910, 962, 1120, 1362], "t_1": [284, 352, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 845, 910, 962, 1120, 1362], "t_a": [318, 352, 926, 962], "t_b": [318, 352, 926, 962], "t_c": [318, 352, 926, 962], "t_d": [318, 352, 926, 962], "t_i": [499, 845, 1120, 1362], "t_id": [258, 352, 891, 962], "t_n": [284, 352, 653, 657, 659, 661, 663, 665, 668, 670, 672, 845, 910, 962], "t_struct": [318, 352, 926, 962], "tab_spann": [352, 356], "tab_stub": [352, 356], "tab_styl": [352, 356], "tabl": [7, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 39, 40, 41, 42, 131, 138, 146, 154, 155, 161, 166, 167, 191, 194, 195, 197, 200, 201, 256, 258, 276, 299, 304, 311, 320, 321, 352, 356, 824, 857, 889, 891, 920, 928, 962, 1372, 1373, 1374, 1375, 1377, 1378, 1389, 1390], "table_id": 200, "table_nam": [39, 41, 155, 191, 195, 299, 352, 920, 962], "table_path": [40, 154, 166, 167, 352], "table_styl": [41, 352], "table_typ": 200, "tableinfo": [191, 194, 203], "tablemerg": [40, 352], "tablenotfounderror": [40, 352], "tables_scale_100": [140, 151], "tabletyp": [200, 203], "tail": [240, 244, 352, 367, 684, 845, 962, 1142, 1273, 1362], "take": [41, 96, 146, 155, 161, 181, 182, 205, 235, 236, 242, 265, 268, 275, 276, 281, 352, 377, 449, 461, 472, 508, 515, 516, 558, 559, 591, 618, 620, 622, 687, 768, 770, 790, 792, 801, 845, 883, 885, 900, 906, 908, 962, 987, 1063, 1075, 1090, 1134, 1135, 1180, 1181, 1353, 1362, 1380], "taken": [577, 718, 1199, 1306], "talkin": [736, 1324], "tan": [845, 1362, 1383], "tand": 1383, "tangent": [373, 374, 747, 748, 845, 983, 984, 1335, 1336, 1362, 1387], "tanh": [276, 352, 845, 1362], "target": [1, 39, 40, 41, 42, 62, 155, 314, 352, 699, 714, 715, 728, 730, 731, 835, 968, 1287, 1302, 1303, 1316, 1318, 1319, 1385], "target_alia": [40, 352], "target_t": [39, 352], "task": [64, 867, 962], "tau": [498, 499, 845, 1119, 1120, 1362], "tb": [174, 176, 228, 352, 410, 1118, 1362], "tbl": [96, 138, 140, 151, 1392], "tbl0": 1377, "tbl1": [1375, 1377], "tbl2": [1375, 1377], "tbl3": 1375, "tbl4": 1375, "tbl_cell_numeric_align": [9, 11, 28], "tbl_col": 18, "tbl_format": [21, 205], "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "tbl_row": [26, 220, 352, 871, 962], "tbl_width_char": 789, "td": 482, "td1": 968, "td2": 968, "td3": 968, "tdf": [275, 352], "technic": 841, "tell": [692, 716, 1280, 1304], "tempor": [101, 213, 242, 254, 284, 286, 287, 306, 352, 431, 482, 529, 653, 657, 659, 661, 663, 665, 668, 670, 672, 803, 845, 857, 863, 885, 910, 962, 968, 1045, 1100, 1148, 1362, 1383, 1389], "temporalliter": [431, 803, 804, 845, 1045, 1079, 1080, 1362], "temporari": [39, 352], "temporarili": [187, 205, 242, 284, 352, 653, 845, 885, 910, 962], "tenant": 34, "tenant_id": 34, "tend": [174, 176], "tensor": [314, 352, 1346, 1362], "tensordataset": [314, 352], "term": [498, 500, 501, 705, 718, 729, 845, 1119, 1121, 1122, 1293, 1306, 1317, 1362], "termin": [38, 48, 352, 962], "terminologi": 199, "test": [0, 39, 152, 153, 155, 161, 167, 227, 276, 352, 857, 1117, 1362, 1385], "test1": 1377, "test2": 1377, "test3": 1377, "test_1": [276, 352], "test_1_math": [276, 352], "test_1_phys": [276, 352], "test_2": [276, 352], "test_2_math": [276, 352], "test_2_phys": [276, 352], "test_data": 152, "test_df_height": 181, "test_func": 806, "test_lf": [933, 962], "test_miscellan": 1393, "test_numer": 1393, "test_price_calcul": 1393, "test_series_len": 185, "test_tabl": 153, "test_unique_xyz": 179, "testdb": 153, "testing1234": 1377, "text": [149, 152, 198, 426, 427, 697, 705, 709, 710, 711, 714, 715, 717, 718, 729, 825, 906, 962, 1036, 1037, 1293, 1297, 1298, 1305, 1306, 1317, 1377, 1393], "text1": 715, "text2": 715, "textclaus": 152, "texttt": [684, 845, 1273, 1362], "th": [236, 352, 516, 559, 572, 684, 705, 729, 845, 883, 962, 1135, 1181, 1194, 1273, 1293, 1317, 1362, 1385], "than": [41, 48, 49, 50, 51, 54, 104, 127, 135, 137, 150, 151, 152, 155, 161, 165, 171, 214, 241, 254, 256, 257, 261, 274, 285, 286, 288, 320, 338, 352, 426, 512, 514, 517, 519, 529, 543, 571, 590, 591, 592, 608, 640, 652, 675, 684, 705, 709, 712, 713, 721, 729, 738, 775, 807, 835, 845, 884, 889, 890, 945, 962, 1036, 1148, 1193, 1213, 1234, 1246, 1260, 1273, 1293, 1297, 1300, 1301, 1309, 1317, 1326, 1343, 1362, 1393], "the_aws_access_key_id": [40, 154, 166, 167, 352], "the_aws_region": [40, 352], "the_aws_secret_access_kei": [40, 154, 166, 167, 352], "thei": [38, 41, 48, 56, 64, 65, 97, 98, 134, 147, 165, 205, 257, 259, 287, 352, 633, 716, 724, 725, 845, 866, 877, 890, 904, 917, 962, 966, 968, 1304], "them": [64, 131, 133, 134, 135, 137, 152, 153, 155, 159, 160, 161, 162, 165, 168, 169, 170, 205, 229, 230, 242, 257, 268, 276, 284, 314, 322, 352, 389, 499, 529, 562, 625, 626, 633, 653, 773, 784, 785, 787, 788, 832, 833, 845, 867, 878, 885, 890, 900, 910, 962, 968, 999, 1120, 1125, 1184, 1222, 1223, 1362, 1380, 1390], "then1": 835, "then2": 835, "therebi": [165, 168, 169], "therefor": [54, 150, 156, 160, 162, 228, 352, 592, 845, 1118, 1362], "theta": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "thi": [1, 4, 5, 11, 13, 15, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63, 64, 65, 71, 72, 73, 74, 79, 89, 96, 98, 105, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 199, 201, 205, 207, 209, 210, 211, 212, 215, 216, 218, 220, 221, 224, 225, 228, 230, 234, 235, 240, 241, 242, 243, 247, 249, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 264, 266, 267, 268, 269, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 297, 299, 300, 301, 304, 306, 309, 310, 311, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 333, 338, 351, 352, 355, 356, 364, 367, 368, 377, 389, 395, 396, 397, 402, 404, 421, 422, 425, 431, 441, 442, 444, 449, 450, 451, 461, 463, 469, 470, 472, 476, 479, 482, 493, 497, 504, 513, 514, 521, 523, 526, 527, 529, 533, 555, 556, 562, 571, 572, 573, 574, 575, 576, 578, 583, 584, 588, 589, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 610, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 633, 640, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 677, 678, 679, 680, 685, 686, 687, 690, 692, 699, 702, 704, 706, 707, 711, 712, 713, 716, 723, 724, 725, 726, 727, 732, 736, 738, 740, 743, 750, 751, 753, 754, 755, 756, 760, 764, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 792, 793, 795, 797, 798, 801, 802, 803, 804, 807, 810, 812, 815, 817, 823, 826, 830, 834, 835, 836, 841, 845, 857, 860, 861, 862, 865, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 881, 884, 885, 887, 889, 890, 891, 893, 895, 899, 900, 904, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 925, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 940, 945, 959, 960, 961, 962, 966, 967, 968, 970, 977, 978, 987, 999, 1005, 1006, 1007, 1012, 1014, 1031, 1034, 1039, 1040, 1045, 1046, 1056, 1057, 1063, 1064, 1065, 1067, 1075, 1077, 1087, 1088, 1090, 1094, 1097, 1100, 1111, 1113, 1116, 1118, 1124, 1125, 1133, 1135, 1137, 1141, 1143, 1153, 1162, 1177, 1178, 1184, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1206, 1211, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1223, 1225, 1228, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1274, 1275, 1277, 1278, 1280, 1287, 1290, 1292, 1294, 1295, 1299, 1300, 1301, 1304, 1311, 1312, 1313, 1320, 1324, 1326, 1327, 1329, 1332, 1333, 1337, 1339, 1341, 1342, 1343, 1344, 1346, 1347, 1348, 1350, 1351, 1352, 1362, 1367, 1371, 1372, 1373, 1377, 1385, 1388, 1389, 1390, 1391, 1393], "thing": [165, 172], "think": [469, 470, 1087, 1088], "third": [591, 845], "thoma": [268, 352, 900, 962], "those": [5, 31, 41, 150, 155, 233, 280, 287, 311, 321, 352, 512, 643, 699, 807, 845, 907, 928, 962, 968, 1236, 1287, 1344, 1362], "though": [39, 152, 242, 352, 841, 885, 962], "thought": 835, "thousand": [9, 28], "thousands_separ": [9, 11, 28], "thread": [15, 38, 48, 64, 140, 150, 151, 153, 187, 188, 298, 352, 555, 592, 687, 768, 845, 867, 919, 962, 1007, 1177, 1200, 1275, 1362], "thread_loc": [592, 845], "thread_pool_s": 188, "three": [41, 210, 284, 313, 352, 442, 640, 653, 676, 705, 714, 729, 845, 910, 962, 1011, 1057, 1205, 1234, 1293, 1303, 1317, 1362], "threshold": [290, 352, 912, 962], "through": [152, 841, 968, 1362, 1377], "throughout": 205, "throw": [40, 133, 134, 137, 222, 281, 352, 707, 708, 863, 873, 908, 962, 1295, 1296, 1362], "thu": [41, 230, 352, 355, 775, 966, 1125, 1362], "thursdai": [242, 352, 449, 461, 770, 885, 962, 1063, 1075], "ti": [643, 845, 1236, 1362], "time": [13, 38, 40, 43, 47, 48, 49, 50, 51, 54, 62, 63, 64, 72, 74, 114, 154, 160, 162, 165, 166, 168, 169, 170, 181, 182, 185, 195, 220, 230, 242, 257, 258, 284, 322, 352, 384, 421, 422, 450, 451, 453, 454, 455, 458, 459, 469, 470, 472, 475, 476, 477, 479, 481, 482, 490, 493, 499, 550, 551, 583, 652, 653, 657, 659, 661, 663, 665, 668, 670, 672, 680, 728, 731, 735, 749, 750, 751, 773, 774, 784, 785, 786, 787, 788, 789, 795, 803, 832, 833, 845, 866, 867, 871, 885, 890, 891, 904, 910, 962, 968, 994, 1031, 1064, 1065, 1067, 1068, 1072, 1073, 1090, 1093, 1094, 1095, 1097, 1099, 1100, 1108, 1111, 1120, 1125, 1172, 1173, 1246, 1269, 1316, 1319, 1323, 1345, 1347, 1362, 1371, 1377, 1386, 1393], "time_column": [322, 352], "time_format": [38, 48, 352, 962], "time_unit": [72, 74, 451, 453, 459, 481, 493, 731, 786, 787, 788, 789, 795, 967, 968, 1065, 1067, 1073, 1099, 1111, 1319], "time_unit_m": [451, 1065], "time_unit_n": [451, 1065], "time_unit_u": 493, "time_zon": [72, 454, 456, 476, 731, 786, 787, 788, 967, 968, 1064, 1068, 1072, 1094, 1319], "timedelta": [242, 257, 284, 322, 352, 472, 477, 482, 490, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 784, 785, 787, 788, 832, 833, 845, 885, 890, 910, 962, 967, 968, 1078, 1084, 1090, 1095, 1108, 1120, 1222, 1223, 1277, 1352, 1362], "timeout": [64, 867, 962], "timestamp": [138, 154, 166, 242, 352, 476, 477, 490, 795, 885, 962, 1094, 1095, 1108, 1383], "timestamp_m": 481, "timestamp_n": 1099, "timestamp_u": [481, 1099], "timestep": 795, "timeunit": [38, 48, 72, 74, 352, 451, 453, 481, 493, 731, 786, 787, 788, 789, 962, 968, 1065, 1067, 1099, 1111, 1319], "timezon": [55, 72, 154, 166, 456, 968, 1386], "tip": [592, 845], "titl": [41, 352, 355, 1362, 1367, 1371], "titlecas": [736, 1324], "tm": [453, 482, 968, 1386], "to_arrow": [255, 352, 1343, 1362, 1390], "to_batch": [255, 352], "to_dict": [213, 287, 352, 863, 962, 968], "to_dummi": [309, 314, 352, 1362], "to_fram": [425, 459, 477, 481, 490, 728, 967, 1057, 1234, 1261, 1263, 1308, 1309, 1316, 1362, 1367], "to_init_repr": [138, 352, 1362], "to_jax": [314, 352, 1362], "to_list": [138, 284, 352, 1279, 1291, 1362], "to_lowercas": 624, "to_numpi": [309, 314, 352, 591, 845, 1362], "to_panda": [352, 1362], "to_phys": [845, 1039, 1362], "to_python": 967, "to_seri": [58, 237, 352, 728, 769, 820, 1316, 1385], "to_sql": [39, 352], "to_str": [479, 1097], "to_struct": [352, 700], "to_torch": [309, 352, 1362], "to_uppercas": [363, 623, 701, 845], "togeth": 1385, "token": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 167, 168, 169, 170, 190, 195, 352, 962], "tokyo": [138, 968], "tokyo_tz": 968, "toler": [174, 175, 176, 177, 257, 352, 890, 962], "tone": [41, 352], "tonight": [692, 716, 1280, 1304], "too": [15, 276, 352, 409, 633, 845, 962, 1019], "tooltip": [352, 355, 1362, 1367], "toomanyrowsreturnederror": [285, 352], "top": [41, 299, 315, 352, 355, 751, 845, 920, 924, 962, 1362, 1367, 1390], "top_col": [41, 352], "top_k": [212, 352, 421, 422, 751, 845, 861, 962, 1031, 1362], "top_k_bi": [421, 422, 750, 845], "top_row": [41, 352], "tor_id": 138, "torch": [173, 314, 352, 1346, 1362], "torchexporttyp": [314, 352], "total": [41, 228, 333, 352, 483, 484, 485, 486, 487, 488, 489, 544, 564, 845, 940, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1118, 1166, 1186, 1362], "total_gross": 1371, "toward": [333, 544, 564, 845, 940, 1166, 1186, 1362], "tp": [1, 60], "tpu": [309, 352, 1341, 1362], "tr15": [711, 1299], "trace": 75, "traceback": [174, 175, 176, 177, 310, 352, 648, 845, 1242, 1343, 1362], "tracebacktyp": 1390, "track": [154, 166, 167, 261, 352, 583, 1390], "trail": [29, 240, 352, 723, 724, 1311, 1312], "train": [314, 352], "train_lf": [933, 962], "transfer": 153, "transferencod": [406, 407, 694, 695, 1016, 1017, 1282, 1283], "transform": [261, 299, 352, 591, 736, 824, 845, 920, 962, 1324], "transform_dens": [1362, 1367], "transit": [233, 280, 352, 881, 907, 962], "translat": 152, "transpar": [866, 877, 904, 917, 962], "transpos": [276, 352], "travel": [154, 166], "travers": [656, 658, 660, 662, 664, 667, 669, 671, 845, 1249, 1250, 1252, 1255, 1256, 1257, 1362], "treat": [150, 151, 165, 207, 499, 533, 691, 693, 703, 714, 715, 835, 845, 970, 1120, 1153, 1279, 1281, 1291, 1302, 1303, 1362], "tree": [608, 877, 962], "tree_format": [877, 962], "trend": [41, 352], "tri": [261, 352], "triangl": [338, 945], "trigger": [40, 147, 259, 311, 352, 845, 1344, 1362], "trigonometri": [1383, 1389], "trim": [138, 1385], "trim_decimal_zero": 29, "trip": 152, "true": [7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 54, 63, 64, 65, 96, 131, 132, 133, 134, 136, 137, 138, 140, 141, 146, 147, 150, 151, 152, 154, 155, 156, 158, 161, 162, 165, 166, 168, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 190, 205, 209, 213, 214, 215, 220, 222, 227, 232, 233, 235, 237, 239, 240, 241, 242, 249, 250, 251, 254, 256, 257, 258, 259, 264, 265, 271, 272, 274, 276, 277, 280, 281, 285, 286, 287, 288, 290, 298, 299, 302, 305, 307, 309, 310, 311, 314, 316, 317, 318, 320, 321, 322, 326, 332, 334, 336, 339, 340, 341, 342, 343, 344, 345, 352, 355, 362, 363, 364, 365, 366, 367, 378, 380, 381, 384, 388, 389, 397, 401, 405, 406, 408, 411, 412, 417, 420, 422, 423, 424, 428, 436, 437, 438, 439, 440, 442, 449, 451, 454, 457, 459, 461, 462, 469, 470, 472, 473, 476, 477, 478, 481, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 500, 501, 508, 515, 517, 518, 519, 520, 523, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 546, 547, 551, 558, 560, 562, 578, 583, 590, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 627, 628, 630, 632, 635, 636, 640, 645, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 679, 680, 684, 686, 687, 690, 691, 692, 693, 694, 696, 702, 703, 704, 706, 707, 708, 714, 715, 719, 720, 722, 728, 730, 731, 733, 735, 739, 741, 742, 751, 753, 756, 759, 760, 761, 762, 763, 765, 768, 769, 770, 771, 775, 777, 784, 787, 793, 799, 803, 804, 811, 817, 820, 823, 824, 827, 829, 832, 835, 836, 845, 863, 864, 865, 866, 867, 871, 873, 877, 880, 881, 884, 885, 889, 890, 891, 893, 895, 899, 904, 907, 908, 912, 917, 919, 920, 925, 926, 927, 928, 931, 937, 939, 941, 943, 946, 947, 948, 949, 950, 951, 952, 961, 962, 967, 968, 975, 976, 988, 990, 991, 994, 998, 999, 1007, 1015, 1016, 1018, 1021, 1032, 1033, 1035, 1038, 1040, 1043, 1044, 1057, 1063, 1064, 1065, 1068, 1071, 1072, 1073, 1074, 1075, 1076, 1080, 1081, 1083, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1114, 1116, 1117, 1119, 1121, 1122, 1129, 1139, 1143, 1145, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1168, 1169, 1173, 1180, 1182, 1184, 1200, 1213, 1219, 1225, 1227, 1230, 1231, 1234, 1237, 1238, 1247, 1254, 1273, 1275, 1278, 1279, 1280, 1281, 1282, 1284, 1290, 1291, 1292, 1294, 1295, 1296, 1302, 1303, 1307, 1308, 1310, 1316, 1318, 1319, 1321, 1323, 1338, 1343, 1344, 1351, 1353, 1362, 1367, 1371, 1372, 1374, 1376, 1380, 1382, 1385, 1390, 1393], "truediv": [512, 845], "truncat": [21, 138, 150, 151, 165, 240, 242, 254, 286, 287, 306, 352, 885, 904, 962, 1389], "truncate_nod": [904, 962], "truncate_ragged_lin": [150, 151, 165], "truncate_str": 490, "truncate_td": 490, "trust": [444, 845, 872, 962], "try": [38, 43, 47, 48, 49, 50, 51, 63, 124, 150, 151, 156, 160, 162, 165, 168, 169, 170, 195, 352, 835, 866, 877, 904, 917, 962], "try_cast": 1383, "try_parse_d": [140, 150, 151, 165], "try_parse_hive_d": [162, 168, 170], "ts_local": [476, 1094], "tseri": [469, 470, 1087, 1088], "tstamp": 968, "tstamp_tokyo": 968, "tstamp_utc": 968, "tue": [352, 355], "tuesdai": [242, 352, 885, 962], "tupl": [41, 66, 153, 155, 161, 210, 254, 261, 274, 285, 286, 287, 294, 314, 330, 352, 607, 649, 845, 904, 917, 962, 967, 968, 1243, 1265, 1362], "turn": [8, 63, 150, 151, 165, 256, 257, 352, 866, 877, 889, 890, 895, 904, 962], "twice": [41, 352], "two": [41, 56, 97, 98, 133, 135, 137, 153, 210, 233, 235, 257, 258, 267, 268, 280, 286, 313, 319, 332, 338, 352, 356, 362, 446, 453, 512, 515, 518, 583, 640, 686, 766, 767, 773, 775, 777, 784, 787, 821, 822, 824, 845, 881, 890, 891, 899, 900, 907, 927, 939, 945, 962, 968, 1011, 1060, 1067, 1205, 1234, 1362, 1377, 1378, 1379, 1382, 1391], "two_a": 1390, "tworld": [725, 1311, 1313], "txt": [1, 13, 165, 691, 703, 1291, 1385], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 55, 58, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 131, 133, 134, 135, 136, 137, 139, 150, 151, 152, 154, 155, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 207, 210, 216, 226, 229, 235, 240, 242, 243, 255, 256, 261, 284, 289, 292, 304, 309, 310, 313, 314, 317, 329, 352, 364, 366, 369, 370, 371, 372, 373, 374, 377, 382, 383, 384, 386, 389, 400, 401, 405, 406, 407, 408, 409, 410, 411, 423, 425, 426, 427, 431, 432, 433, 434, 435, 442, 443, 449, 450, 452, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 502, 504, 515, 518, 521, 529, 530, 531, 532, 533, 534, 535, 544, 548, 549, 551, 556, 562, 564, 582, 583, 591, 592, 606, 640, 642, 646, 647, 648, 649, 651, 652, 653, 657, 659, 661, 663, 665, 668, 670, 672, 681, 682, 683, 690, 693, 694, 695, 698, 699, 700, 701, 704, 705, 706, 708, 709, 710, 718, 719, 720, 721, 728, 729, 733, 747, 748, 749, 756, 765, 773, 776, 783, 784, 785, 786, 787, 788, 789, 791, 799, 800, 802, 803, 804, 805, 806, 807, 817, 820, 831, 832, 833, 836, 841, 845, 857, 858, 866, 876, 877, 878, 885, 889, 904, 910, 911, 917, 925, 935, 962, 967, 970, 975, 976, 988, 990, 991, 992, 993, 994, 996, 998, 999, 1010, 1011, 1012, 1015, 1016, 1017, 1019, 1020, 1032, 1034, 1036, 1037, 1045, 1057, 1058, 1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1081, 1082, 1083, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1117, 1120, 1124, 1141, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1168, 1169, 1170, 1171, 1173, 1178, 1184, 1186, 1204, 1205, 1227, 1234, 1240, 1241, 1242, 1243, 1245, 1246, 1268, 1270, 1278, 1279, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1289, 1292, 1293, 1294, 1296, 1297, 1298, 1306, 1307, 1308, 1309, 1316, 1317, 1321, 1342, 1343, 1345, 1353, 1362, 1371, 1378, 1383, 1385, 1389, 1390], "type_coercion": [63, 866, 877, 904, 917, 962], "type_json": 197, "type_nam": 197, "type_text": 197, "typeerror": [40, 352], "typenam": [41, 352], "typic": [134, 152, 170, 261, 352, 458, 681, 845, 968, 1072, 1213, 1270, 1362], "tz": [731, 1319], "tzinfo": [72, 154, 166, 968], "u": [41, 72, 74, 170, 183, 257, 352, 451, 453, 459, 481, 493, 728, 731, 761, 763, 786, 787, 788, 789, 795, 890, 962, 967, 968, 1065, 1067, 1073, 1099, 1111, 1316, 1319, 1375, 1386], "u1": [310, 352], "u16": [165, 1388, 1393], "u32": [13, 152, 211, 213, 219, 273, 328, 329, 333, 337, 343, 345, 352, 362, 368, 375, 376, 377, 378, 379, 382, 383, 385, 394, 410, 426, 427, 435, 436, 523, 525, 544, 548, 549, 552, 564, 569, 615, 631, 643, 651, 652, 657, 659, 661, 663, 665, 668, 670, 672, 676, 693, 703, 704, 709, 710, 711, 749, 754, 756, 760, 764, 768, 769, 776, 778, 799, 802, 815, 845, 860, 863, 870, 902, 934, 935, 940, 944, 950, 952, 962, 968, 987, 988, 989, 992, 993, 995, 1004, 1032, 1036, 1037, 1039, 1051, 1143, 1170, 1171, 1174, 1186, 1191, 1236, 1245, 1246, 1262, 1281, 1291, 1292, 1297, 1298, 1345, 1349, 1351, 1362, 1371, 1379, 1380, 1381, 1385, 1390], "u64": [243, 329, 352, 521, 645, 845, 904, 935, 962, 968, 1141, 1238, 1362], "u8": [213, 307, 308, 320, 352, 648, 759, 845, 863, 962, 968, 1242, 1338, 1362, 1393], "udf": [187, 261, 275, 338, 352, 444, 592, 637, 807, 845, 872, 903, 945, 962, 1213, 1362], "ufunc": 104, "uid": 152, "uint": 1393, "uint16": [165, 439, 440, 745, 845, 968, 1054, 1055, 1333, 1343, 1346, 1362], "uint2": 1388, "uint32": [139, 173, 213, 228, 284, 329, 352, 377, 382, 383, 410, 426, 427, 435, 499, 515, 518, 544, 548, 549, 564, 646, 651, 652, 653, 657, 659, 661, 663, 665, 668, 670, 672, 693, 704, 709, 710, 749, 776, 799, 802, 845, 863, 910, 935, 962, 968, 988, 992, 993, 1020, 1032, 1036, 1037, 1118, 1120, 1170, 1171, 1186, 1240, 1245, 1246, 1281, 1292, 1297, 1298, 1345, 1346, 1362], "uint4": 1390, "uint64": [139, 243, 284, 329, 352, 382, 383, 499, 521, 548, 549, 645, 653, 657, 659, 661, 663, 665, 668, 670, 672, 845, 910, 935, 962, 968, 992, 993, 1120, 1141, 1170, 1171, 1238, 1346, 1362], "uint8": [152, 213, 308, 309, 310, 320, 352, 439, 440, 648, 745, 759, 845, 863, 962, 967, 968, 1054, 1055, 1242, 1333, 1346, 1362, 1393], "uint8_pair": 1393, "uit": [718, 1306], "uk": [700, 1288], "unabl": [106, 155], "unalias": 598, "unari": [629, 845], "unbias": [500, 501, 845, 1121, 1122, 1362], "unchang": [228, 352, 647, 749, 845, 895, 945, 962, 1118, 1241, 1345, 1362], "uncompress": [36, 43, 44, 47, 49, 51, 156, 168, 352, 962], "undefin": [752, 845], "under": [38, 43, 47, 48, 49, 50, 51, 56, 58, 59, 60, 61, 97, 98, 160, 162, 165, 168, 169, 170, 193, 194, 195, 276, 299, 352, 837, 838, 840, 841, 846, 847, 850, 852, 853, 854, 920, 962, 1354, 1356, 1358, 1363, 1368, 1369, 1370], "underestim": [228, 352, 1118, 1362], "underli": [1, 56, 71, 72, 74, 89, 98, 103, 113, 131, 133, 134, 135, 137, 152, 153, 155, 159, 160, 161, 162, 169, 178, 181, 185, 229, 230, 254, 255, 286, 304, 310, 352, 406, 451, 452, 453, 457, 460, 462, 463, 464, 465, 466, 467, 468, 471, 473, 474, 476, 478, 482, 491, 492, 493, 494, 645, 673, 691, 694, 703, 845, 878, 962, 968, 1016, 1039, 1065, 1066, 1067, 1071, 1074, 1076, 1077, 1081, 1082, 1083, 1085, 1086, 1089, 1091, 1092, 1094, 1096, 1100, 1109, 1110, 1111, 1112, 1125, 1238, 1258, 1268, 1279, 1282, 1291, 1337, 1343, 1362, 1390], "understood": 807, "undo": [609, 616, 617, 619, 621, 623, 624], "unexpect": [113, 122, 152, 233, 280, 352, 591, 592, 845, 881, 907, 962, 1213, 1362], "unhelpfulli": [174, 176], "unicod": [21, 427, 705, 710, 711, 718, 729, 968, 1037, 1293, 1298, 1299, 1306, 1317, 1385], "unicodeform": [711, 1299], "unifi": [41, 309, 314, 352, 968], "uniform": [41, 352, 523, 640, 845, 1143, 1234, 1362], "unimod": [684, 845, 1273, 1362], "union": [63, 65, 575, 866, 877, 904, 917, 962, 968, 1197, 1389, 1390], "uniqu": [47, 51, 57, 75, 147, 155, 178, 179, 180, 183, 185, 211, 251, 256, 272, 276, 287, 343, 352, 368, 379, 394, 442, 540, 569, 615, 640, 728, 730, 731, 735, 754, 756, 764, 815, 845, 860, 889, 950, 962, 978, 989, 1004, 1057, 1161, 1191, 1220, 1234, 1316, 1318, 1319, 1323, 1349, 1351, 1362, 1378, 1380], "unique_column_valu": [276, 352], "unique_count": [845, 1362], "uniquekeepstrategi": [317, 352, 925, 962], "unit": [41, 72, 74, 147, 174, 175, 176, 177, 181, 185, 228, 352, 410, 451, 453, 459, 475, 481, 493, 499, 505, 589, 604, 728, 731, 755, 772, 786, 787, 788, 789, 795, 845, 904, 962, 968, 1020, 1065, 1067, 1073, 1093, 1099, 1111, 1118, 1120, 1126, 1211, 1316, 1319, 1350, 1362, 1393], "uniti": [190, 191, 193, 194, 195, 203, 857], "unity_catalog": 198, "univers": [207, 970], "unix": [71, 72, 459, 490, 795, 1073, 1108], "unknown": [583, 699, 805, 1287], "unless": [41, 57, 133, 256, 309, 314, 352, 723, 724, 820, 889, 962, 1311, 1385], "unlik": [146, 242, 321, 352, 885, 928, 962], "unnam": [701, 1289], "unnest": [146, 352, 442, 640, 651, 700, 701, 720, 721, 741, 743, 756, 835, 845, 962, 1011, 1057, 1205, 1234, 1245, 1308, 1309, 1362, 1383, 1389], "unpivot": [267, 352, 899, 962], "unregist": [1373, 1374, 1375, 1390, 1392], "unsaf": [147, 845], "unset": [39, 162, 168, 180, 337, 352, 414, 415, 416, 418, 419, 476, 583, 845, 944, 1024, 1025, 1026, 1028, 1029, 1094, 1362, 1371], "unsign": [90, 91, 92, 93, 645, 845, 968, 1238, 1362], "unsigned_integ": 968, "unstabl": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 79, 128, 130, 141, 142, 143, 144, 145, 146, 152, 154, 160, 162, 165, 166, 167, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 299, 309, 314, 321, 352, 355, 356, 441, 442, 449, 461, 523, 592, 640, 654, 655, 657, 659, 661, 663, 665, 666, 668, 670, 672, 770, 772, 845, 866, 867, 877, 904, 917, 920, 928, 936, 962, 1040, 1056, 1057, 1063, 1075, 1143, 1234, 1247, 1248, 1251, 1253, 1254, 1341, 1346, 1362, 1367], "unstack": 352, "unstackdirect": [320, 352], "unsuit": 129, "unsupport": [40, 352], "until": [48, 49, 50, 51, 96, 97, 242, 259, 352, 712, 713, 738, 885, 962, 1300, 1301, 1326], "up": [11, 41, 88, 153, 254, 257, 276, 286, 287, 293, 306, 352, 430, 431, 592, 705, 714, 715, 729, 845, 889, 890, 895, 915, 962, 968, 1042, 1293, 1302, 1303, 1317, 1362], "upcast": [55, 367, 845], "upcast_integer_typ": [1, 60], "updat": [40, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 205, 220, 352, 871, 962], "updated_at": [196, 199, 200], "updated_bi": [196, 199, 200], "upgrad": 109, "upheld": [895, 962], "upon": 151, "upper": [150, 151, 152, 228, 242, 352, 431, 523, 529, 583, 618, 755, 765, 784, 785, 787, 788, 803, 804, 832, 833, 845, 885, 962, 1045, 1118, 1143, 1148, 1211, 1350, 1362, 1380, 1383], "upper_bound": [242, 352, 431, 529, 583, 845, 885, 962, 1045, 1148, 1211, 1362], "uppercas": [624, 737, 1325, 1385], "upsampl": [242, 352, 885, 962], "urandom": [410, 1020], "uri": [39, 40, 152, 153, 154, 166, 167, 352], "url": [152, 153, 162, 168, 170, 190, 699, 701, 1287, 1289], "urllib": 153, "us": [1, 7, 9, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 63, 64, 65, 66, 72, 88, 97, 98, 101, 105, 128, 132, 134, 135, 137, 139, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 190, 211, 212, 213, 216, 220, 222, 224, 225, 231, 232, 233, 235, 241, 242, 249, 251, 253, 254, 255, 257, 261, 267, 271, 272, 274, 275, 276, 280, 284, 285, 286, 287, 288, 290, 291, 293, 298, 299, 300, 304, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 319, 320, 321, 322, 323, 326, 327, 328, 329, 331, 338, 352, 355, 362, 364, 366, 368, 377, 378, 401, 406, 407, 409, 422, 424, 426, 427, 428, 431, 441, 444, 447, 448, 456, 475, 476, 477, 479, 482, 490, 493, 495, 498, 499, 500, 501, 502, 506, 507, 508, 512, 527, 528, 529, 541, 555, 571, 579, 583, 585, 591, 592, 595, 616, 619, 621, 623, 624, 633, 640, 643, 645, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 675, 677, 679, 680, 684, 686, 687, 689, 690, 691, 692, 694, 695, 696, 698, 699, 700, 702, 703, 704, 707, 708, 709, 710, 711, 714, 715, 716, 718, 720, 722, 724, 725, 726, 727, 728, 730, 731, 735, 738, 739, 743, 751, 757, 758, 760, 761, 762, 763, 764, 767, 768, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 795, 799, 800, 802, 803, 805, 807, 808, 809, 811, 813, 814, 817, 820, 821, 822, 823, 824, 826, 827, 828, 829, 832, 833, 834, 835, 836, 841, 844, 845, 856, 857, 860, 861, 862, 863, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 884, 885, 890, 893, 899, 904, 907, 910, 911, 912, 913, 915, 917, 919, 920, 921, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 945, 962, 966, 967, 968, 975, 976, 978, 1007, 1011, 1016, 1017, 1019, 1036, 1037, 1040, 1056, 1058, 1061, 1062, 1070, 1079, 1080, 1093, 1094, 1095, 1097, 1100, 1108, 1111, 1114, 1119, 1120, 1121, 1122, 1127, 1128, 1134, 1140, 1147, 1148, 1163, 1177, 1193, 1200, 1205, 1213, 1234, 1236, 1238, 1241, 1243, 1245, 1246, 1247, 1248, 1260, 1261, 1263, 1264, 1267, 1273, 1275, 1277, 1278, 1279, 1280, 1282, 1283, 1286, 1287, 1288, 1290, 1291, 1292, 1297, 1298, 1299, 1302, 1303, 1304, 1306, 1308, 1316, 1318, 1319, 1323, 1326, 1337, 1338, 1340, 1343, 1344, 1352, 1362, 1371, 1372, 1373, 1374, 1375, 1377, 1378, 1385, 1386, 1390, 1392, 1393], "usag": [181, 185, 296, 352, 835, 968, 1268, 1362], "usd": [240, 352, 1393], "use_abs_path": 147, "use_pyarrow": [47, 51, 150, 154, 156, 158, 162, 166, 310, 352, 962, 1343, 1362], "use_pyarrow_extension_arrai": [311, 352, 1344, 1362], "use_pyarrow_write_to_dataset": [47, 352], "use_statist": [162, 170], "user": [39, 145, 147, 152, 153, 207, 261, 275, 338, 352, 591, 592, 637, 677, 793, 807, 845, 903, 945, 962, 966, 970, 1213, 1264, 1362], "user_conn": 152, "usernam": [150, 153, 156, 158], "userwarn": 1, "usr": 152, "usual": [105, 153, 205, 314, 352, 450, 1064], "utc": [154, 166, 450, 454, 456, 458, 476, 728, 731, 967, 968, 1064, 1068, 1072, 1094, 1316, 1319], "utc_tz": 968, "utf": [38, 48, 87, 352, 962], "utf8": [21, 150, 151, 165, 705, 718, 729, 1293, 1306, 1317], "utf8_borders_onli": 21, "utf8_ful": [21, 57, 138], "utf8_full_condens": [7, 21, 138], "utf8_horizontal_onli": 21, "utf8_no_bord": 21, "util": [314, 352, 795, 962], "uvloop": 152, "uvw": [700, 1288], "v": [8, 9, 10, 47, 228, 352, 676, 761, 763, 845, 1262, 1362, 1374, 1375], "v1": 33, "v2": [8, 10, 156, 168], "val": [41, 283, 352, 592, 637, 749, 835, 845, 909, 962], "valid": [38, 41, 48, 72, 96, 145, 150, 152, 156, 158, 162, 165, 185, 205, 222, 228, 256, 257, 281, 352, 441, 691, 693, 699, 700, 701, 703, 708, 714, 715, 835, 845, 873, 889, 890, 908, 937, 962, 968, 1056, 1118, 1279, 1281, 1287, 1288, 1289, 1291, 1296, 1302, 1303, 1362, 1371, 1372], "validate_output_schema": [895, 962], "validate_schema": [96, 145], "vals_phys": [749, 845], "valu": [4, 5, 11, 12, 13, 14, 18, 21, 29, 31, 37, 38, 41, 47, 48, 51, 52, 54, 56, 57, 65, 66, 69, 75, 76, 84, 85, 94, 98, 107, 133, 134, 136, 137, 143, 150, 151, 152, 153, 162, 165, 168, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 205, 209, 211, 212, 213, 220, 224, 225, 227, 230, 231, 232, 233, 237, 240, 242, 243, 244, 248, 252, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 274, 276, 277, 278, 280, 281, 284, 285, 286, 287, 288, 295, 298, 300, 301, 302, 303, 305, 306, 310, 311, 315, 316, 319, 320, 321, 322, 323, 330, 333, 334, 336, 339, 340, 342, 343, 352, 355, 356, 360, 361, 362, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 402, 403, 404, 406, 407, 408, 409, 410, 411, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 442, 445, 447, 448, 453, 457, 468, 473, 482, 491, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 547, 548, 549, 552, 553, 554, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 576, 578, 579, 580, 581, 583, 584, 585, 587, 589, 590, 591, 592, 593, 594, 595, 600, 611, 612, 613, 614, 615, 625, 626, 627, 628, 631, 633, 634, 637, 638, 640, 641, 643, 646, 647, 648, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 681, 682, 683, 684, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 699, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 729, 738, 740, 744, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 768, 771, 773, 774, 776, 778, 779, 780, 781, 782, 792, 793, 798, 799, 800, 801, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 819, 820, 821, 822, 828, 829, 835, 845, 860, 861, 871, 874, 875, 879, 880, 881, 885, 887, 888, 889, 890, 896, 897, 898, 899, 901, 902, 905, 906, 907, 908, 910, 916, 919, 921, 922, 924, 927, 928, 929, 940, 941, 943, 946, 947, 949, 950, 962, 968, 973, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1032, 1033, 1036, 1037, 1038, 1042, 1045, 1047, 1048, 1049, 1051, 1056, 1057, 1058, 1059, 1061, 1062, 1067, 1071, 1086, 1091, 1100, 1109, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 1132, 1133, 1134, 1135, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1166, 1167, 1168, 1169, 1170, 1171, 1174, 1175, 1176, 1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1198, 1200, 1201, 1202, 1203, 1206, 1207, 1213, 1214, 1215, 1217, 1218, 1220, 1222, 1223, 1225, 1226, 1228, 1229, 1233, 1234, 1235, 1236, 1240, 1241, 1242, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1261, 1262, 1263, 1266, 1270, 1271, 1272, 1273, 1275, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1317, 1326, 1329, 1333, 1334, 1335, 1336, 1343, 1344, 1345, 1349, 1351, 1353, 1362, 1371, 1376, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1388, 1390, 1392, 1393], "value1": [687, 845], "value2": [687, 845], "value_a": 1390, "value_b": 1390, "value_count": [754, 845, 1362], "value_cum_sum": [440, 845], "value_cum_sum_all_fil": [440, 845], "value_nam": [267, 319, 352, 899, 927, 962], "value_var": [267, 319, 352, 899, 927, 962], "valueerror": [10, 16, 21], "valueexcept": 805, "var": [41, 186, 352, 671, 672, 845, 962, 1362, 1379], "var_samp": 1379, "vari": [155, 161, 450, 1064, 1393], "variabl": [31, 38, 43, 47, 48, 49, 50, 51, 63, 64, 84, 160, 162, 165, 168, 169, 170, 184, 187, 195, 267, 307, 319, 352, 866, 867, 877, 899, 904, 917, 927, 962, 1338, 1362, 1372, 1374, 1390], "variable_nam": [267, 319, 352, 899, 927, 962], "variad": 152, "varianc": [323, 352, 501, 541, 671, 672, 757, 834, 845, 929, 962, 1122, 1163, 1257, 1352, 1362, 1383], "variou": [152, 210, 216, 352, 845, 868, 962, 967, 968, 1362], "vector": [656, 658, 660, 662, 664, 667, 669, 671, 845, 1249, 1250, 1252, 1255, 1256, 1257, 1362], "vector_index_format": 198, "vectoris": [469, 470, 1087, 1088], "vein": 205, "verbos": [30, 174, 176, 205, 700, 1288], "veri": [152, 254, 316, 352, 592, 845, 945, 1384], "verifi": [257, 352, 890, 962], "versicolor": [352, 355], "version": [39, 40, 43, 44, 54, 62, 63, 66, 132, 138, 150, 151, 154, 155, 156, 158, 162, 165, 166, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 188, 195, 209, 211, 212, 221, 242, 243, 256, 267, 276, 284, 292, 299, 304, 309, 310, 314, 315, 322, 328, 333, 352, 355, 422, 441, 444, 449, 456, 469, 470, 482, 493, 498, 500, 501, 514, 521, 599, 600, 606, 610, 647, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 690, 698, 732, 743, 751, 758, 767, 770, 775, 819, 821, 822, 824, 845, 860, 861, 866, 872, 877, 885, 889, 899, 904, 906, 910, 914, 917, 920, 924, 933, 934, 940, 962, 968, 1056, 1063, 1070, 1079, 1080, 1087, 1088, 1100, 1111, 1117, 1119, 1121, 1122, 1140, 1141, 1241, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1278, 1286, 1320, 1337, 1341, 1343, 1346, 1362, 1367, 1390], "versu": [220, 352, 871, 962], "vertic": [65, 230, 320, 324, 352, 690, 706, 1278, 1294], "vertical_relax": 65, "via": [31, 55, 150, 151, 152, 156, 160, 162, 165, 168, 169, 170, 208, 210, 221, 254, 286, 352, 444, 592, 701, 845, 872, 906, 962, 971, 1289], "view": [202, 592, 845], "virtual": 147, "visibl": [18, 228, 352, 1118, 1362], "visit": [441, 845, 1056, 1362], "visual": [249, 251, 352, 607, 917, 962], "volk": 146, "vote": [699, 701, 1287, 1289], "vowel": [714, 715, 1302, 1303], "vstack": [65, 230, 352], "w": [41, 152, 242, 287, 352, 693, 697, 699, 701, 761, 763, 885, 962, 968, 1281, 1285, 1287, 1289, 1312, 1374, 1375, 1378], "w_i": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "wa": [39, 43, 44, 62, 105, 138, 150, 151, 155, 156, 158, 162, 165, 168, 169, 170, 174, 175, 176, 177, 212, 221, 242, 256, 276, 284, 304, 309, 310, 315, 322, 352, 355, 422, 441, 444, 498, 500, 501, 648, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 716, 751, 789, 821, 822, 845, 861, 872, 885, 889, 910, 924, 962, 968, 1056, 1117, 1119, 1121, 1122, 1242, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1304, 1337, 1343, 1362, 1367, 1385, 1390], "wai": [97, 98, 131, 133, 134, 135, 137, 159, 160, 169, 241, 255, 275, 298, 331, 352, 477, 637, 687, 699, 776, 835, 841, 845, 869, 876, 884, 903, 911, 919, 930, 938, 945, 962, 966, 1095, 1287], "wait": [48, 49, 50, 51, 962], "walk": 774, "want": [64, 134, 136, 150, 155, 156, 160, 162, 165, 205, 230, 261, 272, 284, 299, 352, 426, 449, 461, 508, 591, 592, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 680, 692, 709, 714, 715, 716, 770, 779, 784, 787, 793, 817, 820, 836, 845, 867, 920, 937, 962, 968, 1036, 1063, 1075, 1125, 1213, 1280, 1297, 1302, 1303, 1304, 1362, 1377], "warehous": 153, "warn": [100, 101, 104, 105, 108, 115, 117, 118, 128, 167, 633, 803, 804, 845, 1362], "watermark": [47, 352], "wb": [41, 352], "we": [47, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 210, 220, 221, 242, 257, 276, 284, 322, 352, 355, 444, 472, 477, 490, 523, 555, 583, 591, 592, 653, 657, 659, 661, 663, 665, 668, 670, 672, 701, 714, 715, 733, 783, 784, 785, 786, 787, 788, 805, 832, 833, 835, 845, 871, 872, 881, 885, 890, 895, 907, 910, 962, 1090, 1095, 1108, 1143, 1177, 1213, 1289, 1303, 1321, 1362, 1367, 1374], "weather": [714, 715, 1302, 1303], "wed": [352, 355], "wednesdai": [242, 352, 479, 482, 885, 962, 1097, 1100], "week": [242, 257, 284, 322, 352, 449, 461, 472, 477, 490, 492, 499, 653, 657, 659, 661, 663, 665, 668, 670, 672, 770, 784, 785, 787, 788, 789, 832, 833, 845, 885, 890, 910, 962, 968, 1063, 1075, 1090, 1095, 1108, 1110, 1120, 1362, 1386], "week_mask": [449, 461, 770, 1063, 1075], "weekdai": [457, 473], "weekend": [449, 461, 770, 1063, 1075], "weekli": [242, 352, 490, 885, 962, 1108], "weghorst": [701, 1289], "weight": [146, 498, 499, 500, 501, 655, 656, 658, 660, 662, 664, 667, 669, 671, 684, 845, 1119, 1120, 1121, 1122, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1273, 1362], "wei\u00df": 1385, "well": [41, 150, 151, 152, 165, 352, 529, 824, 845, 1148, 1362, 1390], "were": [205, 647, 648, 841, 845, 1241, 1242, 1362], "west": [75, 258, 352, 891, 962], "what": [52, 210, 272, 352, 449, 591, 692, 716, 845, 1063, 1280, 1304], "whatev": 205, "when": [10, 11, 15, 18, 20, 24, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 55, 56, 72, 88, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 145, 146, 150, 151, 152, 153, 155, 156, 158, 160, 161, 162, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 181, 185, 205, 212, 220, 226, 228, 230, 232, 233, 235, 242, 256, 258, 261, 268, 275, 281, 285, 287, 290, 291, 295, 298, 304, 307, 309, 310, 314, 315, 317, 321, 327, 352, 396, 409, 426, 427, 431, 449, 461, 498, 500, 501, 507, 576, 583, 604, 637, 647, 648, 678, 686, 687, 692, 698, 702, 704, 705, 709, 710, 716, 718, 723, 724, 725, 728, 729, 768, 770, 779, 793, 803, 845, 861, 871, 880, 885, 889, 891, 895, 900, 908, 912, 913, 916, 919, 924, 925, 928, 932, 959, 962, 1006, 1019, 1036, 1037, 1045, 1058, 1063, 1075, 1118, 1119, 1121, 1122, 1125, 1128, 1153, 1198, 1241, 1242, 1261, 1263, 1266, 1280, 1286, 1290, 1292, 1293, 1297, 1298, 1304, 1306, 1311, 1312, 1313, 1316, 1317, 1337, 1338, 1343, 1362, 1377, 1390], "when1": 835, "when2": 835, "when_matched_update_al": [40, 352], "when_not_matched_insert_al": [40, 352], "where": [41, 54, 57, 105, 152, 153, 155, 224, 225, 230, 233, 242, 254, 258, 267, 276, 280, 286, 299, 300, 309, 314, 319, 321, 323, 352, 378, 482, 492, 495, 497, 499, 508, 579, 585, 591, 628, 646, 676, 684, 687, 689, 716, 736, 757, 769, 775, 777, 821, 822, 824, 826, 834, 835, 845, 874, 875, 881, 885, 891, 899, 907, 920, 921, 927, 928, 929, 962, 988, 1100, 1110, 1114, 1116, 1120, 1125, 1129, 1225, 1240, 1262, 1273, 1277, 1304, 1324, 1352, 1353, 1362, 1371, 1379, 1389, 1390, 1392], "wherea": [150, 165, 284, 352, 424, 428, 477, 490, 625, 626, 653, 845, 910, 962, 1095, 1108, 1222, 1223, 1362], "wherev": [41, 261, 338, 352, 592, 845, 1213, 1362], "whether": [38, 48, 52, 54, 96, 135, 137, 145, 146, 155, 161, 162, 168, 170, 185, 189, 227, 253, 257, 293, 298, 352, 364, 366, 380, 381, 461, 462, 478, 520, 546, 547, 633, 677, 687, 702, 704, 768, 793, 845, 890, 895, 906, 915, 919, 962, 968, 975, 976, 990, 991, 1035, 1040, 1075, 1076, 1096, 1117, 1139, 1140, 1168, 1169, 1290, 1292, 1362, 1374, 1390], "which": [1, 6, 10, 11, 21, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 65, 134, 136, 150, 151, 152, 153, 154, 155, 160, 161, 162, 165, 166, 167, 168, 169, 170, 181, 184, 186, 205, 212, 213, 220, 221, 224, 225, 228, 230, 231, 241, 242, 247, 256, 257, 276, 284, 292, 309, 310, 315, 317, 321, 322, 352, 364, 401, 409, 444, 449, 461, 472, 477, 479, 490, 499, 505, 529, 531, 534, 536, 537, 538, 539, 583, 591, 592, 604, 606, 653, 657, 659, 661, 663, 665, 668, 670, 672, 715, 733, 770, 784, 785, 787, 788, 789, 803, 804, 832, 833, 835, 845, 861, 863, 866, 869, 871, 872, 874, 875, 876, 877, 885, 889, 890, 904, 906, 910, 914, 917, 924, 925, 928, 930, 962, 968, 1011, 1019, 1063, 1075, 1090, 1095, 1097, 1108, 1118, 1120, 1125, 1126, 1148, 1151, 1154, 1156, 1157, 1158, 1159, 1205, 1263, 1321, 1341, 1343, 1362, 1372, 1378, 1390, 1393], "while": [40, 64, 151, 154, 155, 166, 170, 181, 185, 195, 205, 254, 267, 316, 319, 321, 352, 427, 647, 710, 845, 867, 899, 927, 928, 962, 1037, 1241, 1298, 1362], "white": [41, 352], "whitespac": [138, 723, 724, 725, 1311, 1312, 1313, 1385], "whole": [591, 686, 687, 699, 845, 945, 962, 1287], "whose": [57, 99, 257, 276, 352, 502, 791, 845, 890, 962, 968], "why": [866, 877, 904, 917, 962], "wide": [152, 240, 267, 276, 319, 320, 352, 899, 927, 962], "wider": 55, "width": [27, 41, 66, 150, 151, 165, 352, 355, 582, 772, 962, 1204, 1362, 1367], "wiki": 21, "wikipedia": 21, "wildcard": [147, 502, 739, 779, 780, 793, 819, 841, 845], "win_loss": [41, 352], "window": [150, 151, 165, 242, 284, 352, 441, 498, 500, 501, 592, 633, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 773, 821, 822, 845, 885, 910, 962, 1056, 1119, 1121, 1122, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1362], "window_s": [654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 821, 822, 845, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1362], "windowmappingstrategi": [633, 845], "winter": [702, 704, 714, 715, 1290, 1292], "wise": [41, 57, 152, 235, 352, 369, 370, 371, 372, 373, 374, 432, 433, 434, 503, 587, 681, 682, 683, 747, 748, 793, 819, 845, 979, 980, 981, 982, 983, 984, 1047, 1048, 1049, 1123, 1209, 1210, 1270, 1271, 1272, 1335, 1336, 1362], "wish": [212, 315, 352, 421, 422, 750, 751, 845, 861, 924, 962, 1031, 1347, 1362], "with_column": [1, 13, 60, 63, 145, 242, 275, 284, 314, 320, 327, 352, 361, 363, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 394, 395, 396, 397, 401, 406, 407, 409, 410, 423, 424, 426, 427, 428, 431, 436, 437, 438, 439, 440, 442, 445, 449, 450, 452, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 491, 492, 494, 496, 497, 499, 506, 507, 512, 517, 519, 521, 527, 528, 529, 532, 533, 535, 536, 537, 538, 539, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 590, 591, 592, 612, 614, 616, 617, 619, 621, 623, 624, 627, 628, 629, 633, 634, 637, 638, 640, 643, 647, 648, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 678, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 732, 733, 734, 736, 737, 738, 740, 743, 744, 749, 752, 759, 761, 763, 766, 770, 771, 772, 773, 774, 779, 780, 782, 783, 785, 786, 790, 800, 803, 804, 806, 809, 811, 814, 825, 829, 831, 833, 835, 841, 845, 866, 877, 885, 887, 903, 904, 910, 917, 932, 962, 968, 1057, 1094, 1234, 1292, 1362, 1390], "with_column_nam": 165, "with_columns_seq": [352, 962], "with_context": 962, "with_field": [592, 845], "with_replac": [288, 352, 571, 675, 845, 1193, 1260, 1362], "with_row_count": [352, 962], "with_row_index": [1, 284, 328, 352, 657, 659, 661, 663, 665, 668, 670, 672, 845, 934, 962, 1261, 1362, 1367], "within": [47, 66, 76, 84, 174, 175, 176, 177, 196, 197, 199, 241, 242, 243, 257, 284, 322, 352, 521, 643, 687, 845, 885, 890, 910, 962, 1141, 1362, 1390], "without": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 73, 79, 105, 108, 130, 138, 141, 142, 143, 144, 145, 146, 154, 157, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 256, 258, 299, 309, 310, 314, 320, 321, 352, 355, 356, 441, 442, 449, 461, 523, 592, 640, 654, 655, 657, 659, 661, 663, 665, 666, 668, 670, 672, 692, 702, 704, 716, 770, 772, 776, 803, 804, 823, 845, 866, 867, 877, 889, 891, 904, 920, 928, 936, 962, 966, 1035, 1040, 1056, 1057, 1063, 1075, 1143, 1234, 1247, 1248, 1251, 1253, 1254, 1280, 1290, 1292, 1304, 1341, 1343, 1346, 1362, 1367, 1392], "without_fil": [154, 166, 167], "wod": [725, 1313], "womp": [318, 352, 926, 962], "word": [153, 714, 715, 724, 725, 736, 1324, 1385], "work": [41, 73, 79, 150, 151, 156, 160, 162, 171, 291, 327, 352, 364, 366, 402, 426, 427, 430, 431, 502, 511, 555, 584, 591, 592, 616, 617, 619, 621, 623, 624, 633, 705, 709, 710, 718, 729, 753, 803, 845, 906, 913, 932, 962, 966, 968, 975, 976, 1012, 1036, 1037, 1042, 1045, 1132, 1177, 1206, 1293, 1297, 1298, 1306, 1317, 1348, 1362], "workaround": 352, "workbook": [41, 155, 161, 352], "workday_raas_format": 198, "worker": [906, 962], "working_with_conditional_format": [41, 352], "working_with_sparklin": [41, 352], "worksheet": [41, 155, 161, 352], "workspac": 190, "workspace_url": 190, "world": [1, 21, 692, 716, 723, 724, 725, 968, 1184, 1280, 1304, 1311, 1312, 1313, 1373, 1376, 1385], "wors": [919, 962], "worth": [555, 1177], "worthwhil": [174, 176], "would": [104, 150, 151, 165, 210, 310, 314, 352, 355, 377, 388, 449, 461, 560, 591, 592, 603, 633, 643, 768, 770, 845, 987, 998, 1063, 1075, 1182, 1236, 1343, 1362, 1367, 1388], "wrap": [86, 138, 423, 529, 591, 845, 1032, 1362], "wrap_numer": [423, 845, 1032, 1362], "wrapper": [64, 867, 962], "writabl": [36, 38, 43, 44, 45, 46, 47, 292, 310, 352, 1343, 1362], "write": [36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 141, 149, 151, 156, 205, 216, 352, 431, 607, 610, 845, 893, 917, 962, 968, 1045, 1362], "write_avro": 352, "write_clipboard": [149, 352], "write_csv": [37, 151, 165, 352], "write_databas": 352, "write_delta": 352, "write_excel": 352, "write_iceberg": 352, "write_ipc": [156, 352], "write_ipc_stream": 352, "write_json": 352, "write_markdown_frame_to_stdout": 205, "write_ndjson": [45, 352], "write_parquet": 352, "write_t": [47, 352], "write_to_dataset": [47, 352], "writeabl": [310, 352, 1343, 1362], "writer": [40, 352], "writer_properti": [40, 352], "writerproperti": [40, 352], "written": [6, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 292, 352, 606, 914, 962], "ww": [1385, 1392], "www": [711, 741, 1299], "x": [28, 57, 65, 88, 107, 132, 138, 141, 150, 151, 153, 155, 161, 165, 178, 179, 181, 209, 228, 246, 249, 251, 256, 276, 286, 287, 316, 319, 320, 352, 355, 361, 363, 365, 384, 389, 410, 436, 443, 496, 497, 512, 517, 519, 521, 543, 550, 562, 588, 590, 591, 592, 612, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 632, 638, 646, 647, 648, 652, 681, 684, 720, 743, 744, 749, 752, 759, 761, 763, 766, 767, 773, 777, 779, 780, 782, 793, 805, 806, 809, 811, 814, 819, 824, 829, 835, 845, 889, 895, 918, 920, 927, 962, 967, 968, 999, 1039, 1051, 1128, 1147, 1213, 1241, 1242, 1270, 1273, 1308, 1341, 1345, 1346, 1362, 1367, 1374, 1375, 1378, 1384, 1385, 1390, 1392], "x00": [405, 406, 407, 408, 409, 411, 694, 1015, 1016, 1017, 1018, 1019, 1021, 1282], "x01": [409, 1019], "x05": [409, 1019], "x07": 410, "x1": 410, "x10": [409, 1019], "x80": 410, "x83": 410, "x88": 410, "x8e": 410, "x99": 410, "x_": [499, 845, 1120, 1362], "x_0": [320, 352, 498, 499, 500, 501, 845, 1119, 1120, 1121, 1122, 1362], "x_1": [320, 352, 499, 845, 1120, 1362], "x_2": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "x_i": [499, 845, 1120, 1362], "x_invers": [638, 845], "x_pow_8": 1384, "x_round": 1384, "x_round_1": 1384, "x_squar": [638, 845], "x_t": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "x_uniqu": [615, 845], "x_y": [389, 562], "xb": 410, "xb9neq": 410, "xbd": 410, "xc14": 410, "xd3": 410, "xdist": 1393, "xee": 410, "xf4v": 410, "xf9": 410, "xfb": 410, "xff": [405, 406, 407, 408, 411, 694, 1015, 1016, 1017, 1018, 1021, 1282], "xi": [700, 1288], "xl": 155, "xlog2": [614, 638, 845], "xlsb": 155, "xlsx": [41, 155, 352], "xlsx2csv": [155, 173], "xlsx2csv_option": 155, "xlsxwriter": [41, 173, 352], "xor": [420, 845, 1030, 1362, 1381], "xor_xi": [759, 845], "xx": [11, 58, 60, 185, 220, 247, 299, 352, 871, 962, 968, 1378, 1385, 1392], "xxx": [224, 352, 741, 874, 962], "xy": [58, 60], "xyz": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 361, 693, 700, 845, 1281, 1288, 1339, 1362, 1385], "y": [28, 57, 65, 88, 107, 132, 138, 141, 178, 179, 181, 209, 228, 249, 251, 256, 276, 286, 287, 316, 319, 320, 352, 355, 361, 363, 365, 384, 389, 410, 479, 482, 496, 497, 517, 519, 543, 550, 562, 590, 592, 615, 617, 619, 621, 623, 624, 627, 628, 632, 646, 647, 648, 652, 728, 730, 731, 743, 752, 759, 761, 763, 766, 767, 777, 782, 789, 805, 809, 811, 814, 824, 829, 845, 889, 918, 920, 927, 962, 967, 968, 999, 1039, 1097, 1100, 1241, 1242, 1316, 1318, 1319, 1362, 1367, 1378, 1385, 1386, 1392], "y_": [498, 499, 500, 501, 845, 1119, 1120, 1121, 1122, 1362], "y_0": [320, 352, 498, 499, 500, 501, 845, 1119, 1120, 1121, 1122, 1362], "y_1": [320, 352], "y_i": [499, 845, 1120, 1362], "y_mul": 743, "y_t": [498, 500, 501, 845, 1119, 1121, 1122, 1362], "y_uniqu": [615, 845], "ya": [718, 1306], "ya29": 167, "ye": [141, 835], "year": [52, 54, 242, 257, 284, 299, 322, 352, 449, 461, 462, 463, 472, 473, 475, 477, 490, 491, 653, 657, 659, 661, 663, 665, 668, 670, 672, 770, 783, 784, 785, 786, 787, 788, 832, 833, 845, 885, 890, 910, 962, 968, 1063, 1075, 1076, 1077, 1090, 1091, 1093, 1095, 1108, 1109, 1386], "yellow": [352, 356, 405, 406, 407, 408, 411], "yield": [135, 137, 150, 151, 152, 165, 228, 230, 253, 316, 352, 512, 591, 633, 845, 962, 1118, 1125, 1362], "you": [1, 11, 15, 41, 47, 51, 57, 64, 65, 131, 133, 134, 135, 136, 137, 147, 150, 151, 152, 153, 155, 156, 159, 160, 162, 165, 169, 171, 205, 212, 230, 233, 242, 253, 254, 257, 261, 272, 276, 280, 284, 285, 286, 287, 299, 306, 309, 315, 316, 317, 319, 338, 352, 355, 421, 422, 426, 449, 461, 469, 470, 472, 476, 479, 482, 502, 508, 529, 555, 583, 591, 592, 607, 633, 638, 645, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 680, 692, 709, 714, 715, 716, 736, 739, 750, 751, 770, 779, 784, 787, 789, 793, 803, 807, 817, 820, 824, 836, 845, 861, 867, 881, 885, 890, 906, 907, 910, 917, 920, 924, 925, 927, 937, 945, 962, 966, 968, 1031, 1036, 1063, 1075, 1087, 1088, 1094, 1097, 1100, 1125, 1148, 1177, 1213, 1232, 1238, 1280, 1297, 1302, 1303, 1304, 1324, 1341, 1347, 1362, 1367, 1372, 1377, 1393], "your": [39, 41, 56, 57, 98, 145, 150, 151, 152, 153, 155, 171, 205, 254, 256, 261, 286, 287, 290, 306, 326, 331, 338, 352, 355, 454, 499, 514, 592, 701, 728, 730, 731, 738, 807, 845, 889, 895, 912, 931, 938, 945, 962, 966, 1068, 1120, 1213, 1289, 1316, 1318, 1319, 1326, 1362, 1367, 1393], "yy": [11, 58, 60, 185, 220, 247, 299, 352, 871, 962, 968, 1378, 1385, 1392], "yyi": [224, 352, 741, 874, 962], "yyyi": [41, 352], "yz": [58, 60], "z": [41, 65, 88, 138, 179, 228, 249, 251, 256, 286, 287, 316, 319, 320, 352, 361, 363, 365, 521, 550, 592, 617, 619, 621, 623, 624, 632, 646, 647, 648, 692, 700, 702, 704, 716, 728, 731, 761, 763, 782, 809, 811, 814, 820, 824, 829, 845, 889, 918, 920, 927, 962, 967, 968, 1128, 1241, 1242, 1280, 1288, 1290, 1292, 1304, 1316, 1319, 1362, 1374, 1378, 1390, 1392], "z_0": [320, 352], "z_1": [320, 352], "zap": 968, "zero": [29, 41, 131, 132, 148, 150, 151, 156, 158, 162, 180, 183, 209, 232, 242, 254, 285, 299, 304, 310, 311, 352, 507, 583, 588, 676, 684, 738, 752, 845, 864, 880, 885, 962, 1044, 1128, 1205, 1273, 1326, 1337, 1343, 1344, 1362, 1384, 1390], "zero_copy_onli": [1343, 1362], "zfill": [713, 759, 845, 1301], "zip": 1393, "zip_with": [235, 352, 1362], "zone": [72, 181, 182, 185, 450, 454, 476, 499, 731, 786, 787, 788, 845, 968, 1064, 1068, 1094, 1120, 1319, 1362], "zoneinfo": [72, 968], "zoom": [41, 352], "zstd": [40, 43, 44, 47, 49, 51, 352, 962], "zz": [185, 220, 247, 299, 352, 871, 962, 1378, 1385, 1392], "zzz": 741, "\u03bc": [138, 213, 242, 254, 284, 286, 287, 306, 322, 352, 450, 451, 453, 454, 455, 456, 458, 460, 464, 466, 467, 469, 470, 471, 472, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 653, 657, 659, 661, 663, 665, 668, 670, 672, 728, 731, 786, 787, 788, 789, 795, 845, 863, 885, 910, 962, 968, 1064, 1065, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1080, 1081, 1085, 1087, 1088, 1089, 1090, 1094, 1095, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1111, 1316, 1319, 1385], "\u0441\u0438\u043d\u0438\u0439": 1385, "\u0967\u096f\u096f\u096f": 968, "\u0968\u0966\u096d\u096d": 968, "\u4eac\u90fd": 968, "\u5927\u962a": 968, "\u6771\u4eac": [426, 427, 709, 710, 968, 1036, 1037, 1297, 1298], "\u90fd\u5e02": 968, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [711, 1299], "\uff54\uff45\uff53\uff54": 1385, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1385, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1385, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1385, "\ud835\udf0b": 1384}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_engine_affinity", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.PartitionByKey", "polars.PartitionMaxSize", "polars.PartitionParted", "polars.ScanCastOptions", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.defer", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.explain_all", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.parquet.ParquetFieldOverwrites", "polars.io.partition.BasePartitionContext", "polars.io.partition.KeyedPartition", "polars.io.partition.KeyedPartitionContext", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_metadata", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_business_day", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_kurtosis", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.QueryOptFlags", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.backward_fill", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_business_day", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.forward_fill", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.repeat_by", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_kurtosis", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1378, 1391], "IF": 1382, "__array__": [207, 970], "__arrow_c_stream__": [208, 971], "__dataframe__": 209, "__getitem__": [210, 972], "__iter__": 330, "ab": [360, 973, 1384], "aco": 1387, "acosd": 1387, "add": 361, "add_business_dai": [449, 1063], "agg": [331, 938], "agg_group": 362, "aggreg": [206, 359, 859, 969, 1379], "alia": [363, 974], "alias": [1379, 1384, 1385], "align_fram": 57, "all": [332, 364, 380, 546, 760, 939, 975, 990, 1168, 1391], "all_horizont": 761, "and_": 365, "ani": [366, 381, 547, 762, 976, 991, 1169], "any_horizont": 763, "api": [1, 58, 59, 60, 61, 857, 1390], "append": [367, 977], "approx_n_uniqu": [211, 368, 764, 860, 978], "arang": 765, "arcco": [369, 979], "arccosh": [370, 980], "arcsin": [371, 981], "arcsinh": [372, 982], "arctan": [373, 983], "arctan2": 766, "arctan2d": 767, "arctanh": [374, 984], "arg_max": [375, 382, 548, 985, 992, 1170], "arg_min": [376, 383, 549, 986, 993, 1171], "arg_sort": [377, 987], "arg_sort_bi": 768, "arg_tru": [378, 988], "arg_uniqu": [379, 989], "arg_wher": 769, "arr": [380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "arrai": [66, 837, 1354, 1380], "array_agg": 1380, "array_contain": 1380, "array_get": 1380, "array_length": 1380, "array_low": 1380, "array_mean": 1380, "array_revers": 1380, "array_sum": 1380, "array_to_str": 1380, "array_uniqu": 1380, "array_upp": 1380, "asin": 1387, "asind": 1387, "assert": 1393, "assert_frame_equ": 174, "assert_frame_not_equ": 175, "assert_series_equ": 176, "assert_series_not_equ": 177, "atan": 1387, "atan2": 1387, "atan2d": 1387, "atand": 1387, "attribut": [347, 957, 1355], "avail": 1, "avg": 1379, "avro": 858, "backward_fil": [404, 1014], "base_utc_offset": [450, 1064], "basepartitioncontext": 142, "batched_read": 140, "batchedcsvread": 140, "bin": [405, 406, 407, 408, 409, 410, 411, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "binari": [67, 838, 851, 1356], "bit_and": 1381, "bit_count": 1381, "bit_length": 1385, "bit_or": 1381, "bit_xor": 1381, "bitwis": 1381, "bitwise_and": [412, 1022], "bitwise_count_on": [413, 1023], "bitwise_count_zero": [414, 1024], "bitwise_leading_on": [415, 1025], "bitwise_leading_zero": [416, 1026], "bitwise_or": [417, 1027], "bitwise_trailing_on": [418, 1028], "bitwise_trailing_zero": [419, 1029], "bitwise_xor": [420, 1030], "boolean": [68, 839, 1357], "bottom_k": [212, 421, 861, 1031], "bottom_k_bi": 422, "build_info": 62, "business_day_count": 770, "cach": 862, "cancel": 954, "cast": [213, 423, 858, 863, 1032, 1388], "cast_time_unit": [451, 1065], "cat": [424, 425, 426, 427, 428, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "catalog": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "cataloginfo": 196, "categor": 69, "categori": [840, 1358], "categoricalremappingwarn": 100, "cbrt": [429, 1041, 1384], "ceil": [430, 1042, 1384], "centuri": [452, 1066], "chronoformatwarn": 101, "chunk_length": 1043, "claus": 1378, "clear": [214, 864, 1044], "clip": [431, 1045], "clipboard": 858, "clone": [215, 865, 1046], "cloud": 858, "co": [432, 1047, 1387], "coalesc": [771, 1382], "col": 841, "collect": 866, "collect_al": 63, "collect_all_async": 64, "collect_async": 867, "collect_schema": [216, 868], "column": [178, 179, 217, 842, 869], "columninfo": 197, "columnnotfounderror": 102, "combin": [453, 1067], "comparison": [851, 1366], "comput": [348, 843, 1359], "computeerror": 103, "concat": [65, 550, 690, 1172, 1278, 1385], "concat_arr": 772, "concat_list": 773, "concat_str": 774, "concat_w": 1385, "condit": 1382, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 205], "conjunct": 851, "contain": [384, 405, 551, 691, 994, 1015, 1173, 1279], "contains_ani": [692, 1280], "context": 205, "convers": 856, "convert_time_zon": [454, 1068], "corr": [218, 775], "cosd": 1387, "cosh": [433, 1048], "cot": [434, 1049, 1387], "cotd": 1387, "count": [219, 333, 435, 776, 870, 940, 1050, 1379], "count_match": [385, 552, 693, 995, 1174, 1281], "cov": 777, "creat": 1392, "create_list_strategi": 180, "credenti": 858, "credentialprovid": 32, "credentialprovideraw": 33, "credentialproviderazur": 34, "credentialprovidergcp": 35, "csv": [140, 858], "cum_count": [436, 778, 1051], "cum_fold": 779, "cum_max": [437, 1052], "cum_min": [438, 1053], "cum_prod": [439, 1054], "cum_reduc": 780, "cum_sum": [440, 781, 1055], "cum_sum_horizont": 782, "cumulative_ev": [441, 1056], "customufuncwarn": 104, "cut": [442, 1057], "dai": [457, 1071], "data": 357, "databas": 858, "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352], "dataorientationwarn": 105, "dataset": 858, "datasourceformat": 198, "datatyp": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 357], "date": [71, 455, 783, 1069, 1385], "date_part": 1386, "date_rang": [784, 785], "datetim": [72, 456, 786, 1070], "datetime_rang": [787, 788], "decim": 73, "decod": [406, 694, 1016, 1282], "decor": 205, "defer": 96, "degre": [443, 1387], "delet": 1392, "delta": 858, "describ": [220, 871, 1058], "descript": [349, 958, 1360], "deseri": [221, 444, 872], "diff": [445, 553, 1059, 1175], "disable_string_cach": 97, "distinct": 1378, "div": 1384, "document": 1390, "dot": [446, 1060], "drop": [222, 873, 1392], "drop_in_plac": 223, "drop_nan": [224, 447, 874, 1061], "drop_nul": [225, 448, 554, 875, 1062, 1176], "dst_offset": [458, 1072], "dt": [449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112], "dtype": [182, 226, 876, 1113], "duplicateerror": 106, "durat": [74, 789], "element": 790, "enable_string_cach": 98, "encod": [407, 695, 1017, 1283], "ends_with": [408, 424, 696, 1018, 1033, 1284, 1385], "engine_config": 937, "entropi": [495, 1114], "enum": 75, "epoch": [459, 1073], "eq": [496, 596, 1115], "eq_miss": [497, 1116], "equal": [227, 1117], "error": 358, "escape_regex": [99, 697, 1285], "estimated_s": [228, 1118], "eval": [555, 1177], "ewm_mean": [498, 1119], "ewm_mean_bi": [499, 1120], "ewm_std": [500, 1121], "ewm_var": [501, 1122], "exampl": [1, 968, 1393], "excel": 858, "except": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 358, 1391], "exclud": [502, 791], "execut": 1371, "execute_glob": 1372, "exp": [503, 1123, 1384], "explain": [877, 1392], "explain_al": 130, "explod": [229, 386, 504, 556, 698, 878, 996, 1124, 1178, 1286], "export": [350, 1361], "expr": [360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759], "express": [845, 966, 1390], "extend": [1, 230, 1125], "extend_const": [505, 1126], "extract": [699, 1287, 1386], "extract_al": [700, 1288], "extract_group": [701, 1289], "extract_mani": [702, 1290], "feather": 858, "fetch": 955, "fetch_block": 956, "field": [76, 739, 1327, 1328], "fill_nan": [231, 506, 879, 1127], "fill_nul": [232, 507, 880, 1128], "filter": [233, 508, 881, 1129], "find": [703, 1291], "find_mani": [704, 1292], "first": [334, 387, 509, 557, 792, 882, 941, 997, 1130, 1179, 1379], "flag": [234, 1131], "flatten": 510, "float32": 77, "float64": 78, "floor": [511, 1132, 1384], "floordiv": 512, "fold": [235, 793], "format": 794, "forward_fil": [513, 1133], "frame": 1390, "from": 1378, "from_arrow": 131, "from_datafram": 132, "from_dict": [133, 134], "from_epoch": 795, "from_json": 514, "from_numpi": 135, "from_panda": 136, "from_record": 137, "from_repr": 138, "function": [1, 844, 856, 968, 1383], "gather": [515, 558, 1134, 1180], "gather_everi": [236, 516, 559, 883, 1135, 1181], "ge": [517, 1136], "get": [388, 518, 560, 998, 1182], "get_categori": [425, 1034], "get_chunk": 1137, "get_column": [237, 239], "get_column_index": 238, "get_index_typ": 139, "get_polars_schema": 201, "get_table_info": 191, "glimps": 240, "global": 1390, "gpuengin": [937, 959], "greatest": 1382, "group": [796, 1378], "group_bi": [241, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 884, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953], "group_by_dynam": [242, 885], "groupbi": [330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 351, 960], "gt": [519, 1138], "has_multiple_output": 597, "has_nul": [520, 1139], "has_valid": 1140, "hash": [521, 1141], "hash_row": 243, "have": 1378, "head": [244, 335, 522, 561, 705, 797, 886, 942, 1142, 1183, 1293], "height": 245, "helper": 1393, "hist": [523, 1143], "hour": [460, 1074], "hstack": 246, "iceberg": 858, "ifnul": 1382, "implod": [524, 798, 1144], "import": 968, "in_process": [954, 955, 956], "index": 0, "index_of": [525, 1145], "initcap": 1385, "inprocessqueri": [954, 955, 956, 961], "input": 858, "insert_column": 247, "inspect": [526, 887], "instanc": 205, "int128": 79, "int16": 80, "int32": 81, "int64": 82, "int8": 83, "int_rang": [799, 800], "interfac": 1389, "interpol": [248, 527, 888, 1146], "interpolate_bi": [528, 1147], "intersect": 1391, "introduct": 1390, "invalidoperationerror": 107, "io": [140, 141, 142, 143, 144, 145, 966], "ipc": 858, "is_between": [529, 1148], "is_business_dai": [461, 1075], "is_column": 598, "is_column_select": 599, "is_dupl": [249, 530, 1149], "is_empti": [250, 1150], "is_finit": [531, 1151], "is_first_distinct": [532, 1152], "is_in": [533, 1153], "is_infinit": [534, 1154], "is_last_distinct": [535, 1155], "is_leap_year": [462, 1076], "is_liter": 600, "is_loc": 1035, "is_nan": [536, 1156], "is_not_nan": [537, 1157], "is_not_nul": [538, 1158], "is_nul": [539, 1159], "is_regex_project": 601, "is_sort": 1160, "is_uniqu": [251, 540, 1161], "iso_year": [463, 1077], "item": [252, 1162], "iter_column": 253, "iter_row": 254, "iter_slic": 255, "join": [256, 389, 562, 706, 889, 999, 1184, 1294, 1378], "join_asof": [257, 890], "join_wher": [258, 891], "json": 858, "json_decod": [707, 1295], "json_encod": [740, 1329], "json_norm": 146, "json_path_match": [708, 1296], "keep": 616, "keyedpartit": 143, "keyedpartitioncontext": 144, "kurtosi": [541, 1163], "lake": 858, "last": [336, 390, 542, 563, 801, 892, 943, 1000, 1164, 1185, 1379], "lazi": [259, 893], "lazyfram": [48, 49, 50, 51, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 962], "lazygroupbi": [938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953], "le": [543, 1165], "least": 1382, "left": 1385, "len": [337, 544, 564, 802, 944, 1166, 1186], "len_byt": [426, 709, 1036, 1297], "len_char": [427, 710, 1037, 1298], "length": 1385, "limit": [260, 545, 894, 1167, 1378], "linear_spac": [803, 804], "list": [84, 183, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 846, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1363], "list_catalog": 192, "list_namespac": 193, "list_tabl": 194, "lit": 805, "ln": 1384, "load": [2, 205], "load_from_fil": 3, "load_profil": 184, "log": [586, 1208, 1384], "log10": [587, 1209, 1384], "log1p": [588, 1210, 1384], "log2": 1384, "lower": 1385, "lower_bound": [589, 1211], "lt": [590, 1212], "ltrim": 1385, "manag": 205, "manipul": [354, 849, 964, 1365], "map": 617, "map_batch": [591, 806, 895], "map_el": [592, 1213], "map_field": 618, "map_group": [338, 807, 945], "map_row": 261, "mapwithoutreturndtypewarn": 108, "math": 1384, "max": [262, 339, 391, 565, 593, 808, 896, 946, 1001, 1078, 1187, 1214, 1379], "max_horizont": [263, 809], "mean": [264, 340, 566, 594, 810, 897, 947, 1079, 1188, 1215], "mean_horizont": [265, 811], "median": [266, 341, 392, 567, 595, 812, 898, 948, 1002, 1080, 1189, 1216, 1379], "melt": [267, 899], "merge_sort": [268, 900], "meta": [596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 847], "metadata": 965, "method": 1390, "microsecond": [464, 1081], "millennium": [465, 1082], "millisecond": [466, 1083], "min": [269, 342, 393, 568, 611, 813, 901, 949, 1003, 1084, 1190, 1217, 1379], "min_horizont": [270, 814], "minut": [467, 1085], "miscellan": [353, 848, 856, 963, 1364], "mod": [612, 1384], "mode": [613, 1218], "moduleupgraderequirederror": 109, "month": [468, 1086], "month_end": [469, 1087], "month_start": [470, 1088], "mul": 614, "multipl": [205, 856], "n_chunk": [271, 1219], "n_uniqu": [272, 343, 394, 569, 615, 815, 950, 1004, 1191, 1220], "name": [616, 617, 618, 619, 620, 621, 622, 623, 624, 842, 850, 1221, 1391], "namespaceinfo": 199, "nan_max": [625, 1222], "nan_min": [626, 1223], "nanosecond": [471, 1089], "ne": [602, 627, 1224], "ne_miss": [628, 1225], "neg": 629, "nest": 357, "new": 1, "new_from_index": 1226, "next_batch": 140, "nodataerror": 110, "normal": [711, 1299, 1385], "norowsreturnederror": 111, "not_": [630, 1227], "nth": 816, "null": 85, "null_count": [273, 631, 902, 1228], "nullif": 1382, "numer": [357, 851, 1366], "object": 86, "octet_length": 1385, "od": 858, "offset": 1378, "offset_bi": [472, 1090], "ones": 817, "oper": [851, 968, 1366, 1391, 1392], "option": [205, 858], "or_": 632, "order": 1378, "ordinal_dai": [473, 1091], "other": 357, "outofboundserror": 112, "output": 858, "output_nam": 603, "over": 633, "pad_end": [712, 1300], "pad_start": [713, 1301], "panic": 358, "panicexcept": 113, "parametercollisionerror": 114, "parametr": [178, 179, 180, 181, 182, 183, 184, 185, 186, 1393], "parquet": [141, 858], "parquetfieldoverwrit": 141, "partit": [142, 143, 144, 858], "partition_bi": 274, "partitionbykei": 52, "partitionmaxs": 53, "partitionpart": 54, "pct_chang": [634, 1229], "peak_max": [635, 1230], "peak_min": [636, 1231], "performancewarn": 115, "pi": 1384, "pipe": [275, 637, 903], "pivot": 276, "plot": [355, 1367], "plugin": [145, 147, 966], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 841, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1393], "polarserror": 116, "polarsinefficientmapwarn": 117, "polarswarn": 118, "pop": 604, "pow": [638, 1232, 1384], "prefix": 619, "prefix_field": 620, "product": [277, 639, 1233], "profil": [904, 1393], "provid": 1, "pyarrow": 858, "python": [857, 1390], "qcut": [640, 1234], "quantil": [278, 344, 641, 818, 905, 951, 1235], "quantile_cont": 1379, "quantile_disc": 1379, "quarter": [474, 1092], "queri": [856, 1390], "queryoptflag": 936, "radian": [642, 1387], "random": 856, "rank": [643, 1236], "read_avro": 148, "read_clipboard": 149, "read_csv": 150, "read_csv_batch": 151, "read_databas": 152, "read_database_uri": 153, "read_delta": 154, "read_excel": 155, "read_ipc": 156, "read_ipc_schema": 157, "read_ipc_stream": 158, "read_json": 159, "read_ndjson": 160, "read_od": 161, "read_parquet": 162, "read_parquet_metadata": 163, "read_parquet_schema": 164, "rechunk": [279, 644, 1237], "reduc": 819, "refer": 857, "regexp_lik": 1385, "regist": 1373, "register_dataframe_namespac": 58, "register_expr_namespac": 59, "register_glob": 1374, "register_io_sourc": 145, "register_lazyframe_namespac": 60, "register_mani": 1375, "register_plugin_funct": 147, "register_series_namespac": 61, "registr": 1, "reinterpret": [409, 645, 1019, 1238], "remot": 906, "remov": [280, 907], "renam": [281, 908, 1239], "rename_field": [741, 1330], "repeat": 820, "repeat_bi": [646, 1240], "replac": [475, 647, 714, 1093, 1241, 1302, 1385], "replace_al": [715, 1303], "replace_column": 282, "replace_mani": [716, 1304], "replace_strict": [648, 1242], "replace_time_zon": [476, 1094], "reshap": [649, 1243], "restore_default": 4, "revers": [283, 395, 570, 650, 717, 909, 1005, 1192, 1244, 1305, 1385], "right": 1385, "rle": [651, 1245], "rle_id": [652, 1246], "roll": [284, 653, 910], "rolling_corr": 821, "rolling_cov": 822, "rolling_kurtosi": [654, 1247], "rolling_map": [655, 1248], "rolling_max": [656, 1249], "rolling_max_bi": 657, "rolling_mean": [658, 1250], "rolling_mean_bi": 659, "rolling_median": [660, 1251], "rolling_median_bi": 661, "rolling_min": [662, 1252], "rolling_min_bi": 663, "rolling_quantil": [664, 1253], "rolling_quantile_bi": 665, "rolling_skew": [666, 1254], "rolling_std": [667, 1255], "rolling_std_bi": 668, "rolling_sum": [669, 1256], "rolling_sum_bi": 670, "rolling_var": [671, 1257], "rolling_var_bi": 672, "root_nam": 605, "round": [477, 673, 1095, 1258, 1384], "round_sig_fig": [674, 1259], "row": [285, 286], "rows_by_kei": 287, "rowserror": 119, "rtrim": 1385, "sampl": [288, 571, 675, 1193, 1260], "save": [5, 205], "save_to_fil": 6, "scan": 858, "scan_csv": 165, "scan_delta": 166, "scan_iceberg": 167, "scan_ipc": 168, "scan_ndjson": 169, "scan_parquet": 170, "scan_pyarrow_dataset": 171, "scan_tabl": 195, "scancastopt": 55, "scatter": 1261, "schema": [289, 911, 967, 1331], "schemaerror": 122, "schemafieldnotfounderror": 123, "search_sort": [676, 1262], "second": [478, 1096], "select": [290, 354, 823, 849, 912, 964, 1365, 1378], "select_seq": [291, 913], "selector": 968, "seri": [185, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1362], "serial": [292, 353, 606, 914, 963], "set": [968, 1263, 1391], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [572, 1194], "set_engine_affin": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_intersect": [573, 1195], "set_profil": 186, "set_random_se": 172, "set_sort": [293, 677, 915, 1264], "set_streaming_chunk_s": 15, "set_symmetric_differ": [574, 1196], "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_union": [575, 1197], "set_verbos": 30, "shape": [294, 1265], "shapeerror": 124, "shift": [295, 396, 576, 678, 916, 1006, 1198, 1266], "show": 1392, "show_graph": [607, 917], "show_vers": 173, "shrink_dtyp": [679, 1267], "shrink_to_fit": [296, 1268], "shuffl": [680, 1269], "sign": [681, 1270, 1384], "sin": [682, 1271, 1387], "sind": 1387, "sinh": [683, 1272], "sink_csv": 48, "sink_ipc": 49, "sink_ndjson": 50, "sink_parquet": 51, "size": [410, 1020], "skew": [684, 1273], "slice": [297, 577, 685, 718, 918, 1199, 1274, 1306], "sort": [298, 397, 578, 686, 919, 1007, 1200, 1275], "sort_bi": 687, "split": [719, 1307], "split_exact": [720, 1308], "split_part": 1385, "splitn": [721, 1309], "sql": [299, 824, 920, 1378, 1383, 1389, 1390], "sql_expr": 825, "sqlcontext": [1371, 1372, 1373, 1374, 1375, 1376, 1377, 1390], "sqlinterfaceerror": 120, "sqlsyntaxerror": 121, "sqrt": [688, 1276, 1384], "starts_with": [411, 428, 722, 1021, 1038, 1310, 1385], "state": [31, 205], "std": [300, 398, 579, 689, 826, 921, 1008, 1201, 1277], "stddev": 1379, "str": [690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326], "strategi": 1393, "strftime": [479, 1097, 1386], "string": [87, 357, 852, 1368, 1385], "string_to_arrai": 1385, "stringcach": [56, 856], "stringcachemismatcherror": 125, "strip_char": [723, 1311], "strip_chars_end": [724, 1312], "strip_chars_start": [725, 1313], "strip_prefix": [726, 1314], "strip_suffix": [727, 1315], "strpo": 1385, "strptime": [728, 1316, 1385], "struct": [88, 739, 740, 741, 742, 743, 827, 853, 1327, 1328, 1329, 1330, 1331, 1332, 1369], "structfieldnotfounderror": 126, "style": 356, "sub": 744, "substr": 1385, "suffix": 621, "suffix_field": 622, "sum": [301, 345, 399, 580, 745, 828, 922, 952, 1009, 1202, 1333, 1379], "sum_horizont": [302, 829], "tabl": [1376, 1392], "tableinfo": [200, 201], "tabletyp": 202, "tail": [303, 346, 581, 729, 746, 830, 923, 953, 1203, 1317, 1334], "tan": [747, 1335, 1387], "tand": 1387, "tanh": [748, 1336], "tempor": [357, 854, 1370, 1386], "test": [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 1393], "thread_pool_s": 187, "threadpool_s": 188, "time": [89, 480, 831, 1098], "time_rang": [832, 833], "timestamp": [481, 1099, 1385], "to_arrai": [582, 1204], "to_arrow": [304, 1337], "to_dat": [730, 1318], "to_datetim": [731, 1319], "to_decim": [732, 1320], "to_dict": [305, 306], "to_dummi": [307, 1338], "to_fram": 1339, "to_init_repr": [308, 1340], "to_integ": [733, 1321], "to_jax": [309, 1341], "to_list": [400, 1010, 1342], "to_loc": 1039, "to_lowercas": [623, 734, 1322], "to_numpi": [310, 1343], "to_panda": [311, 1344], "to_phys": [749, 1345], "to_seri": 312, "to_str": [482, 1100], "to_struct": [313, 401, 583, 1011, 1205], "to_tim": [735, 1323], "to_titlecas": [736, 1324], "to_torch": [314, 1346], "to_uppercas": [624, 737, 1325], "toomanyrowsreturnederror": 127, "top_k": [315, 750, 924, 1347], "top_k_bi": 751, "total_dai": [483, 1101], "total_hour": [484, 1102], "total_microsecond": [485, 1103], "total_millisecond": [486, 1104], "total_minut": [487, 1105], "total_nanosecond": [488, 1106], "total_second": [489, 1107], "transpos": 316, "tree_format": 608, "trigonometri": 1387, "truediv": 752, "truncat": [490, 1108, 1392], "try_cast": 1388, "type": [357, 1388], "uint16": 90, "uint32": 91, "uint64": 92, "uint8": 93, "undo_alias": 609, "union": 1391, "uniqu": [317, 402, 584, 753, 925, 1012, 1206, 1348], "unique_count": [754, 1349], "uniti": [196, 197, 198, 199, 200, 201, 202, 204], "unknown": 94, "unnest": [318, 742, 926, 1332, 1380, 1392], "unpivot": [319, 927], "unregist": 1377, "unstablewarn": 128, "unstack": 320, "unsuitablesqlerror": 129, "updat": [321, 928], "upper": 1385, "upper_bound": [755, 1350], "upsampl": 322, "us": 205, "uses_lexical_ord": 1040, "using_string_cach": 189, "utf8": 95, "value_count": [756, 1351], "var": [323, 403, 585, 757, 834, 929, 1013, 1207, 1352], "varianc": 1379, "vstack": 324, "warn": 358, "week": [491, 1109], "weekdai": [492, 1110], "when": 835, "where": [758, 1378], "width": [325, 930], "window": 855, "with_column": [326, 931], "with_columns_seq": [327, 932], "with_context": 933, "with_field": 743, "with_row_count": [328, 934], "with_row_index": [329, 935], "with_time_unit": [493, 1111], "write_avro": 36, "write_clipboard": 37, "write_csv": 38, "write_databas": 39, "write_delta": 40, "write_excel": 41, "write_iceberg": 42, "write_ipc": 43, "write_ipc_stream": 44, "write_json": [45, 610], "write_ndjson": 46, "write_parquet": 47, "xor": 759, "year": [494, 1112], "zero": 836, "zfill": [738, 1326], "zip_with": 1353}})